{% macro header() %}<title>LoadCombination Class</title>{% assets "css_chm" %}<link rel="stylesheet" type="text/css" href="{{ ASSET_URL }}" />{% endassets %}{% assets "js_assets" %}<script src="{{ ASSET_URL }}"></script>{% endassets %}<meta name="container" content="Autodesk.Revit.DB.Structure" /><meta name="file" content="82891124-6fb9-e612-ca8c-6f4e32e2c121" /><meta name="guid" content="82891124-6fb9-e612-ca8c-6f4e32e2c121" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script>{% endmacro %}<div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2015 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">LoadCombination Class</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="489a8893-e4a2-d720-6e7d-d37f0953bf1e.htm">Members</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2015 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table></div><div id="mainSection"><div id="mainBody"><div class="summary">An object that represents a load combination.</div><p /><b>Namespace:</b> <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">Autodesk.Revit.DB.Structure</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">LoadCombination</span> : <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">LoadCombination</span> _
	<span class="keyword">Inherits</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">LoadCombination</span> : <span class="keyword">public</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> CombinationInformation(LoadCombination loadCombination)
{
    StringBuilder information = <span class="highlight-keyword">new</span> StringBuilder();

    <span class="highlight-comment">//Get the string with Load Combination Name or empty string</span>
    information.Append(<span class="highlight-literal">"\n\nCombination Name: "</span> + loadCombination.Name);

    <span class="highlight-comment">//Get the string with Load Combination State</span>
    information.Append(<span class="highlight-literal">"\nCombination state: "</span> + loadCombination.CombinationState);

    <span class="highlight-comment">//Load Combination State index or 0</span>
    information.Append(<span class="highlight-literal">"\nState index : "</span> + loadCombination.CombinationStateIndex.ToString());

    <span class="highlight-comment">//Get the string with Load Combination Type</span>
    information.Append(<span class="highlight-literal">"\nCombination type: "</span> + loadCombination.CombinationType);

    <span class="highlight-comment">//Get Load Combination Type index or 0</span>
    information.Append(<span class="highlight-literal">"\nType index: "</span> + loadCombination.CombinationTypeIndex.ToString());

    <span class="highlight-comment">//Get the number of Load Combination Components </span>
    <span class="highlight-keyword">int</span> componentsNumber = loadCombination.NumberOfComponents;
    information.Append(<span class="highlight-literal">"\nComponents number: "</span> + componentsNumber.ToString());
    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> j = <span class="highlight-number">0</span>; j &lt; componentsNumber; j++)
    {
        <span class="highlight-keyword">double</span> factor = loadCombination.get_Factor(j);
        <span class="highlight-keyword">string</span> caseName = loadCombination.get_CombinationCaseName(j);
        information.Append(<span class="highlight-literal">"\nCase name["</span> + j.ToString() + <span class="highlight-literal">"]: "</span> + caseName + <span class="highlight-literal">"  factor: "</span> +
                              factor.ToString());
    }

    <span class="highlight-comment">//return the number of usage in the combination</span>
    <span class="highlight-keyword">int</span> usageNumber = loadCombination.NumberOfUsages;
    information.Append(<span class="highlight-literal">"\nNumber of usages: "</span> + usageNumber + <span class="highlight-literal">"\nUsage names: "</span>);
    <span class="highlight-comment">//get each usage name</span>
    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; usageNumber; i++)
    {
        information.Append(loadCombination.get_UsageName(i) + <span class="highlight-literal">"  "</span>);
    }

    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>,information.ToString());
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> CombinationInformation(loadCombination <span class="highlight-keyword">As</span> LoadCombination)
    <span class="highlight-keyword">Dim</span> information <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> StringBuilder()

    <span class="highlight-comment">'Get the string with Load Combination Name or empty string</span>
    information.Append(vbLf &amp; vbLf &amp; <span class="highlight-literal">"Combination Name: "</span> &amp; Convert.ToString(loadCombination.Name))

    <span class="highlight-comment">'Get the string with Load Combination State</span>
    information.Append(vbLf &amp; <span class="highlight-literal">"Combination state: "</span> &amp; Convert.ToString(loadCombination.CombinationState))

    <span class="highlight-comment">'Load Combination State index or 0</span>
    information.Append(vbLf &amp; <span class="highlight-literal">"State index : "</span> &amp; loadCombination.CombinationStateIndex.ToString())

    <span class="highlight-comment">'Get the string with Load Combination Type</span>
    information.Append(vbLf &amp; <span class="highlight-literal">"Combination type: "</span> &amp; Convert.ToString(loadCombination.CombinationType))

    <span class="highlight-comment">'Get Load Combination Type index or 0</span>
    information.Append(vbLf &amp; <span class="highlight-literal">"Type index: "</span> &amp; loadCombination.CombinationTypeIndex.ToString())

    <span class="highlight-comment">'Get the number of Load Combination Components </span>
    <span class="highlight-keyword">Dim</span> componentsNumber <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = loadCombination.NumberOfComponents
    information.Append(vbLf &amp; <span class="highlight-literal">"Components number: "</span> &amp; componentsNumber.ToString())
    <span class="highlight-keyword">For</span> j <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> componentsNumber - <span class="highlight-number">1</span>
        <span class="highlight-keyword">Dim</span> factor <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = loadCombination.Factor(j)
        <span class="highlight-keyword">Dim</span> caseName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = loadCombination.CombinationCaseName(j)
        information.Append(vbLf &amp; <span class="highlight-literal">"Case name["</span> &amp; j.ToString() &amp; <span class="highlight-literal">"]: "</span> &amp; caseName &amp; <span class="highlight-literal">"  factor: "</span> &amp; factor.ToString())
    <span class="highlight-keyword">Next</span>

    <span class="highlight-comment">'return the number of usage in the combination</span>
    <span class="highlight-keyword">Dim</span> usageNumber <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = loadCombination.NumberOfUsages
    information.Append(vbLf &amp; <span class="highlight-literal">"Number of usages: "</span> &amp; usageNumber &amp; vbLf &amp; <span class="highlight-literal">"Usage names: "</span>)
    <span class="highlight-comment">'get each usage name</span>
    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> usageNumber - <span class="highlight-number">1</span>
        information.Append(loadCombination.UsageName(i) &amp; <span class="highlight-literal">"  "</span>)
    <span class="highlight-keyword">Next</span>

    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, information.ToString())
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Object</a><br />  <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Element</a><br />    <span class="selflink">Autodesk.Revit.DB.Structure<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>LoadCombination</span><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="489a8893-e4a2-d720-6e7d-d37f0953bf1e.htm">LoadCombination Members</a></div><div class="seeAlsoStyle"><a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">Autodesk.Revit.DB.Structure Namespace</a></div></div></div></div>