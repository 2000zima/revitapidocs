{% macro header() %}<title>IntersectWithCurve Method </title>{% assets "css_chm" %}<link rel="stylesheet" type="text/css" href="{{ ASSET_URL }}" />{% endassets %}{% assets "js_assets" %}<script src="{{ ASSET_URL }}"></script>{% endassets %}<meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="8e04f956-b262-7f3e-59cb-d2c02c2769d7" /><meta name="guid" content="8e04f956-b262-7f3e-59cb-d2c02c2769d7" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script>{% endmacro %}<div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2015 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Solid<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>IntersectWithCurve Method </span></td></tr><tr id="headerTableRow3"><td align="left"><a href="7a3b5ac1-c66d-9f81-a11d-9bcd4e026295.htm">Solid Class</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2015 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table></div><div id="mainSection"><div id="mainBody"><div class="summary">
   Calculates and returns the intersection between a curve and this solid.
</div><p /><b>Namespace:</b> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)<br /><b>Since:</b> 
   2013
<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <a href="888716e3-376f-c4db-abe3-4e826c799656.htm">SolidCurveIntersection</a> <span class="identifier">IntersectWithCurve</span>(
	<a href="400cc9b6-9ff7-de85-6fd8-c20002209d25.htm">Curve</a> <span class="parameter">curve</span>,
	<a href="fce58e1d-47c7-9afb-d701-ec73d97d0f2b.htm">SolidCurveIntersectionOptions</a> <span class="parameter">options</span>
)</pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">IntersectWithCurve</span> ( _
	<span class="parameter">curve</span> <span class="keyword">As</span> <a href="400cc9b6-9ff7-de85-6fd8-c20002209d25.htm">Curve</a>, _
	<span class="parameter">options</span> <span class="keyword">As</span> <a href="fce58e1d-47c7-9afb-d701-ec73d97d0f2b.htm">SolidCurveIntersectionOptions</a> _
) <span class="keyword">As</span> <a href="888716e3-376f-c4db-abe3-4e826c799656.htm">SolidCurveIntersection</a></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span>:
<a href="888716e3-376f-c4db-abe3-4e826c799656.htm">SolidCurveIntersection</a>^ <span class="identifier">IntersectWithCurve</span>(
	<a href="400cc9b6-9ff7-de85-6fd8-c20002209d25.htm">Curve</a>^ <span class="parameter">curve</span>,
	<a href="fce58e1d-47c7-9afb-d701-ec73d97d0f2b.htm">SolidCurveIntersectionOptions</a>^ <span class="parameter">options</span>
)</pre></td></tr></table></span></div><div id="parameters"><h4 class="subHeading">Parameters</h4><dl paramName="curve"><dt><span class="parameter">curve</span></dt><dd>Type: <a href="400cc9b6-9ff7-de85-6fd8-c20002209d25.htm">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Curve</a><br />
   The curve.
</dd></dl><dl paramName="options"><dt><span class="parameter">options</span></dt><dd>Type: <a href="fce58e1d-47c7-9afb-d701-ec73d97d0f2b.htm">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>SolidCurveIntersectionOptions</a><br />
   The options.  If NULL, the default options will be used.
</dd></dl></div><h4 class="subHeading">Return Value</h4>
   The intersection results.
</div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> FindColumnRebarIntersections(Document document, FamilyInstance column)
{
    <span class="highlight-comment">// We will be computing the total length of the rebar inside the column</span>
    <span class="highlight-keyword">double</span> totalRebarLengthInColumn = <span class="highlight-number">0</span>;

    <span class="highlight-comment">// Find rebar hosted by this column</span>
    RebarHostData rebarHostData = RebarHostData.GetRebarHostData(column);
    <span class="highlight-keyword">if</span> (rebarHostData == <span class="highlight-keyword">null</span>)
    {
        <span class="highlight-keyword">return</span>;
    }

    IList&lt;Rebar&gt; rebars = rebarHostData.GetRebarsInHost();
    <span class="highlight-keyword">if</span> (rebars.Count == <span class="highlight-number">0</span>)
    {
        <span class="highlight-keyword">return</span>;
    }

    <span class="highlight-comment">// Retrieve geometry of the column</span>
    Options geomOptions = <span class="highlight-keyword">new</span> Options();
    geomOptions.ComputeReferences = <span class="highlight-keyword">true</span>;
    geomOptions.DetailLevel = ViewDetailLevel.Fine;
    GeometryElement elemGeometry = column.get_Geometry(geomOptions);

    <span class="highlight-comment">// Examine all geometry primitives of the column</span>
    <span class="highlight-keyword">foreach</span> (GeometryObject elemPrimitive <span class="highlight-keyword">in</span> elemGeometry)
    {

        <span class="highlight-comment">// Skip objects that are not geometry instances</span>
        GeometryInstance gInstance = elemPrimitive <span class="highlight-keyword">as</span> GeometryInstance;
        <span class="highlight-keyword">if</span> (gInstance == <span class="highlight-keyword">null</span>)
        {
            <span class="highlight-keyword">continue</span>;
        }

        <span class="highlight-comment">// Retrieve geometry of each found geometry instance</span>
        GeometryElement instGeometry = gInstance.GetInstanceGeometry();
        <span class="highlight-keyword">foreach</span> (GeometryObject instPrimitive <span class="highlight-keyword">in</span> instGeometry)
        {

            <span class="highlight-comment">// Skip non-solid sobject</span>
            Solid solid = instPrimitive <span class="highlight-keyword">as</span> Solid;
            <span class="highlight-keyword">if</span> (solid == <span class="highlight-keyword">null</span>)
            {
                <span class="highlight-keyword">continue</span>;
            }

            SolidCurveIntersectionOptions intersectOptions = <span class="highlight-keyword">new</span> SolidCurveIntersectionOptions();
            <span class="highlight-keyword">foreach</span> (Rebar rebar <span class="highlight-keyword">in</span> rebars)
            {
                <span class="highlight-comment">// Get the centerlines for the rebar to find their intersection with the column</span>
                <span class="highlight-keyword">bool</span> selfIntersection = <span class="highlight-keyword">false</span>;
                <span class="highlight-keyword">bool</span> suppresHooks = <span class="highlight-keyword">false</span>;
                <span class="highlight-keyword">bool</span> suppresBends = <span class="highlight-keyword">false</span>;
                IList&lt;Curve&gt; curves = rebar.GetCenterlineCurves(selfIntersection, suppresHooks, suppresBends);

                <span class="highlight-comment">// Examine every segment of every curve of the centerline</span>
                <span class="highlight-keyword">foreach</span> (Curve curve <span class="highlight-keyword">in</span> curves)
                {
                    SolidCurveIntersection intersection = solid.IntersectWithCurve(curve, intersectOptions);
                    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> segment = <span class="highlight-number">0</span>; segment &lt;= intersection.SegmentCount - <span class="highlight-number">1</span>; segment++)
                    {
                        <span class="highlight-comment">// Calculate length of the rebar that is inside the column</span>
                        Curve curveInside = intersection.GetCurveSegment(segment);
                        <span class="highlight-keyword">double</span> rebarLengthInColumn = curveInside.Length;
                        totalRebarLengthInColumn = totalRebarLengthInColumn + rebarLengthInColumn;
                    }
                }

            }
        }
    }

}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> FindColumnRebarIntersections(document <span class="highlight-keyword">As</span> Document, column <span class="highlight-keyword">As</span> FamilyInstance)
    <span class="highlight-comment">' We will be computing the total length of the rebar inside the column</span>
    <span class="highlight-keyword">Dim</span> totalRebarLengthInColumn <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = <span class="highlight-number">0</span>

    <span class="highlight-comment">' Find rebar hosted by this column</span>
    <span class="highlight-keyword">Dim</span> rebarHostData__1 <span class="highlight-keyword">As</span> RebarHostData = RebarHostData.GetRebarHostData(column)
    <span class="highlight-keyword">If</span> rebarHostData__1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> rebars <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> Rebar) = rebarHostData__1.GetRebarsInHost()
    <span class="highlight-keyword">If</span> rebars.Count = <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Retrieve geometry of the column</span>
    <span class="highlight-keyword">Dim</span> geomOptions <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Options()
    geomOptions.ComputeReferences = <span class="highlight-keyword">True</span>
    geomOptions.DetailLevel = ViewDetailLevel.Fine
    <span class="highlight-keyword">Dim</span> elemGeometry <span class="highlight-keyword">As</span> GeometryElement = column.Geometry(geomOptions)

    <span class="highlight-comment">' Examine all geometry primitives of the column</span>
    <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> elemPrimitive <span class="highlight-keyword">As</span> GeometryObject <span class="highlight-keyword">In</span> elemGeometry

        <span class="highlight-comment">' Skip objects that are not geometry instances</span>
        <span class="highlight-keyword">Dim</span> gInstance <span class="highlight-keyword">As</span> GeometryInstance = <span class="highlight-keyword">TryCast</span>(elemPrimitive, GeometryInstance)
        <span class="highlight-keyword">If</span> gInstance <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">For</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        <span class="highlight-comment">' Retrieve geometry of each found geometry instance</span>
        <span class="highlight-keyword">Dim</span> instGeometry <span class="highlight-keyword">As</span> GeometryElement = gInstance.GetInstanceGeometry()
        <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> instPrimitive <span class="highlight-keyword">As</span> GeometryObject <span class="highlight-keyword">In</span> instGeometry

            <span class="highlight-comment">' Skip non-solid sobject</span>
            <span class="highlight-keyword">Dim</span> solid <span class="highlight-keyword">As</span> Solid = <span class="highlight-keyword">TryCast</span>(instPrimitive, Solid)
            <span class="highlight-keyword">If</span> solid <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">For</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-keyword">Dim</span> intersectOptions <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> SolidCurveIntersectionOptions()
            <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> rebar <span class="highlight-keyword">As</span> Rebar <span class="highlight-keyword">In</span> rebars
                <span class="highlight-comment">' Get the centerlines for the rebar to find their intersection with the column</span>
                <span class="highlight-keyword">Dim</span> selfIntersection <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>
                <span class="highlight-keyword">Dim</span> suppresHooks <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>
                <span class="highlight-keyword">Dim</span> suppresBends <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>
                <span class="highlight-keyword">Dim</span> curves <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> Curve) = rebar.GetCenterlineCurves(selfIntersection, suppresHooks, suppresBends)

                <span class="highlight-comment">' Examine every segment of every curve of the centerline</span>
                <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> curve <span class="highlight-keyword">As</span> Curve <span class="highlight-keyword">In</span> curves
                    <span class="highlight-keyword">Dim</span> intersection <span class="highlight-keyword">As</span> SolidCurveIntersection = solid.IntersectWithCurve(curve, intersectOptions)
                    <span class="highlight-keyword">For</span> segment <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> intersection.SegmentCount - <span class="highlight-number">1</span>
                        <span class="highlight-comment">' Calculate length of the rebar that is inside the column</span>
                        <span class="highlight-keyword">Dim</span> curveInside <span class="highlight-keyword">As</span> Curve = intersection.GetCurveSegment(segment)
                        <span class="highlight-keyword">Dim</span> rebarLengthInColumn <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = curveInside.Length
                        totalRebarLengthInColumn = totalRebarLengthInColumn + rebarLengthInColumn
                    <span class="highlight-keyword">Next</span>

                <span class="highlight-keyword">Next</span>
            <span class="highlight-keyword">Next</span>
        <span class="highlight-keyword">Next</span>
    <span class="highlight-keyword">Next</span>

<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(exceptionsToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exceptionsToggle, event)" tabindex="0"><img id="exceptionsToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Exceptions</span></h1><div id="exceptionsSection" class="section" name="collapseableSection" style=""><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th class="exceptionNameColumn">Exception</th><th class="exceptionConditionColumn">Condition</th></tr><tr><td><a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ArgumentException</a></td><td>
   The input curve is not bound.
   -or-
   The input solid is not a closed volume.
</td></tr><tr><td><a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ArgumentNullException</a></td><td>
   A non-optional argument was NULL
</td></tr></table></div></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="7a3b5ac1-c66d-9f81-a11d-9bcd4e026295.htm">Solid Class</a></div><div class="seeAlsoStyle"><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>
