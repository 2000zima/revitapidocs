{% macro header() %}<title>RollBack Method </title>{% assets "css_chm" %}<link rel="stylesheet" type="text/css" href="{{ ASSET_URL }}" />{% endassets %}{% assets "js_chm" %}<script src="{{ ASSET_URL }}"></script>{% endassets %}<meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="bd1e69e9-961e-1c07-f70a-a29b90c6eb97" /><meta name="guid" content="bd1e69e9-961e-1c07-f70a-a29b90c6eb97" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script>{% endmacro %}<div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2015 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Transaction<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>RollBack Method </span></td></tr><tr id="headerTableRow3"><td align="left"><a href="308ebf8d-d96d-4643-cd1d-34fffcea53fd.htm">Transaction Class</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2015 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table></div><div id="mainSection"><div id="mainBody"><div class="summary">
   Rolls back all changes made to the model during the transaction.
</div><p /><b>Namespace:</b> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <a href="29b9a7a8-6754-8310-e063-622b569bb6d5.htm">TransactionStatus</a> <span class="identifier">RollBack</span>()</pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">RollBack</span> <span class="keyword">As</span> <a href="29b9a7a8-6754-8310-e063-622b569bb6d5.htm">TransactionStatus</a></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span>:
<a href="29b9a7a8-6754-8310-e063-622b569bb6d5.htm">TransactionStatus</a> <span class="identifier">RollBack</span>()</pre></td></tr></table></span></div><h4 class="subHeading">Return Value</h4>
   If finished successfully, this method returns TransactionStatus.RolledBack.
   <p>Be aware that the returned status does not have to be necessarily the same like
   the status returned by <a href="fdf98941-eee4-d8af-e3f7-5b6c7ccc3c74.htm">GetStatus<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a> even when the method is called
   immediately after rolling back the transaction. Such difference may happen due to actions
   made by a transaction finalizer, if there was one set.
   (See <a href="c03bb2e5-f679-bf24-4e87-08b3c3a08385.htm">FailureHandlingOptions</a> for more details.)</p></div><h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle, event)" tabindex="0"><img id="remarksToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="">
   By rolling back a transaction, all changes made to the model are discarded.
   RollBack may only be called for a transaction that has been started.
   (Use the <a href="fdf98941-eee4-d8af-e3f7-5b6c7ccc3c74.htm">GetStatus<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a> method to check the current state.)
   Be aware that rolling back may be delayed (as a result of failure handling.)
   Callers should always check the returned status to test whether a transaction
   was rolled back successfully. Only after rolling back is fully completed,
   the transaction may be started again.
</div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> CreateGrid(Autodesk.Revit.DB.Document document, XYZ p1, XYZ p2)
{
   <span class="highlight-comment">// All and any transaction should be enclosed in a 'using'</span>
   <span class="highlight-comment">// block or guarded within a try-catch-finally blocks</span>
   <span class="highlight-comment">// to guarantee that a transaction does not out-live its scope.</span>
   <span class="highlight-keyword">using</span> (Transaction transaction = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Creating Grid"</span>))
   {
      <span class="highlight-comment">// Must start a transaction to be able to modify a document</span>
      <span class="highlight-keyword">if</span> (TransactionStatus.Started == transaction.Start())
      {
         <span class="highlight-comment">// We create a line and use it as an argument to create a grid</span>
         Line gridLine = Line.CreateBound(p1, p2);

         <span class="highlight-keyword">if</span> ((<span class="highlight-keyword">null</span> != gridLine) &amp;&amp; (<span class="highlight-keyword">null</span> != document.Create.NewGrid(gridLine)))
         {
             <span class="highlight-keyword">if</span> (TransactionStatus.Committed == transaction.Commit())
             {
                <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
             }
         }

         <span class="highlight-comment">// For we were unable to create the grid, we will roll the transaction back</span>
         <span class="highlight-comment">// (although on this simplified case we know there weren't any other changes)</span>

         transaction.RollBack();
      }
   }
   <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> CreateGrid(document <span class="highlight-keyword">As</span> Autodesk.Revit.DB.Document, p1 <span class="highlight-keyword">As</span> XYZ, p2 <span class="highlight-keyword">As</span> XYZ) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>
    <span class="highlight-comment">' All and any transaction should be enclosed in a 'using'</span>
    <span class="highlight-comment">' block or guarded within a try-catch-finally blocks</span>
    <span class="highlight-comment">' to guarantee that a transaction does not out-live its scope.</span>
    <span class="highlight-keyword">Using</span> transaction <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Creating Grid"</span>)
        <span class="highlight-comment">' Must start a transaction to be able to modify a document</span>
        <span class="highlight-keyword">If</span> TransactionStatus.Started = transaction.Start() <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' We create a line and use it as an argument to create a grid</span>
            <span class="highlight-keyword">Dim</span> gridLine <span class="highlight-keyword">As</span> Line = Line.CreateBound(p1, p2)

            <span class="highlight-keyword">If</span> (gridLine <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>) <span class="highlight-keyword">AndAlso</span> (document.Create.NewGrid(gridLine) <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>) <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">If</span> TransactionStatus.Committed = transaction.Commit() <span class="highlight-keyword">Then</span>
                    <span class="highlight-keyword">Return</span> <span class="highlight-keyword">True</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' For we were unable to create the grid, we will roll the transaction back</span>
            <span class="highlight-comment">' (although on this simplified case we know there weren't any other changes)</span>


            transaction.RollBack()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
    <span class="highlight-keyword">Return</span> <span class="highlight-keyword">False</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(exceptionsToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exceptionsToggle, event)" tabindex="0"><img id="exceptionsToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Exceptions</span></h1><div id="exceptionsSection" class="section" name="collapseableSection" style=""><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th class="exceptionNameColumn">Exception</th><th class="exceptionConditionColumn">Condition</th></tr><tr><td><a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>InvalidOperationException</a></td><td>
   The current status of the transaction is not 'Started'.
   Transaction must be started before calling Commit or Rollback.
   -or-
   The transaction's document is currently in failure mode.
   No transaction operations are permitted until failure handling is finished.
</td></tr></table></div></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="308ebf8d-d96d-4643-cd1d-34fffcea53fd.htm">Transaction Class</a></div><div class="seeAlsoStyle"><a href="2b534cc2-e464-d424-d504-d2ae260bd937.htm">RollBack Overload</a></div><div class="seeAlsoStyle"><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>
