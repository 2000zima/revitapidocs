{% macro header() %}<title>BoundingBoxXYZ Class</title>{% assets "css_chm" %}<link rel="stylesheet" type="text/css" href="{{ ASSET_URL }}" />{% endassets %}{% assets "js_assets" %}<script src="{{ ASSET_URL }}"></script>{% endassets %}<meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="3c452286-57b1-40e2-2795-c90bff1fcec2" /><meta name="guid" content="3c452286-57b1-40e2-2795-c90bff1fcec2" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script>{% endmacro %}<div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2015 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">BoundingBoxXYZ Class</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="d7e07baa-ee85-a6cd-3545-ff78502b221a.htm">Members</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2015 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table></div><div id="mainSection"><div id="mainBody"><div class="summary">A three-dimensional rectangular box.</div><p /><b>Namespace:</b> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">BoundingBoxXYZ</span> : <a href="beb86ef5-39ad-3f0d-0cd9-0c929387a2bb.htm">APIObject</a></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">BoundingBoxXYZ</span> _
	<span class="keyword">Inherits</span> <a href="beb86ef5-39ad-3f0d-0cd9-0c929387a2bb.htm">APIObject</a></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">BoundingBoxXYZ</span> : <span class="keyword">public</span> <a href="beb86ef5-39ad-3f0d-0cd9-0c929387a2bb.htm">APIObject</a></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle, event)" tabindex="0"><img id="remarksToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="">The box is defined as follows. A Transform specifies the coordinate system
in which the box is defined. The minimum and maximum values for each coordinate in
that system are specified.

An alternative way to construct the box is: for each basis vector of the transform,
there are two planes that are orthogonal to the vector and have their origins given
by Transform.Origin + BasisVector * Bound.

The entire box and each face may be turned on or off.
</div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">Document doc = uiApplication.ActiveUIDocument.Document;
View3D view3D = <span class="highlight-keyword">null</span>;
FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(doc);
ICollection&lt;Element&gt; collection = collector.OfClass(<span class="highlight-keyword">typeof</span>(View3D)).ToElements();
<span class="highlight-keyword">foreach</span> (Element element <span class="highlight-keyword">in</span> collection)
 {
    view3D = element <span class="highlight-keyword">as</span> View3D;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != view3D)
    {
        <span class="highlight-keyword">string</span> messageInfo = <span class="highlight-literal">"BoundingBoxXYZ : "</span>;
        messageInfo += <span class="highlight-literal">"\nView name : "</span> + view3D.Name;
        BoundingBoxXYZ boundingBox = view3D.GetSectionBox();
        <span class="highlight-keyword">if</span> (!boundingBox.Enabled)
        {
            boundingBox.Enabled = <span class="highlight-keyword">true</span>;
        }
        <span class="highlight-keyword">if</span> (boundingBox.Enabled)
        {
            <span class="highlight-comment">// Get max boundingbox</span>
           XYZ max = boundingBox.Max;
            messageInfo += <span class="highlight-literal">"\nMax boundingbox : ("</span> + max.X + <span class="highlight-literal">","</span>
                + max.Y + <span class="highlight-literal">","</span> + max.Z + <span class="highlight-literal">")"</span>;
            <span class="highlight-comment">// Get min boundingbox</span>
            XYZ min = boundingBox.Min;
            messageInfo += <span class="highlight-literal">"\nMin boundingbox : ("</span> + min.X + <span class="highlight-literal">","</span>
                + min.Y + <span class="highlight-literal">","</span> + min.Z + <span class="highlight-literal">")"</span>;
            <span class="highlight-comment">// Get if max boundingbox enabled,</span>
            <span class="highlight-comment">// use 0 for X, 1 for Y and 2 for Z</span>
            <span class="highlight-keyword">bool</span> bMaxEnabledX = boundingBox.get_MaxEnabled(<span class="highlight-number">0</span>);
            <span class="highlight-comment">// Get if min boundingbox enabled,</span>
            <span class="highlight-comment">// use 0 for X, 1 for Y and 2 for Z</span>
            <span class="highlight-keyword">bool</span> bMinEnabledX = boundingBox.get_MinEnabled(<span class="highlight-number">0</span>);
            <span class="highlight-comment">// Get if bound boundingbox enabled</span>
            <span class="highlight-comment">// For bound, use 0 for Min and 1 for Max. </span>
            <span class="highlight-comment">// For dimension, use 0 for X, 1 for Y and 2 for Z</span>
            <span class="highlight-keyword">bool</span> bBoundEnabled = boundingBox.get_BoundEnabled(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
            <span class="highlight-comment">// Get minimum bound of boundingbox</span>
            XYZ minBound = boundingBox.get_Bounds(<span class="highlight-number">0</span>);
            <span class="highlight-comment">// Get maximum bound of boundingbox</span>
            XYZ maxBound = boundingBox.get_Bounds(<span class="highlight-number">1</span>);
        }
        TaskDialog.Show(<span class="highlight-literal">"Revit"</span>,messageInfo);
    }
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Dim</span> doc <span class="highlight-keyword">As</span> Document = uiApplication.ActiveUIDocument.Document
<span class="highlight-keyword">Dim</span> view3D <span class="highlight-keyword">As</span> View3D = <span class="highlight-keyword">Nothing</span>
<span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(doc)
<span class="highlight-keyword">Dim</span> collection <span class="highlight-keyword">As</span> ICollection(<span class="highlight-keyword">Of</span> Element) = collector.OfClass(<span class="highlight-keyword">GetType</span>(View3D)).ToElements()
<span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> element <span class="highlight-keyword">As</span> Element <span class="highlight-keyword">In</span> collection
    view3D = <span class="highlight-keyword">TryCast</span>(element, View3D)
    <span class="highlight-keyword">If</span> view3D <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Dim</span> messageInfo <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"BoundingBoxXYZ : "</span>
        messageInfo += vbLf &amp; <span class="highlight-literal">"View name : "</span> + view3D.Name
        <span class="highlight-keyword">Dim</span> boundingBox <span class="highlight-keyword">As</span> BoundingBoxXYZ = view3D.GetSectionBox()
        <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> boundingBox.Enabled <span class="highlight-keyword">Then</span>
            boundingBox.Enabled = <span class="highlight-keyword">True</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">If</span> boundingBox.Enabled <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' Get max boundingbox</span>
            <span class="highlight-keyword">Dim</span> max <span class="highlight-keyword">As</span> XYZ = boundingBox.Max
            messageInfo += ((vbLf &amp; <span class="highlight-literal">"Max boundingbox : ("</span> + max.X &amp; <span class="highlight-literal">","</span>) + max.Y &amp; <span class="highlight-literal">","</span>) + max.Z &amp; <span class="highlight-literal">")"</span>
            <span class="highlight-comment">' Get min boundingbox</span>
            <span class="highlight-keyword">Dim</span> min <span class="highlight-keyword">As</span> XYZ = boundingBox.Min
            messageInfo += ((vbLf &amp; <span class="highlight-literal">"Min boundingbox : ("</span> + min.X &amp; <span class="highlight-literal">","</span>) + min.Y &amp; <span class="highlight-literal">","</span>) + min.Z &amp; <span class="highlight-literal">")"</span>
            <span class="highlight-comment">' Get if max boundingbox enabled,</span>
            <span class="highlight-comment">' use 0 for X, 1 for Y and 2 for Z</span>
            <span class="highlight-keyword">Dim</span> bMaxEnabledX <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = boundingBox.MaxEnabled(<span class="highlight-number">0</span>)
            <span class="highlight-comment">' Get if min boundingbox enabled,</span>
            <span class="highlight-comment">' use 0 for X, 1 for Y and 2 for Z</span>
            <span class="highlight-keyword">Dim</span> bMinEnabledX <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = boundingBox.MinEnabled(<span class="highlight-number">0</span>)
            <span class="highlight-comment">' Get if bound boundingbox enabled</span>
            <span class="highlight-comment">' For bound, use 0 for Min and 1 for Max. </span>
            <span class="highlight-comment">' For dimension, use 0 for X, 1 for Y and 2 for Z</span>
            <span class="highlight-keyword">Dim</span> bBoundEnabled <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = boundingBox.BoundEnabled(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
            <span class="highlight-comment">' Get minimum bound of boundingbox</span>
            <span class="highlight-keyword">Dim</span> minBound <span class="highlight-keyword">As</span> XYZ = boundingBox.Bounds(<span class="highlight-number">0</span>)
            <span class="highlight-comment">' Get maximum bound of boundingbox</span>
            <span class="highlight-keyword">Dim</span> maxBound <span class="highlight-keyword">As</span> XYZ = boundingBox.Bounds(<span class="highlight-number">1</span>)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, messageInfo)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">Next</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Object</a><br />  <a href="beb86ef5-39ad-3f0d-0cd9-0c929387a2bb.htm">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>APIObject</a><br />    <span class="selflink">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>BoundingBoxXYZ</span><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="d7e07baa-ee85-a6cd-3545-ff78502b221a.htm">BoundingBoxXYZ Members</a></div><div class="seeAlsoStyle"><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>
