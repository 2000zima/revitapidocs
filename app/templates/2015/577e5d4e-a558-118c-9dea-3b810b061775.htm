{% macro header() %}<title>Level Class</title>{% assets "css_chm" %}<link rel="stylesheet" type="text/css" href="{{ ASSET_URL }}" />{% endassets %}{% assets "js_assets" %}<script src="{{ ASSET_URL }}"></script>{% endassets %}<meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="577e5d4e-a558-118c-9dea-3b810b061775" /><meta name="guid" content="577e5d4e-a558-118c-9dea-3b810b061775" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script>{% endmacro %}<div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2015 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Level Class</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="42715128-e45b-1c56-25fa-84a0855a3012.htm">Members</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2015 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table></div><div id="mainSection"><div id="mainBody"><div class="summary">Represents a Level line within Autodesk Revit.</div><p /><b>Namespace:</b> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">Level</span> : <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">Level</span> _
	<span class="keyword">Inherits</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">Level</span> : <span class="keyword">public</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle, event)" tabindex="0"><img id="remarksToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="">The Name property can be used to retrieve
the user visible name of the level that appears in the level bubble.</div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> GetLevelInformation(Autodesk.Revit.DB.Element element)
{
    <span class="highlight-comment">// Get the level object to which the element is assigned.</span>
    <span class="highlight-keyword">if</span> (element.LevelId.Equals(ElementId.InvalidElementId))
    {
        TaskDialog.Show(<span class="highlight-literal">"Revit"</span>,<span class="highlight-literal">"The element isn't based on a level."</span>);
    }
    <span class="highlight-keyword">else</span>
    {
        Level level = element.Document.GetElement(element.LevelId) <span class="highlight-keyword">as</span> Level;

        <span class="highlight-comment">// Format the prompt information(Name and elevation)</span>
        String prompt = <span class="highlight-literal">"The element is based on a level."</span>;
        prompt += <span class="highlight-literal">"\nThe level name is:  "</span> + level.Name;
        prompt += <span class="highlight-literal">"\nThe level elevation is:  "</span> + level.Elevation;

        <span class="highlight-comment">// Show the information to the user.</span>
        TaskDialog.Show(<span class="highlight-literal">"Revit"</span>,prompt);
    }
}</pre></div></span><span id="cbc_2" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> Getinfo_Level(Document document)
{
    StringBuilder levelInformation = <span class="highlight-keyword">new</span> StringBuilder();
    <span class="highlight-keyword">int</span> levelNumber = <span class="highlight-number">0</span>;
    FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
    ICollection&lt;Element&gt; collection = collector.OfClass(<span class="highlight-keyword">typeof</span>(Level)).ToElements();
    <span class="highlight-keyword">foreach</span> (Element e <span class="highlight-keyword">in</span> collection)
    {
        Level level = e <span class="highlight-keyword">as</span> Level;

        <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != level)
        {
            <span class="highlight-comment">// keep track of number of levels</span>
            levelNumber++;

            <span class="highlight-comment">//get the name of the level</span>
            levelInformation.Append(<span class="highlight-literal">"\nLevel Name: "</span> + level.Name);

            <span class="highlight-comment">//get the elevation of the level</span>
            levelInformation.Append(<span class="highlight-literal">"\n\tElevation: "</span> + level.Elevation);

            <span class="highlight-comment">// get the project elevation of the level</span>
            levelInformation.Append(<span class="highlight-literal">"\n\tProject Elevation: "</span> + level.ProjectElevation);
        }
    }

    <span class="highlight-comment">//number of total levels in current document</span>
    levelInformation.Append(<span class="highlight-literal">"\n\n There are "</span> + levelNumber + <span class="highlight-literal">" levels in the document!"</span>);

    <span class="highlight-comment">//show the level information in the messagebox</span>
    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>,levelInformation.ToString());
}</pre></div></span><span id="cbc_3" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> GetLevelInformation(element <span class="highlight-keyword">As</span> Autodesk.Revit.DB.Element)
    <span class="highlight-comment">' Get the level object to which the element is assigned.</span>
    <span class="highlight-keyword">If</span> element.LevelId.Equals(ElementId.InvalidElementId) <span class="highlight-keyword">Then</span>
        TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, <span class="highlight-literal">"The element isn't based on a level."</span>)
    <span class="highlight-keyword">Else</span>
        <span class="highlight-keyword">Dim</span> level <span class="highlight-keyword">As</span> Level = <span class="highlight-keyword">TryCast</span>(element.Document.GetElement(element.LevelId), Level)

        <span class="highlight-comment">' Format the prompt information(Name and elevation)</span>
        <span class="highlight-keyword">Dim</span> prompt <span class="highlight-keyword">As</span> [<span class="highlight-keyword">String</span>] = <span class="highlight-literal">"The element is based on a level."</span>
        prompt += vbLf &amp; <span class="highlight-literal">"The level name is:  "</span> + level.Name
        prompt += vbLf &amp; <span class="highlight-literal">"The level elevation is:  "</span> + level.Elevation

        <span class="highlight-comment">' Show the information to the user.</span>
        TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, prompt)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></span><span id="cbc_4" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> Getinfo_Level(document <span class="highlight-keyword">As</span> Document)
    <span class="highlight-keyword">Dim</span> levelInformation <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> StringBuilder()
    <span class="highlight-keyword">Dim</span> levelNumber <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
    <span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(document)
    <span class="highlight-keyword">Dim</span> collection <span class="highlight-keyword">As</span> ICollection(<span class="highlight-keyword">Of</span> Element) = collector.OfClass(<span class="highlight-keyword">GetType</span>(Level)).ToElements()
    <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> e <span class="highlight-keyword">As</span> Element <span class="highlight-keyword">In</span> collection
        <span class="highlight-keyword">Dim</span> level <span class="highlight-keyword">As</span> Level = <span class="highlight-keyword">TryCast</span>(e, Level)

        <span class="highlight-keyword">If</span> level <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' keep track of number of levels</span>
            levelNumber += <span class="highlight-number">1</span>

            <span class="highlight-comment">'get the name of the level</span>
            levelInformation.Append(vbLf &amp; <span class="highlight-literal">"Level Name: "</span> + level.Name)

            <span class="highlight-comment">'get the elevation of the level</span>
            levelInformation.Append(vbLf &amp; vbTab &amp; <span class="highlight-literal">"Elevation: "</span> + level.Elevation)

            <span class="highlight-comment">' get the project elevation of the level</span>
            levelInformation.Append(vbLf &amp; vbTab &amp; <span class="highlight-literal">"Project Elevation: "</span> + level.ProjectElevation)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Next</span>

    <span class="highlight-comment">'number of total levels in current document</span>
    levelInformation.Append(vbLf &amp; vbLf &amp; <span class="highlight-literal">" There are "</span> &amp; levelNumber &amp; <span class="highlight-literal">" levels in the document!"</span>)

    <span class="highlight-comment">'show the level information in the messagebox</span>
    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, levelInformation.ToString())
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Object</a><br />  <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Element</a><br />    <span class="selflink">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Level</span><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="42715128-e45b-1c56-25fa-84a0855a3012.htm">Level Members</a></div><div class="seeAlsoStyle"><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>
