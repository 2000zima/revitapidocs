{% macro header() %}<title>NumberingSchema Class</title>{% assets "css_chm" %}<link rel="stylesheet" type="text/css" href="{{ ASSET_URL }}" />{% endassets %}{% assets "js_assets" %}<script src="{{ ASSET_URL }}"></script>{% endassets %}<meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="8f2b22da-5963-301f-44d8-10c68828c436" /><meta name="guid" content="8f2b22da-5963-301f-44d8-10c68828c436" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script>{% endmacro %}<div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2015 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">NumberingSchema Class</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="1042810e-72a4-1ab1-22f3-925f2f05e20a.htm">Members</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2015 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table></div><div id="mainSection"><div id="mainBody"><div class="summary">
   A class to support assigning numbers to elements of a particular kind for the purpose of tagging and scheduling them.
</div><p /><b>Namespace:</b> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)<br /><b>Since:</b> 
   2015
<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">NumberingSchema</span> : <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">NumberingSchema</span> _
	<span class="keyword">Inherits</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">NumberingSchema</span> : <span class="keyword">public</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle, event)" tabindex="0"><img id="remarksToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style=""><p>Each NumberingSchema controls numbering of elements of one particular kind, typically of the same category such
   as Rebar or Fabric Reinforcement. Instances of NumberingSchema are also elements and there is always only one of
   each type in every Revit document. Available types of all built-in numbering schemas are enumerated in
   <a href="f35deaf0-5c35-a492-5d8e-6e1b00f08ff9.htm">NumberingSchemaTypes</a> class. At present, schema elements cannot be manually
   added, deleted, or copied. Attempts to do so will result in a failure warning and/or exceptions thrown.</p><p>Elements (e.g. Rebar) belonging to a particular schema (e.g. NumberingSchemaTypes.StructuralNumberingSchemas.Rebar)
   are organized and numbered in sequences. A sequence is a collection of elements that share the same numbering partition
   as defined by their respective values of the Partition parameter (NUMBER_PARTITION_PARAM). For a numbering sequence
   to exist it must contain at least one element. In other words, a sequence is established once there is at least
   one element of which the partition parameter has a value that differs from other elements (in the same numbering schema).
   If the last element is removed (deleted or moved to a different sequence) the then empty sequence ceases to exist.</p><p>Elements get assigned to sequences either upon their creation (based on the then current numbering partition value),
   or by explicitly modifying the Partition parameter of an element, or by using the <b>AssignElementsToSequence</b> method.
   It is highly recommended using that method over explicitly changing the Partition parameter, because the methods applies changes
   to sequences and element numbers immediately, while changed parameters get into effect only after the current transaction is closed.</p><p>In addition to directly or indirectly changing the Partition parameter of elements, numbering sequences can be
   reorganized by using methods of the NumberingSchema class. The <a href="9ae38f60-e76f-5bd7-1d71-bd57cf06f641.htm">MoveSequence</a> method moves
   all elements of an existing sequence to a new sequence that does not exist yet in the schema, thus effectively renaming
   the Partition parameter on all the affected elements. The <a href="0a89ca78-ca34-93fa-4fa7-71883a535497.htm">AppendSequence</a> method removes
   all elements from one sequence and appends them to elements of another existing sequence while applying the matching policy.
   The method <b>MergeSequences</b> takes elements of all specified sequences and moves them all into a newly created sequence.
   All the merged elements will be renumbered and matched as needed based on the matching algorithm.</p><p>Elements in different sequences are numbered independently, meaning that there may be elements with the same
   number in two sequences even though the elements are different. Likewise, there may be perfectly identical
   elements in two or more sequences bearing different numbers. However, within each one numbering sequence any
   two identical elements will always have the same number, while different elements will never have the same
   number within a numbering sequence. Revit refers to this rule as the matching policy.</p><p>Enumerable elements are always numbered automatically upon their creation. Each new element will get an
   incrementally higher number. However, thanks to the matching policy, new elements that match existing elements
   within the same sequence will get the same number assigned. Elements will keep their assigned numbers as long
   as it is possible. This means, for example, that if some previously created elements (e.g. Rebar) get deleted,
   all remaining elements (within the same numbering sequence) will keep their numbers, which may result in gaps in
   the respective numbering sequence. Gaps can be removed by invoking <a href="a97a1aff-4afe-7aa7-098a-f71229efdccd.htm">RemoveGaps</a> for sequences
   in which gaps are not desired.</p><p>Numbers are stored as values of a numbering parameter on each numbered element. The Id of the parameter is obtained
   by querying the <a href="94659f29-c7f2-9643-f443-9451a3177cc2.htm">NumberingParameterId</a> property. The value of the number can be obtained by querying the
   parameter for the respective numbered element. The value is read-only and thus cannot be set; it is always computed based
   on relations of elements across numbering partitions and the matching policy within the numbering sequence of each element.</p><p>Even though numbers are always assigned automatically to all elements of a schema, the method
   <a href="dc93cd7f-dc11-45da-3ed6-c459d1c55c97.htm">ChangeNumber</a> gives the programmer a way to explicitly overwrite a specific number as long
   as the new number is unique in the numbering sequence. The caller specifies a number to be changed and a new value that is
   to be applied, providing the value does not exist yet in the same numbering sequence. Although this operation may seem rather
   limited, it provides the programmer with freedom to change practically any number even if it may be achieved in multiple steps.</p></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// This function consolidates the numbers on Rebar elements by removing</span>
<span class="highlight-comment">/// any remaining gaps in numbering sequences and setting the start number</span>
<span class="highlight-comment">/// of each sequence so numbers in sequences do not overlap.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="document"&gt;The document in which Rebar numbers are to be consolidated&lt;/param&gt;</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> ConsolidateRebarNumbers(Document document)
{
    <span class="highlight-comment">// Obtain a schema object for a particular kind of elements </span>
    NumberingSchema schema = NumberingSchema.GetNumberingSchema(document,NumberingSchemaTypes.StructuralNumberingSchemas.Rebar);

    <span class="highlight-comment">// Collect the names of partitions of all the numbering sequences currently contained in the schema</span>
    IList&lt;<span class="highlight-keyword">string</span>&gt; sequences = schema.GetNumberingSequences();

    <span class="highlight-keyword">using</span> (Transaction transaction = <span class="highlight-keyword">new</span> Transaction(document))
    {
        <span class="highlight-comment">// Changes to numbers must be made inside a transaction</span>
        transaction.Start(<span class="highlight-literal">"Consolidate Rebar Numbers"</span>);

        <span class="highlight-comment">// First we make sure numbers in all sequences are consecutive</span>
        <span class="highlight-comment">// by removing possible gaps in numbers. Note: RemoveGaps does</span>
        <span class="highlight-comment">// nothing for a sequence where there are no gaps present.</span>

        <span class="highlight-comment">// We also want to find what the maximum range of numbers is</span>
        <span class="highlight-comment">// of all the sequences (the one the widest span of used numbers)</span>
        <span class="highlight-keyword">int</span> maxRange = <span class="highlight-number">0</span>;

        <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">string</span> name <span class="highlight-keyword">in</span> sequences)
        {
            schema.RemoveGaps(name);

            <span class="highlight-comment">// Here we use First() from the Linq extension.</span>
            <span class="highlight-comment">// There is always at least one range in every sequence,</span>
            <span class="highlight-comment">// and after gaps are closed there is exactly one range.</span>
            IntegerRange range = schema.GetNumbers(name).First();  
            <span class="highlight-keyword">int</span> rangeSpan = <span class="highlight-number">1</span> + (range.High - range.Low);
            <span class="highlight-keyword">if</span> (rangeSpan &gt; maxRange)
            {
                maxRange = rangeSpan;
            }
        }

        <span class="highlight-comment">// Next we give sequences different start numbers</span>
        <span class="highlight-comment">// starting with 100 and then stepping by at least</span>
        <span class="highlight-comment">// the maximum range we found in the previous step</span>
        <span class="highlight-keyword">int</span> startNumber = <span class="highlight-number">100</span>;

        <span class="highlight-comment">// We round the range up to the closest 100</span>
        <span class="highlight-keyword">int</span> step = <span class="highlight-number">100</span> * (<span class="highlight-keyword">int</span>)((maxRange + <span class="highlight-number">99</span>) / <span class="highlight-number">100.0</span>);

        <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">string</span> name <span class="highlight-keyword">in</span> sequences)
        {
            schema.ShiftNumbers(name, startNumber);
            startNumber += step;
        }

        transaction.Commit();
    }
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-comment">''' &lt;summary&gt;</span>
<span class="highlight-comment">''' This function consolidates the numbers on Rebar elements by removing</span>
<span class="highlight-comment">''' any remaining gaps in numbering sequences and setting the start number</span>
<span class="highlight-comment">''' of each sequence so numbers in sequences do not overlap.</span>
<span class="highlight-comment">''' &lt;/summary&gt;</span>
<span class="highlight-comment">''' &lt;param name="document"&gt;The document in which Rebar numbers are to be consolidated&lt;/param&gt;</span>
<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> ConsolidateRebarNumbers(document <span class="highlight-keyword">As</span> Document)
    <span class="highlight-comment">' Obtain a schema object for a particular kind of elements </span>
    <span class="highlight-keyword">Dim</span> schema <span class="highlight-keyword">As</span> NumberingSchema = NumberingSchema.GetNumberingSchema(document, NumberingSchemaTypes.StructuralNumberingSchemas.Rebar)

    <span class="highlight-comment">' Collect the names of partitions of all the numbering sequences currently contained in the schema</span>
    <span class="highlight-keyword">Dim</span> sequences <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> <span class="highlight-keyword">String</span>) = schema.GetNumberingSequences()

    <span class="highlight-keyword">Using</span> transaction <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document)
        <span class="highlight-comment">' Changes to numbers must be made inside a transaction</span>
        transaction.Start(<span class="highlight-literal">"Consolidate Rebar Numbers"</span>)

        <span class="highlight-comment">' First we make sure numbers in all sequences are consecutive</span>
        <span class="highlight-comment">' by removing possible gaps in numbers. Note: RemoveGaps does</span>
        <span class="highlight-comment">' nothing for a sequence where there are no gaps present.</span>


        <span class="highlight-comment">' We also want to find what the maximum range of numbers is</span>
        <span class="highlight-comment">' of all the sequences (the one the widest span of used numbers)</span>
        <span class="highlight-keyword">Dim</span> maxRange <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>

        <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> name <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> <span class="highlight-keyword">In</span> sequences
            schema.RemoveGaps(name)

            <span class="highlight-comment">' Here we use First() from the Linq extension.</span>
            <span class="highlight-comment">' There is always at least one range in every sequence,</span>
            <span class="highlight-comment">' and after gaps are closed there is exactly one range.</span>
            <span class="highlight-keyword">Dim</span> range <span class="highlight-keyword">As</span> IntegerRange = schema.GetNumbers(name).First()
            <span class="highlight-keyword">Dim</span> rangeSpan <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">1</span> + (range.High - range.Low)
            <span class="highlight-keyword">If</span> rangeSpan &gt; maxRange <span class="highlight-keyword">Then</span>
                maxRange = rangeSpan
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">Next</span>

        <span class="highlight-comment">' Next we give sequences different start numbers</span>
        <span class="highlight-comment">' starting with 100 and then stepping by at least</span>
        <span class="highlight-comment">' the maximum range we found in the previous step</span>
        <span class="highlight-keyword">Dim</span> startNumber <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">100</span>

        <span class="highlight-comment">' We round the range up to the closest 100</span>
        <span class="highlight-keyword">Dim</span> [<span class="highlight-keyword">step</span>] <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">100</span> * <span class="highlight-keyword">CInt</span>(Math.Truncate((maxRange + <span class="highlight-number">99</span>) / <span class="highlight-number">100.0</span>))

        <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> name <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> <span class="highlight-keyword">In</span> sequences
            schema.ShiftNumbers(name, startNumber)
            startNumber += [<span class="highlight-keyword">step</span>]
        <span class="highlight-keyword">Next</span>

        transaction.Commit()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Object</a><br />  <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Element</a><br />    <span class="selflink">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>NumberingSchema</span><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="1042810e-72a4-1ab1-22f3-925f2f05e20a.htm">NumberingSchema Members</a></div><div class="seeAlsoStyle"><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>