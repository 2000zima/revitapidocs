{% macro header() %}<title>ExportLayerInfo Class</title>{% assets "css_chm" %}<link rel="stylesheet" type="text/css" href="{{ ASSET_URL }}" />{% endassets %}{% assets "js_chm" %}<script src="{{ ASSET_URL }}"></script>{% endassets %}<meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="88a99694-968a-99f7-870a-f46737bd5927" /><meta name="guid" content="88a99694-968a-99f7-870a-f46737bd5927" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script>{% endmacro %}<div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2015 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">ExportLayerInfo Class</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="38ec2833-de1c-d8ad-8388-307607bb852a.htm">Members</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2015 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table></div><div id="mainSection"><div id="mainBody"><div class="summary">
   A value used to represent the info stored in the <a href="e68ce1c7-a922-d1b7-53bb-f832a4bad273.htm">ExportLayerTable</a>.
</div><p /><b>Namespace:</b> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)<br /><b>Since:</b> 
   2014
<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">ExportLayerInfo</span> : <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">ExportLayerInfo</span> _
	<span class="keyword">Implements</span> <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">ExportLayerInfo</span> : <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> ExportDWGModifyLayerTable(Document document, View view)
{
    <span class="highlight-keyword">bool</span> exported = <span class="highlight-keyword">false</span>;
    IList&lt;<span class="highlight-keyword">string</span>&gt; setupNames = BaseExportOptions.GetPredefinedSetupNames(document);
    <span class="highlight-keyword">if</span> (setupNames.Count &gt; <span class="highlight-number">0</span>)
    {
        <span class="highlight-comment">// Get the export options for the first predefined setup</span>
        DWGExportOptions dwgOptions = DWGExportOptions.GetPredefinedOptions(document, setupNames[<span class="highlight-number">0</span>]);

        <span class="highlight-comment">// Get the export layer table</span>
        ExportLayerTable layerTable = dwgOptions.GetExportLayerTable();

        <span class="highlight-comment">// Find the first mapping for the Ceilings category</span>
        <span class="highlight-keyword">string</span> category = <span class="highlight-literal">"Ceilings"</span>;
        ExportLayerKey targetKey = layerTable.GetKeys().First&lt;ExportLayerKey&gt;(layerKey =&gt; layerKey.CategoryName == category);
        ExportLayerInfo targetInfo = layerTable[targetKey];

        <span class="highlight-comment">// change the color name and cut color number for this mapping</span>
        targetInfo.ColorName = <span class="highlight-literal">"31"</span>;
        targetInfo.CutColorNumber = <span class="highlight-number">31</span>;

        <span class="highlight-comment">// Set the change back to the map</span>
        layerTable[targetKey] = targetInfo;

        <span class="highlight-comment">// Set the modified table back to the options</span>
        dwgOptions.SetExportLayerTable(layerTable);

        ICollection&lt;ElementId&gt; views = <span class="highlight-keyword">new</span> List&lt;ElementId&gt;();
        views.Add(view.Id);

        exported = document.Export(Path.GetDirectoryName(document.PathName),
            Path.GetFileNameWithoutExtension(document.PathName), views, dwgOptions);
    }

    <span class="highlight-keyword">return</span> exported;
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> ExportDWGModifyLayerTable(document <span class="highlight-keyword">As</span> Document, view <span class="highlight-keyword">As</span> View) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>
    <span class="highlight-keyword">Dim</span> exported <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>
    <span class="highlight-keyword">Dim</span> setupNames <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> <span class="highlight-keyword">String</span>) = BaseExportOptions.GetPredefinedSetupNames(document)
    <span class="highlight-keyword">If</span> setupNames.Count &gt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' Get the export options for the first predefined setup</span>
        <span class="highlight-keyword">Dim</span> dwgOptions <span class="highlight-keyword">As</span> DWGExportOptions = DWGExportOptions.GetPredefinedOptions(document, setupNames(<span class="highlight-number">0</span>))

        <span class="highlight-comment">' Get the export layer table</span>
        <span class="highlight-keyword">Dim</span> layerTable <span class="highlight-keyword">As</span> ExportLayerTable = dwgOptions.GetExportLayerTable()

        <span class="highlight-comment">' Find the first mapping for the Ceilings category</span>
        <span class="highlight-keyword">Dim</span> category <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"Ceilings"</span>
        <span class="highlight-keyword">Dim</span> targetKey <span class="highlight-keyword">As</span> ExportLayerKey = layerTable.GetKeys().First(<span class="highlight-keyword">Function</span>(layerKey) layerKey.CategoryName = category)
        <span class="highlight-keyword">Dim</span> targetInfo <span class="highlight-keyword">As</span> ExportLayerInfo = layerTable(targetKey)

        <span class="highlight-comment">' change the color name and cut color number for this mapping</span>
        targetInfo.ColorName = <span class="highlight-literal">"31"</span>
        targetInfo.CutColorNumber = <span class="highlight-number">31</span>

        <span class="highlight-comment">' Set the change back to the map</span>
        layerTable(targetKey) = targetInfo

        <span class="highlight-comment">' Set the modified table back to the options</span>
        dwgOptions.SetExportLayerTable(layerTable)

        <span class="highlight-keyword">Dim</span> views <span class="highlight-keyword">As</span> ICollection(<span class="highlight-keyword">Of</span> ElementId) = <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> ElementId)()
        views.Add(view.Id)

        exported = document.Export(Path.GetDirectoryName(document.PathName), Path.GetFileNameWithoutExtension(document.PathName), views, dwgOptions)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Return</span> exported
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Object</a><br />  <span class="selflink">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ExportLayerInfo</span><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="38ec2833-de1c-d8ad-8388-307607bb852a.htm">ExportLayerInfo Members</a></div><div class="seeAlsoStyle"><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>
