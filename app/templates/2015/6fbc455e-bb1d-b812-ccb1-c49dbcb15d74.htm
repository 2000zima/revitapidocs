{% macro header() %}<title>FieldDomainPointsByParameter Class</title>{% assets "css_chm" %}<link rel="stylesheet" type="text/css" href="{{ ASSET_URL }}" />{% endassets %}{% assets "js_chm" %}<script src="{{ ASSET_URL }}"></script>{% endassets %}<meta name="container" content="Autodesk.Revit.DB.Analysis" /><meta name="file" content="6fbc455e-bb1d-b812-ccb1-c49dbcb15d74" /><meta name="guid" content="6fbc455e-bb1d-b812-ccb1-c49dbcb15d74" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script>{% endmacro %}<div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2015 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">FieldDomainPointsByParameter Class</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="cd5dedd9-3347-3175-365f-2f325eddbd92.htm">Members</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2015 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table></div><div id="mainSection"><div id="mainBody"><div class="summary">
   Represents a set of one-dimensional point coordinates (defined usually on curve)
</div><p /><b>Namespace:</b> <a href="958e2e12-587d-f188-5d7b-f13d7dbfdf48.htm">Autodesk.Revit.DB.Analysis</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)<br /><b>Since:</b> 
   2011
<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">FieldDomainPointsByParameter</span> : <a href="5b145517-1904-4b5f-2f66-0d84b259335b.htm">FieldDomainPoints</a></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">FieldDomainPointsByParameter</span> _
	<span class="keyword">Inherits</span> <a href="5b145517-1904-4b5f-2f66-0d84b259335b.htm">FieldDomainPoints</a></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">FieldDomainPointsByParameter</span> : <span class="keyword">public</span> <a href="5b145517-1904-4b5f-2f66-0d84b259335b.htm">FieldDomainPoints</a></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">Document doc = commandData.Application.ActiveUIDocument.Document;
UIDocument uiDoc = commandData.Application.ActiveUIDocument;

SpatialFieldManager sfm = SpatialFieldManager.GetSpatialFieldManager(doc.ActiveView);
<span class="highlight-keyword">if</span> (sfm == <span class="highlight-keyword">null</span>)
{
    sfm = SpatialFieldManager.CreateSpatialFieldManager(doc.ActiveView, <span class="highlight-number">1</span>);
}

ReferenceArray ra = <span class="highlight-keyword">new</span> ReferenceArray();
Reference curveRef = uiDoc.Selection.PickObject(ObjectType.Element, <span class="highlight-literal">"Select a curve"</span>);
ra.Append(curveRef);

<span class="highlight-keyword">foreach</span> (Reference reference <span class="highlight-keyword">in</span> ra)
{
    ModelCurve modelCurve = doc.GetElement(reference) <span class="highlight-keyword">as</span> ModelCurve;
    Curve curve = modelCurve.GeometryCurve;
    <span class="highlight-keyword">if</span> (curve == <span class="highlight-keyword">null</span>)
    {
        TaskDialog.Show(<span class="highlight-literal">"Error"</span>, <span class="highlight-literal">"Must select a curve"</span>);
        <span class="highlight-keyword">return</span> Result.Cancelled;
    }
    <span class="highlight-keyword">else</span>
    {
        <span class="highlight-keyword">int</span> idx = sfm.AddSpatialFieldPrimitive(curve.Reference);

        IList&lt;<span class="highlight-keyword">double</span>&gt; pts = <span class="highlight-keyword">new</span> List&lt;<span class="highlight-keyword">double</span>&gt;();

        <span class="highlight-keyword">double</span> u = curve.GetEndParameter(<span class="highlight-number">0</span>);
        <span class="highlight-keyword">double</span> range = curve.GetEndParameter(<span class="highlight-number">1</span>) - u;
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> ii = <span class="highlight-number">0</span>; ii &lt; <span class="highlight-number">10</span>; ii++)
        {
            pts.Add(u);
            u = u + range / <span class="highlight-number">10</span>;
        }

        FieldDomainPointsByParameter pnts = <span class="highlight-keyword">new</span> FieldDomainPointsByParameter(pts);

        List&lt;<span class="highlight-keyword">double</span>&gt; doubleList = <span class="highlight-keyword">new</span> List&lt;<span class="highlight-keyword">double</span>&gt;();
        IList&lt;ValueAtPoint&gt; valList = <span class="highlight-keyword">new</span> List&lt;ValueAtPoint&gt;();
        <span class="highlight-keyword">double</span> x = <span class="highlight-number">0</span>;
        <span class="highlight-keyword">while</span> (valList.Count &lt; pts.Count)
        <span class="highlight-comment">//for (double x = 0; x &lt; 1; x = x + 0.1)</span>
        {
            doubleList.Clear();
            doubleList.Add(x * <span class="highlight-number">10</span>);
            valList.Add(<span class="highlight-keyword">new</span> ValueAtPoint(doubleList));
            x = x + <span class="highlight-number">0.1</span>;
        }
        FieldValues vals = <span class="highlight-keyword">new</span> FieldValues(valList);

        AnalysisResultSchema resultSchema = <span class="highlight-keyword">new</span> AnalysisResultSchema(<span class="highlight-literal">"Schema Name"</span>, <span class="highlight-literal">"Description"</span>);
        <span class="highlight-keyword">int</span> schemaIndex = sfm.RegisterResult(resultSchema);
        sfm.UpdateSpatialFieldPrimitive(idx, pnts, vals, schemaIndex);
    }
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Dim</span> doc <span class="highlight-keyword">As</span> Document = commandData.Application.ActiveUIDocument.Document
<span class="highlight-keyword">Dim</span> uiDoc <span class="highlight-keyword">As</span> UIDocument = commandData.Application.ActiveUIDocument

<span class="highlight-keyword">Dim</span> sfm <span class="highlight-keyword">As</span> SpatialFieldManager = SpatialFieldManager.GetSpatialFieldManager(doc.ActiveView)
<span class="highlight-keyword">If</span> sfm <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
    sfm = SpatialFieldManager.CreateSpatialFieldManager(doc.ActiveView, <span class="highlight-number">1</span>)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

<span class="highlight-keyword">Dim</span> ra <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> ReferenceArray()
<span class="highlight-keyword">Dim</span> curveRef <span class="highlight-keyword">As</span> Reference = uiDoc.Selection.PickObject(ObjectType.Element, <span class="highlight-literal">"Select a curve"</span>)
ra.Append(curveRef)

<span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> reference <span class="highlight-keyword">As</span> Reference <span class="highlight-keyword">In</span> ra
    <span class="highlight-keyword">Dim</span> modelCurve <span class="highlight-keyword">As</span> ModelCurve = <span class="highlight-keyword">TryCast</span>(doc.GetElement(reference), ModelCurve)
    <span class="highlight-keyword">Dim</span> curve <span class="highlight-keyword">As</span> Curve = modelCurve.GeometryCurve
    <span class="highlight-keyword">If</span> curve <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        TaskDialog.Show(<span class="highlight-literal">"Error"</span>, <span class="highlight-literal">"Must select a curve"</span>)
        <span class="highlight-keyword">Return</span> Result.Cancelled
    <span class="highlight-keyword">Else</span>
        <span class="highlight-keyword">Dim</span> idx <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = sfm.AddSpatialFieldPrimitive(curve.Reference)

        <span class="highlight-keyword">Dim</span> pts <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> <span class="highlight-keyword">Double</span>) = <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> <span class="highlight-keyword">Double</span>)()

        <span class="highlight-keyword">Dim</span> u <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = curve.GetEndParameter(<span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> range <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = curve.GetEndParameter(<span class="highlight-number">1</span>) - u
        <span class="highlight-keyword">For</span> ii <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> <span class="highlight-number">9</span>
            pts.Add(u)
            u = u + range / <span class="highlight-number">10</span>
        <span class="highlight-keyword">Next</span>

        <span class="highlight-keyword">Dim</span> pnts <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FieldDomainPointsByParameter(pts)

        <span class="highlight-keyword">Dim</span> doubleList <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> <span class="highlight-keyword">Double</span>)()
        <span class="highlight-keyword">Dim</span> valList <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> ValueAtPoint) = <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> ValueAtPoint)()
        <span class="highlight-keyword">Dim</span> x <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = <span class="highlight-number">0</span>
        <span class="highlight-keyword">While</span> valList.Count &lt; pts.Count
            <span class="highlight-comment">'for (double x = 0; x &lt; 1; x = x + 0.1)</span>
            doubleList.Clear()
            doubleList.Add(x * <span class="highlight-number">10</span>)
            valList.Add(<span class="highlight-keyword">New</span> ValueAtPoint(doubleList))
            x = x + <span class="highlight-number">0.1</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>
        <span class="highlight-keyword">Dim</span> vals <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FieldValues(valList)

        <span class="highlight-keyword">Dim</span> resultSchema <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> AnalysisResultSchema(<span class="highlight-literal">"Schema Name"</span>, <span class="highlight-literal">"Description"</span>)
        <span class="highlight-keyword">Dim</span> schemaIndex <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = sfm.RegisterResult(resultSchema)
        sfm.UpdateSpatialFieldPrimitive(idx, pnts, vals, schemaIndex)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">Next</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Object</a><br />  <a href="5b145517-1904-4b5f-2f66-0d84b259335b.htm">Autodesk.Revit.DB.Analysis<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>FieldDomainPoints</a><br />    <span class="selflink">Autodesk.Revit.DB.Analysis<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>FieldDomainPointsByParameter</span><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="cd5dedd9-3347-3175-365f-2f325eddbd92.htm">FieldDomainPointsByParameter Members</a></div><div class="seeAlsoStyle"><a href="958e2e12-587d-f188-5d7b-f13d7dbfdf48.htm">Autodesk.Revit.DB.Analysis Namespace</a></div></div></div></div>
