<div class="chm_content">
 <div id="header">
  <table cellpadding="0" cellspacing="0" id="topTable">
   <tbody>
    <tr>
     <td>
      <span>
      </span>
     </td>
    </tr>
   </tbody>
  </table>
  <table cellpadding="0" cellspacing="0" id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="a2e292ce-8cc5-df9e-98c4-f28e32ae0932.htm">
       Members
      </a>
      <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">
       Example
      </a>
      <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     A class that permits structured building of geometry or
   a mesh from a collection of connected faces.
   Contains all closed face sets and custom precisions.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 17.0.0.0 (17.0.484.0)
     <br/>
     <b>
      Since:
     </b>
     2015
    </p>
    <h1 class="heading">
     Syntax
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">TessellatedShapeBuilder</span> : <a href="66c1678c-2e01-e0de-1386-5a0e1eb3ccff.htm">ShapeBuilder</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">TessellatedShapeBuilder</span> _
	<span class="keyword">Inherits</span> <a href="66c1678c-2e01-e0de-1386-5a0e1eb3ccff.htm">ShapeBuilder</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">TessellatedShapeBuilder</span> : <span class="keyword">public</span> <a href="66c1678c-2e01-e0de-1386-5a0e1eb3ccff.htm">ShapeBuilder</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
    </div>
    <h1 class="heading">
     Remarks
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     Creates a geometry populated with a shell or a connected solid (a
   solid may have inner voids) from the sets of connected faces.
   All faces are planar and have polyline boundaries, defined
   as sequences of 3d coordinates.
   Faces are added to the builder as a part of face sets,
   representing faces which share edges
   (e.g., outer 'surface' of a solid or inner 'surface'
   of solid voids). Order of faces in sets is irrelevant. Faces can only
   be added to the build while a face set is "open" (use
     <a href="186da29a-caa2-99ea-1b2a-722c1656c44a.htm">
      OpenConnectedFaceSet(Boolean)
     </a>
     to open a face set).
   Before attempting to build Revit geometry from the builder
   the current face set should be closed
   (
     <a href="0bebb71c-317e-3dbc-1304-169561e22214.htm">
      CloseConnectedFaceSet
     </a>
     ).
   The builder allows for the possibility of multiple face
   sets - in such cases the first set should represent the
   outer 'surface' of a body and all following sets
   represent interior voids.
   The builder tries to create a geometry valid in Revit despite
   inconsistencies or omissions in the input data.
    </div>
    <h1 class="heading">
     Examples
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">// Create a pyramid-shaped DirectShape using given material for the faces</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> CreateTessellatedShape(Document doc, ElementId materialId)
{
    List&lt;XYZ&gt; loopVertices = <span class="highlight-keyword">new</span> List&lt;XYZ&gt;(<span class="highlight-number">4</span>);

    TessellatedShapeBuilder builder = <span class="highlight-keyword">new</span> TessellatedShapeBuilder();

    builder.OpenConnectedFaceSet(<span class="highlight-keyword">true</span>);
    <span class="highlight-comment">// create a pyramid with a square base 4' x 4' and 5' high</span>
    <span class="highlight-keyword">double</span> length = <span class="highlight-number">4.0</span>;
    <span class="highlight-keyword">double</span> height = <span class="highlight-number">5.0</span>;

    XYZ basePt1 = XYZ.Zero;
    XYZ basePt2 = <span class="highlight-keyword">new</span> XYZ(length, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
    XYZ basePt3 = <span class="highlight-keyword">new</span> XYZ(length, length, <span class="highlight-number">0</span>);
    XYZ basePt4 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, length, <span class="highlight-number">0</span>);
    XYZ apex = <span class="highlight-keyword">new</span> XYZ(length / <span class="highlight-number">2</span>, length / <span class="highlight-number">2</span>, height);

    loopVertices.Add(basePt1);
    loopVertices.Add(basePt2);
    loopVertices.Add(basePt3);
    loopVertices.Add(basePt4);
    builder.AddFace(<span class="highlight-keyword">new</span> TessellatedFace(loopVertices, materialId));

    loopVertices.Clear();
    loopVertices.Add(basePt1);
    loopVertices.Add(apex);
    loopVertices.Add(basePt2);
    builder.AddFace(<span class="highlight-keyword">new</span> TessellatedFace(loopVertices, materialId));

    loopVertices.Clear();
    loopVertices.Add(basePt2);
    loopVertices.Add(apex);
    loopVertices.Add(basePt3);
    builder.AddFace(<span class="highlight-keyword">new</span> TessellatedFace(loopVertices, materialId));

    loopVertices.Clear();
    loopVertices.Add(basePt3);
    loopVertices.Add(apex);
    loopVertices.Add(basePt4);
    builder.AddFace(<span class="highlight-keyword">new</span> TessellatedFace(loopVertices, materialId));

    loopVertices.Clear();
    loopVertices.Add(basePt4);
    loopVertices.Add(apex);
    loopVertices.Add(basePt1);
    builder.AddFace(<span class="highlight-keyword">new</span> TessellatedFace(loopVertices, materialId));

    builder.CloseConnectedFaceSet();
    builder.Build();

    TessellatedShapeBuilderResult result = builder.GetBuildResult();

    <span class="highlight-keyword">using</span> (Transaction t = <span class="highlight-keyword">new</span> Transaction(doc, <span class="highlight-literal">"Create tessellated direct shape"</span>))
    {
        t.Start();

        DirectShape ds = DirectShape.CreateElement(doc, <span class="highlight-keyword">new</span> ElementId(BuiltInCategory.OST_GenericModel));
       ds.ApplicationId = <span class="highlight-literal">"Application id"</span>;
       ds.ApplicationDataId = <span class="highlight-literal">"Geometry object id"</span>;

        ds.SetShape(result.GetGeometricalObjects());
        t.Commit();
    }
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">' Create a pyramid-shaped DirectShape using given material for the faces</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> CreateTessellatedShape(doc <span class="highlight-keyword">As</span> Document, materialId <span class="highlight-keyword">As</span> ElementId)
    <span class="highlight-keyword">Dim</span> loopVertices <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> XYZ)(<span class="highlight-number">4</span>)

    <span class="highlight-keyword">Dim</span> builder <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> TessellatedShapeBuilder()

    builder.OpenConnectedFaceSet(<span class="highlight-keyword">True</span>)
    <span class="highlight-comment">' create a pyramid with a square base 4' x 4' and 5' high</span>
    <span class="highlight-keyword">Dim</span> length <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = <span class="highlight-number">4.0</span>
    <span class="highlight-keyword">Dim</span> height <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = <span class="highlight-number">5.0</span>

    <span class="highlight-keyword">Dim</span> basePt1 <span class="highlight-keyword">As</span> XYZ = XYZ.Zero
    <span class="highlight-keyword">Dim</span> basePt2 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(length, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
    <span class="highlight-keyword">Dim</span> basePt3 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(length, length, <span class="highlight-number">0</span>)
    <span class="highlight-keyword">Dim</span> basePt4 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, length, <span class="highlight-number">0</span>)
    <span class="highlight-keyword">Dim</span> apex <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(length / <span class="highlight-number">2</span>, length / <span class="highlight-number">2</span>, height)

    loopVertices.Add(basePt1)
    loopVertices.Add(basePt2)
    loopVertices.Add(basePt3)
    loopVertices.Add(basePt4)
    builder.AddFace(<span class="highlight-keyword">New</span> TessellatedFace(loopVertices, materialId))

    loopVertices.Clear()
    loopVertices.Add(basePt1)
    loopVertices.Add(apex)
    loopVertices.Add(basePt2)
    builder.AddFace(<span class="highlight-keyword">New</span> TessellatedFace(loopVertices, materialId))

    loopVertices.Clear()
    loopVertices.Add(basePt2)
    loopVertices.Add(apex)
    loopVertices.Add(basePt3)
    builder.AddFace(<span class="highlight-keyword">New</span> TessellatedFace(loopVertices, materialId))

    loopVertices.Clear()
    loopVertices.Add(basePt3)
    loopVertices.Add(apex)
    loopVertices.Add(basePt4)
    builder.AddFace(<span class="highlight-keyword">New</span> TessellatedFace(loopVertices, materialId))

    loopVertices.Clear()
    loopVertices.Add(basePt4)
    loopVertices.Add(apex)
    loopVertices.Add(basePt1)
    builder.AddFace(<span class="highlight-keyword">New</span> TessellatedFace(loopVertices, materialId))

 builder.CloseConnectedFaceSet()
 builder.Build()

 <span class="highlight-keyword">Dim</span> result <span class="highlight-keyword">As</span> TessellatedShapeBuilderResult = builder.GetBuildResult()

    <span class="highlight-keyword">Using</span> t <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(doc, <span class="highlight-literal">"Create tessellated direct shape"</span>)
        t.Start()

    <span class="highlight-keyword">Dim</span> ds <span class="highlight-keyword">As</span> DirectShape = DirectShape.CreateElement(doc, <span class="highlight-keyword">New</span> ElementId(BuiltInCategory.OST_GenericModel))
    ds.ApplicationId = <span class="highlight-literal">"Application id"</span>
    ds.ApplicationDataId = <span class="highlight-literal">"Geometry object id"</span>

        ds.SetShape(result.GetGeometricalObjects())
        t.Commit()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Inheritance Hierarchy
    </h1>
    <div class="section" id="familySection" name="collapseableSection" style="">
     <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">
      System
      Object
     </a>
     <br/>
     <a href="66c1678c-2e01-e0de-1386-5a0e1eb3ccff.htm">
      Autodesk.Revit.DB
      ShapeBuilder
     </a>
     <br/>
     <span class="selflink">
      Autodesk.Revit.DB
      TessellatedShapeBuilder
     </span>
     <br/>
    </div>
    <h1 class="heading">
     See Also
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="a2e292ce-8cc5-df9e-98c4-f28e32ae0932.htm">
       TessellatedShapeBuilder Members
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>