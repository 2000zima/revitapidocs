<div class="chm_content">
 <div id="header">
  <table cellpadding="0" cellspacing="0" id="topTable">
   <tbody>
    <tr>
     <td>
      <span>
      </span>
     </td>
    </tr>
   </tbody>
  </table>
  <table cellpadding="0" cellspacing="0" id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="ea2b6aa1-9174-4f95-17f9-f75496564de0.htm">
       Members
      </a>
      <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">
       Example
      </a>
      <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Exposes API for manipulation of analysis display style.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="958e2e12-587d-f188-5d7b-f13d7dbfdf48.htm">
      Autodesk.Revit.DB.Analysis
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 17.0.0.0 (17.0.484.0)
     <br/>
     <b>
      Since:
     </b>
     2011
    </p>
    <h1 class="heading">
     Syntax
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">AnalysisDisplayStyle</span> : <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">AnalysisDisplayStyle</span> _
	<span class="keyword">Inherits</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">AnalysisDisplayStyle</span> : <span class="keyword">public</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
    </div>
    <h1 class="heading">
     Examples
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code>Document doc = commandData.Application.ActiveUIDocument.Document;

AnalysisDisplayStyle analysisDisplayStyle = <span class="highlight-keyword">null</span>;
<span class="highlight-comment">// Look for an existing analysis display style with a specific name</span>
FilteredElementCollector collector1 = <span class="highlight-keyword">new</span> FilteredElementCollector(doc);
ICollection&lt;Element&gt; collection = collector1.OfClass(<span class="highlight-keyword">typeof</span>(AnalysisDisplayStyle)).ToElements();
var displayStyle = from element <span class="highlight-keyword">in</span> collection 
                   where element.Name == <span class="highlight-literal">"Display Style 1"</span> 
                   select element;

<span class="highlight-comment">// If display style does not already exist in the document, create it</span>
<span class="highlight-keyword">if</span> (displayStyle.Count() == <span class="highlight-number">0</span>)
{
    AnalysisDisplayColoredSurfaceSettings coloredSurfaceSettings = 
        <span class="highlight-keyword">new</span> AnalysisDisplayColoredSurfaceSettings();
    coloredSurfaceSettings.ShowGridLines = <span class="highlight-keyword">true</span>;

    AnalysisDisplayColorSettings colorSettings = <span class="highlight-keyword">new</span> AnalysisDisplayColorSettings();
    Color orange = <span class="highlight-keyword">new</span> Color(<span class="highlight-number">255</span>, <span class="highlight-number">205</span>, <span class="highlight-number">0</span>);
    Color purple = <span class="highlight-keyword">new</span> Color(<span class="highlight-number">200</span>, <span class="highlight-number">0</span>, <span class="highlight-number">200</span>);
    colorSettings.MaxColor = orange;
    colorSettings.MinColor = purple;

    AnalysisDisplayLegendSettings legendSettings = <span class="highlight-keyword">new</span> AnalysisDisplayLegendSettings();
    legendSettings.NumberOfSteps = <span class="highlight-number">10</span>;
    legendSettings.Rounding = <span class="highlight-number">0.05</span>;
    legendSettings.ShowDataDescription = <span class="highlight-keyword">false</span>;
    legendSettings.ShowLegend = <span class="highlight-keyword">true</span>;

    analysisDisplayStyle = AnalysisDisplayStyle.CreateAnalysisDisplayStyle(doc, 
        <span class="highlight-literal">"Display Style 1"</span>, coloredSurfaceSettings, colorSettings, legendSettings);
}
<span class="highlight-keyword">else</span>
{
    analysisDisplayStyle = displayStyle.Cast&lt;AnalysisDisplayStyle&gt;().ElementAt&lt;AnalysisDisplayStyle&gt;(<span class="highlight-number">0</span>);
}

<span class="highlight-comment">// now assign the display style to the view</span>
doc.ActiveView.AnalysisDisplayStyleId = analysisDisplayStyle.Id;</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Dim</span> doc <span class="highlight-keyword">As</span> Document = commandData.Application.ActiveUIDocument.Document

<span class="highlight-keyword">Dim</span> analysisDisplayStyle__1 <span class="highlight-keyword">As</span> AnalysisDisplayStyle = <span class="highlight-keyword">Nothing</span>
<span class="highlight-comment">' Look for an existing analysis display style with a specific name</span>
<span class="highlight-keyword">Dim</span> collector1 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(doc)
<span class="highlight-keyword">Dim</span> collection <span class="highlight-keyword">As</span> ICollection(<span class="highlight-keyword">Of</span> Element) = collector1.OfClass(<span class="highlight-keyword">GetType</span>(AnalysisDisplayStyle)).ToElements()
<span class="highlight-keyword">Dim</span> displayStyle <span class="highlight-keyword">As</span> System.Collections.Generic.IEnumerable(<span class="highlight-keyword">Of</span> Autodesk.Revit.DB.Element)
displayStyle = From element <span class="highlight-keyword">In</span> collector1 _
 Where element.Name = <span class="highlight-literal">"Display Style 1"</span> _
 <span class="highlight-keyword">Select</span> element

<span class="highlight-comment">' If display style does not already exist in the document, create it</span>
<span class="highlight-keyword">If</span> displayStyle.Count() = <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
   <span class="highlight-keyword">Dim</span> coloredSurfaceSettings <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> AnalysisDisplayColoredSurfaceSettings()
   coloredSurfaceSettings.ShowGridLines = <span class="highlight-keyword">True</span>

   <span class="highlight-keyword">Dim</span> colorSettings <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> AnalysisDisplayColorSettings()
   <span class="highlight-keyword">Dim</span> orange <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Color(<span class="highlight-number">255</span>, <span class="highlight-number">205</span>, <span class="highlight-number">0</span>)
   <span class="highlight-keyword">Dim</span> purple <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Color(<span class="highlight-number">200</span>, <span class="highlight-number">0</span>, <span class="highlight-number">200</span>)
   colorSettings.MaxColor = orange
   colorSettings.MinColor = purple

   <span class="highlight-keyword">Dim</span> legendSettings <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> AnalysisDisplayLegendSettings()
   legendSettings.NumberOfSteps = <span class="highlight-number">10</span>
   legendSettings.Rounding = <span class="highlight-number">0.05</span>
   legendSettings.ShowDataDescription = <span class="highlight-keyword">False</span>
   legendSettings.ShowLegend = <span class="highlight-keyword">True</span>

   analysisDisplayStyle__1 = AnalysisDisplayStyle.CreateAnalysisDisplayStyle(doc, <span class="highlight-literal">"Display Style 1"</span>, coloredSurfaceSettings, colorSettings, legendSettings)
<span class="highlight-keyword">Else</span>
   analysisDisplayStyle__1 = displayStyle.Cast(<span class="highlight-keyword">Of</span> AnalysisDisplayStyle)().ElementAt(<span class="highlight-number">0</span>)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

<span class="highlight-comment">' now assign the display style to the view</span>
doc.ActiveView.AnalysisDisplayStyleId = analysisDisplayStyle__1.Id</code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Inheritance Hierarchy
    </h1>
    <div class="section" id="familySection" name="collapseableSection" style="">
     <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">
      System
      Object
     </a>
     <br/>
     <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">
      Autodesk.Revit.DB
      Element
     </a>
     <br/>
     <span class="selflink">
      Autodesk.Revit.DB.Analysis
      AnalysisDisplayStyle
     </span>
     <br/>
    </div>
    <h1 class="heading">
     See Also
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="ea2b6aa1-9174-4f95-17f9-f75496564de0.htm">
       AnalysisDisplayStyle Members
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="958e2e12-587d-f188-5d7b-f13d7dbfdf48.htm">
       Autodesk.Revit.DB.Analysis Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>