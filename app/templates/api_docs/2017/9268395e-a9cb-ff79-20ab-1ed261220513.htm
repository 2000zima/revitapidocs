<div class="chm_content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">
       Document Class
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Paint the element's face with specified material.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 17.0.0.0 (17.0.484.0)
     <br/>
     <b>
      Since:
     </b>
     2014
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">void</span> <span class="identifier">Paint</span>(
	<a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a> <span class="parameter">elementId</span>,
	<a href="e32b3b1f-66fc-57cb-6e1c-aa81d1bf3e63.htm">Face</a> <span class="parameter">face</span>,
	<a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a> <span class="parameter">materialId</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">Paint</span> ( _
	<span class="parameter">elementId</span> <span class="keyword">As</span> <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a>, _
	<span class="parameter">face</span> <span class="keyword">As</span> <a href="e32b3b1f-66fc-57cb-6e1c-aa81d1bf3e63.htm">Face</a>, _
	<span class="parameter">materialId</span> <span class="keyword">As</span> <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a> _
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<span class="keyword">void</span> <span class="identifier">Paint</span>(
	<a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a>^ <span class="parameter">elementId</span>, 
	<a href="e32b3b1f-66fc-57cb-6e1c-aa81d1bf3e63.htm">Face</a>^ <span class="parameter">face</span>, 
	<a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a>^ <span class="parameter">materialId</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="elementId">
       <dt>
        <span class="parameter">
         elementId
        </span>
       </dt>
       <dd>
        Type:
        <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">
         Autodesk.Revit.DB
         ElementId
        </a>
        <br/>
        The element that the face belongs to.
       </dd>
      </dl>
      <dl paramname="face">
       <dt>
        <span class="parameter">
         face
        </span>
       </dt>
       <dd>
        Type:
        <a href="e32b3b1f-66fc-57cb-6e1c-aa81d1bf3e63.htm">
         Autodesk.Revit.DB
         Face
        </a>
        <br/>
        The painted element's face.
       </dd>
      </dl>
      <dl paramname="materialId">
       <dt>
        <span class="parameter">
         materialId
        </span>
       </dt>
       <dd>
        Type:
        <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">
         Autodesk.Revit.DB
         ElementId
        </a>
        <br/>
        The material to be painted on the face
       </dd>
      </dl>
     </div>
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">// Paint any unpainted faces of a given wall</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> PaintWallFaces(Wall wall, ElementId matId)
{
    Document doc = wall.Document;
    GeometryElement geometryElement = wall.get_Geometry(<span class="highlight-keyword">new</span> Options());
    <span class="highlight-keyword">foreach</span> (GeometryObject geometryObject <span class="highlight-keyword">in</span> geometryElement)
    {
        <span class="highlight-keyword">if</span> (geometryObject <span class="highlight-keyword">is</span> Solid)
        {
            Solid solid = geometryObject <span class="highlight-keyword">as</span> Solid;
            <span class="highlight-keyword">foreach</span> (Face face <span class="highlight-keyword">in</span> solid.Faces)
            {
                <span class="highlight-keyword">if</span> (doc.IsPainted(wall.Id, face) == <span class="highlight-keyword">false</span>)
                {
                    doc.Paint(wall.Id, face, matId);
                }
            }
        }
    }
}</code></pre>
      </div>
     </span>
     <span codelanguage="CSharp" id="cbc_2" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> ApplyPaintByMaterial(Document document, Wall wall, Material material)
{
   <span class="highlight-comment">// Before acquiring the geometry, make sure the detail level is set to 'Fine'</span>
   Options geoOptions = <span class="highlight-keyword">new</span> Options();
   geoOptions.DetailLevel = ViewDetailLevel.Fine;

   <span class="highlight-comment">// Obtain geometry for the given Wall element</span>
   GeometryElement geoElem = wall.get_Geometry(geoOptions);

   <span class="highlight-comment">// Find a face on the wall</span>
   Face wallFace = <span class="highlight-keyword">null</span>;
   IEnumerator&lt;GeometryObject&gt; geoObjectItor = geoElem.GetEnumerator();
   <span class="highlight-keyword">while</span> (geoObjectItor.MoveNext())
   {
      <span class="highlight-comment">// need to find a solid first</span>
      Solid theSolid = geoObjectItor.Current <span class="highlight-keyword">as</span> Solid;
      <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != theSolid)
      {
         <span class="highlight-comment">// Examine faces of the solid to find one with at least</span>
         <span class="highlight-comment">// one region. Then take the geometric face of that region.</span>
         <span class="highlight-keyword">foreach</span> (Face face <span class="highlight-keyword">in</span> theSolid.Faces)
         {
            <span class="highlight-keyword">if</span> (face.HasRegions)
            {
               wallFace = face.GetRegions()[<span class="highlight-number">0</span>];
               <span class="highlight-keyword">break</span>;
            }
         }
      }
   }

   <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == wallFace)
   {
      TaskDialog.Show(<span class="highlight-literal">"Failure"</span>, <span class="highlight-literal">"Could not find a face to paint on the given wall."</span>);
      <span class="highlight-keyword">return</span>;
   }

   <span class="highlight-comment">// Paint material to the wall face (modification must be inside a transaction)</span>

   <span class="highlight-keyword">using</span> (Transaction transaction = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Painting a wall"</span>))
   {
      transaction.Start();
      document.Paint(wall.Id, wallFace, material.Id);
      transaction.Commit();
   }

   <span class="highlight-comment">// For illustration purposes only, check if the painted material indeed got applied</span>

   <span class="highlight-keyword">bool</span> isPainted = document.IsPainted(wall.Id, wallFace);
   <span class="highlight-keyword">if</span> (isPainted)
   {
      ElementId paintedMatId = document.GetPaintedMaterial(wall.Id, wallFace);
      <span class="highlight-keyword">if</span> (paintedMatId == material.Id)
      {
         TaskDialog.Show(<span class="highlight-literal">"Painting material"</span>, <span class="highlight-literal">"Wall painted successfully."</span>);
      }
   }
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_3" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">' Paint any unpainted faces of a given wall</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> PaintWallFaces(wall <span class="highlight-keyword">As</span> Wall, matId <span class="highlight-keyword">As</span> ElementId)
   <span class="highlight-keyword">Dim</span> doc <span class="highlight-keyword">As</span> Document = wall.Document
   <span class="highlight-keyword">Dim</span> geometryElement <span class="highlight-keyword">As</span> GeometryElement = wall.Geometry(<span class="highlight-keyword">New</span> Options())
   <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> geometryObject <span class="highlight-keyword">As</span> GeometryObject <span class="highlight-keyword">In</span> geometryElement
      <span class="highlight-keyword">If</span> <span class="highlight-keyword">TypeOf</span> geometryObject <span class="highlight-keyword">Is</span> Solid <span class="highlight-keyword">Then</span>
         <span class="highlight-keyword">Dim</span> solid <span class="highlight-keyword">As</span> Solid = <span class="highlight-keyword">TryCast</span>(geometryObject, Solid)
         <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> face <span class="highlight-keyword">As</span> Face <span class="highlight-keyword">In</span> solid.Faces
            <span class="highlight-keyword">If</span> doc.IsPainted(wall.Id, face) = <span class="highlight-keyword">False</span> <span class="highlight-keyword">Then</span>
               doc.Paint(wall.Id, face, matId)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
         <span class="highlight-keyword">Next</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
   <span class="highlight-keyword">Next</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_4" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> ApplyPaintByMaterial(document <span class="highlight-keyword">As</span> Document, wall <span class="highlight-keyword">As</span> Wall, material <span class="highlight-keyword">As</span> Material)
    <span class="highlight-comment">' Before acquiring the geometry, make sure the detail level is set to 'Fine'</span>
    <span class="highlight-keyword">Dim</span> geoOptions <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Options()
    geoOptions.DetailLevel = ViewDetailLevel.Fine

    <span class="highlight-comment">' Obtain geometry for the given Wall element</span>
    <span class="highlight-keyword">Dim</span> geoElem <span class="highlight-keyword">As</span> GeometryElement = wall.Geometry(geoOptions)

    <span class="highlight-comment">' Find a face on the wall</span>
    <span class="highlight-keyword">Dim</span> wallFace <span class="highlight-keyword">As</span> Face = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">Dim</span> geoObjectItor <span class="highlight-keyword">As</span> IEnumerator(<span class="highlight-keyword">Of</span> GeometryObject) = geoElem.GetEnumerator()
    <span class="highlight-keyword">While</span> geoObjectItor.MoveNext()
        <span class="highlight-comment">' need to find a solid first</span>
        <span class="highlight-keyword">Dim</span> theSolid <span class="highlight-keyword">As</span> Solid = <span class="highlight-keyword">TryCast</span>(geoObjectItor.Current, Solid)
        <span class="highlight-keyword">If</span> theSolid <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' Examine faces of the solid to find one with at least</span>
            <span class="highlight-comment">' one region. Then take the geometric face of that region.</span>
            <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> face <span class="highlight-keyword">As</span> Face <span class="highlight-keyword">In</span> theSolid.Faces
                <span class="highlight-keyword">If</span> face.HasRegions <span class="highlight-keyword">Then</span>
                    wallFace = face.GetRegions()(<span class="highlight-number">0</span>)
                    <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Next</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>

    <span class="highlight-keyword">If</span> wallFace <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        TaskDialog.Show(<span class="highlight-literal">"Failure"</span>, <span class="highlight-literal">"Could not find a face to paint on the given wall."</span>)
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Paint material to the wall face (modification must be inside a transaction)</span>


    <span class="highlight-keyword">Using</span> transaction <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Painting a wall"</span>)
        transaction.Start()
        document.Paint(wall.Id, wallFace, material.Id)
        transaction.Commit()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

    <span class="highlight-comment">' For illustration purposes only, check if the painted material indeed got applied</span>


    <span class="highlight-keyword">Dim</span> isPainted <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = document.IsPainted(wall.Id, wallFace)
    <span class="highlight-keyword">If</span> isPainted <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Dim</span> paintedMatId <span class="highlight-keyword">As</span> ElementId = document.GetPaintedMaterial(wall.Id, wallFace)
        <span class="highlight-keyword">If</span> paintedMatId = material.Id <span class="highlight-keyword">Then</span>
            TaskDialog.Show(<span class="highlight-literal">"Painting material"</span>, <span class="highlight-literal">"Wall painted successfully."</span>)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Exceptions
     <a name="exceptionsToggle">
     </a>
    </h1>
    <div class="section" id="exceptionsSection" name="collapseableSection" style="">
     <div class="tableSection">
      <table frame="lhs" width="100%">
       <tbody>
        <tr>
         <th class="exceptionNameColumn">
          Exception
         </th>
         <th class="exceptionConditionColumn">
          Condition
         </th>
        </tr>
        <tr>
         <td>
          <a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">
           Autodesk.Revit.Exceptions
           ArgumentException
          </a>
         </td>
         <td>
          The element elementId does not exist in the document
   -or-
   The element materialId does not exist in the document
   -or-
   The face doesn't belong to the element
   -or-
   The materialId doesn't specify a material element.
   -or-
   The element's face cannot be painted.
         </td>
        </tr>
        <tr>
         <td>
          <a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">
           Autodesk.Revit.Exceptions
           ArgumentNullException
          </a>
         </td>
         <td>
          A non-optional argument was NULL
         </td>
        </tr>
        <tr>
         <td>
          <a href="53205486-5917-7c33-8e67-e362106ddc97.htm">
           Autodesk.Revit.Exceptions
           ModificationForbiddenException
          </a>
         </td>
         <td>
          The document is in failure mode: an operation has failed,
   and Revit requires the user to either cancel the operation
   or fix the problem (usually by deleting certain elements).
   -or-
   The document is being loaded, or is in the midst of another
   sensitive process.
         </td>
        </tr>
        <tr>
         <td>
          <a href="8f025460-c283-ea99-aa8a-5a36e11528f4.htm">
           Autodesk.Revit.Exceptions
           ModificationOutsideTransactionException
          </a>
         </td>
         <td>
          The document has no open transaction.
         </td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">
       Document Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="f6a99488-ae33-46f8-849d-4c68869f68cd.htm">
       Paint Overload
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>