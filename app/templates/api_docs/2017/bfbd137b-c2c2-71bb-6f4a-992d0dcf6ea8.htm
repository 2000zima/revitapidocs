<div class="chm_content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="12ae45fe-e79f-573a-bf55-7c851591b770.htm">
       Members
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     This class is used to store externally created geometric shapes. Primary intended use is for importing shapes from other data formats such as IFC or STEP.
   A DirectShape object may be assigned a category. That will affect how that object is displayed in Revit.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 17.0.0.0 (17.0.484.0)
     <br/>
     <b>
      Since:
     </b>
     2015
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">DirectShape</span> : <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">DirectShape</span> _
	<span class="keyword">Inherits</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">DirectShape</span> : <span class="keyword">public</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
    </div>
    <h1 class="heading">
     Remarks
     <a name="remarksToggle">
     </a>
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     DirectShape is not a replacement for "real" Wall, Roof, Window, etc. It would typically be used  where there is not enough information
   to create, e.g., a Wall, or full functionality of a Wall object is not needed. Some category-specific functionality may be available.

   If you need to modify a shape held by a DirectShape object, use Revit Geometry API, and then store the modified shape back to the DirectShape object.
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">// Create a DirectShape Sphere</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> CreateSphereDirectShape(Document doc)
{
    List&lt;Curve&gt; profile = <span class="highlight-keyword">new</span> List&lt;Curve&gt;();

    <span class="highlight-comment">// first create sphere with 2' radius</span>
    XYZ center = XYZ.Zero;
    <span class="highlight-keyword">double</span> radius = <span class="highlight-number">2.0</span>;    
    XYZ profile00 = center;
    XYZ profilePlus = center + <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, radius, <span class="highlight-number">0</span>);
    XYZ profileMinus = center - <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, radius, <span class="highlight-number">0</span>);

    profile.Add(Line.CreateBound(profilePlus, profileMinus));
    profile.Add(Arc.Create(profileMinus, profilePlus, center + <span class="highlight-keyword">new</span> XYZ(radius, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)));

    CurveLoop curveLoop = CurveLoop.Create(profile);
    SolidOptions options = <span class="highlight-keyword">new</span> SolidOptions(ElementId.InvalidElementId, ElementId.InvalidElementId);

    Frame frame = <span class="highlight-keyword">new</span> Frame(center, XYZ.BasisX, -XYZ.BasisZ, XYZ.BasisY);
    Solid sphere = GeometryCreationUtilities.CreateRevolvedGeometry(frame, <span class="highlight-keyword">new</span> CurveLoop[] { curveLoop }, <span class="highlight-number">0</span>, <span class="highlight-number">2</span> * Math.PI, options);
    <span class="highlight-keyword">using</span> (Transaction t = <span class="highlight-keyword">new</span> Transaction(doc, <span class="highlight-literal">"Create sphere direct shape"</span>))
    {
        t.Start();
        <span class="highlight-comment">// create direct shape and assign the sphere shape</span>
        DirectShape ds = DirectShape.CreateElement(doc, <span class="highlight-keyword">new</span> ElementId(BuiltInCategory.OST_GenericModel));

        ds.ApplicationId = <span class="highlight-literal">"Application id"</span>;
        ds.ApplicationDataId = <span class="highlight-literal">"Geometry object id"</span>;
        ds.SetShape(<span class="highlight-keyword">new</span> GeometryObject[] { sphere });
        t.Commit();
    }
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">' Create a DirectShape Sphere</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> CreateSphereDirectShape(doc <span class="highlight-keyword">As</span> Document)
    <span class="highlight-keyword">Dim</span> profile <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> Curve)()

    <span class="highlight-comment">' first create sphere with 2' radius</span>
    <span class="highlight-keyword">Dim</span> center <span class="highlight-keyword">As</span> XYZ = XYZ.Zero
    <span class="highlight-keyword">Dim</span> radius <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = <span class="highlight-number">2.0</span>
    <span class="highlight-keyword">Dim</span> profile00 <span class="highlight-keyword">As</span> XYZ = center
    <span class="highlight-keyword">Dim</span> profilePlus <span class="highlight-keyword">As</span> XYZ = center + <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, radius, <span class="highlight-number">0</span>)
    <span class="highlight-keyword">Dim</span> profileMinus <span class="highlight-keyword">As</span> XYZ = center - <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, radius, <span class="highlight-number">0</span>)

    profile.Add(Line.CreateBound(profilePlus, profileMinus))
    profile.Add(Arc.Create(profileMinus, profilePlus, center + <span class="highlight-keyword">New</span> XYZ(radius, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)))

    <span class="highlight-keyword">Dim</span> curveLoop__1 <span class="highlight-keyword">As</span> CurveLoop = CurveLoop.Create(profile)
    <span class="highlight-keyword">Dim</span> options <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> SolidOptions(ElementId.InvalidElementId, ElementId.InvalidElementId)

    <span class="highlight-keyword">Dim</span> frame <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Frame(center, XYZ.BasisX, -XYZ.BasisZ, XYZ.BasisY)
    <span class="highlight-keyword">Dim</span> sphere <span class="highlight-keyword">As</span> Solid = GeometryCreationUtilities.CreateRevolvedGeometry(frame, <span class="highlight-keyword">New</span> CurveLoop() {curveLoop__1}, <span class="highlight-number">0</span>, <span class="highlight-number">2</span> * Math.PI, options)
    <span class="highlight-keyword">Using</span> t <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(doc, <span class="highlight-literal">"Create sphere direct shape"</span>)
        t.Start()
        <span class="highlight-comment">' create direct shape and assign the sphere shape</span>
    <span class="highlight-keyword">Dim</span> ds <span class="highlight-keyword">As</span> DirectShape = DirectShape.CreateElement(doc, <span class="highlight-keyword">New</span> ElementId(BuiltInCategory.OST_GenericModel))
    ds.ApplicationId = <span class="highlight-literal">"Application id"</span>
    ds.ApplicationDataId = <span class="highlight-literal">"Geometry object id"</span>
        ds.SetShape(<span class="highlight-keyword">New</span> GeometryObject() {sphere})
        t.Commit()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Inheritance Hierarchy
     <a name="familyToggle">
     </a>
    </h1>
    <div class="section" id="familySection" name="collapseableSection" style="">
     <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">
      System
      Object
     </a>
     <br/>
     <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">
      Autodesk.Revit.DB
      Element
     </a>
     <br/>
     <span class="selflink">
      Autodesk.Revit.DB
      DirectShape
     </span>
     <br/>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="12ae45fe-e79f-573a-bf55-7c851591b770.htm">
       DirectShape Members
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>