<div class="chm_content">
 <div id="header">
  <table cellpadding="0" cellspacing="0" id="topTable">
   <tbody>
    <tr>
     <td>
      <span>
      </span>
     </td>
    </tr>
   </tbody>
  </table>
  <table cellpadding="0" cellspacing="0" id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="b0e53a4a-84ad-abb4-358d-9797870f101b.htm">
       GlobalParameter Class
      </a>
      <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">
       Example
      </a>
      <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Sets a formula expression for this parameter.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 17.0.0.0 (17.0.1090.0)
     <br/>
     <b>
      Since:
     </b>
     2016 Subscription Update
    </p>
    <h1 class="heading">
     Syntax
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">void</span> <span class="identifier">SetFormula</span>(
	<a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">string</a> <span class="parameter">expression</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">SetFormula</span> ( _
	<span class="parameter">expression</span> <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a> _
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<span class="keyword">void</span> <span class="identifier">SetFormula</span>(
	<a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>^ <span class="parameter">expression</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="expression">
       <dt>
        <span class="parameter">
         expression
        </span>
       </dt>
       <dd>
        Type:
        <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">
         System
         String
        </a>
        <br/>
        Valid formula string.
       </dd>
      </dl>
     </div>
    </div>
    <h1 class="heading">
     Remarks
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     An assigned expression will compute the parameter's actual value.
     <p>
      In order to set a formula, the global parameter must be non-reporting. Therefore
   a reporting parameter must be changed to non-reporting first before assigning a formula.
     </p>
     <p>
      Value of the evaluated formula must be compatible with the value-type of the parameter.
   For example, it is permitted  to use
      <b>
       Integer
      </b>
      parameters in a formula assigned to
   a Double (
      <b>
       Number
      </b>
      ) parameter, or vice versa. It is not allowed, however, to use
      <b>
       Length
      </b>
      or
      <b>
       Angle
      </b>
      arguments in a formula in a parameter of which type is ether
      <b>
       Integer
      </b>
      or
      <b>
       Number
      </b>
      . To test whether a formula is valid for a global parameter,
   the method
      <a href="50c83d89-22da-4398-bba8-197345f76192.htm">
       IsValidFormula(String)
      </a>
      can be used.
     </p>
     <p>
      An empty string can be used to remove an existing formula. When a formula is removed,
   the parameter retains its value as it was previously computed using the formula.
     </p>
     <p>
      Formulas may include all standard arithmetic operations and logical operations (as functions
      <b>
       and
      </b>
      ,
      <b>
       or
      </b>
      ,
      <b>
       not
      </b>
      .) Input to logical operations must be Boolean values (parameters of
      <b>
       YesNo
      </b>
      type).
   Consequently, arithmetic operations can be applied to numeric values only. While there are no operations
   supported for string (text) arguments, strings can be used as results of a logical
      <b>
       If
      </b>
      operation.
     </p>
    </div>
    <h1 class="heading">
     Examples
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Create global parameters and then set a formula to one so it has a value of</span>
<span class="highlight-comment">/// either of two other parameters depending on the boolean value of the forth one.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="document"&gt;Revit project document in which we create global parameters.&lt;/param&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> SetCombinationParameters(Document document)
{
    GlobalParameter gpB = <span class="highlight-keyword">null</span>;
    GlobalParameter gpT = <span class="highlight-keyword">null</span>;
    GlobalParameter gpF = <span class="highlight-keyword">null</span>;
    GlobalParameter gpX = <span class="highlight-keyword">null</span>;

    <span class="highlight-keyword">int</span> TRUE = <span class="highlight-number">1</span>;
    <span class="highlight-keyword">int</span> FALSE = <span class="highlight-number">0</span>;

    <span class="highlight-comment">// transaction to create global parameters and set their values</span>
    <span class="highlight-keyword">using</span> (Transaction trans = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Creating global parameters"</span>))
    {
        <span class="highlight-comment">// create 4 new global parameters</span>

        trans.Start();

        gpB = GlobalParameter.Create(document, <span class="highlight-literal">"GPB"</span>, ParameterType.YesNo);
        gpT = GlobalParameter.Create(document, <span class="highlight-literal">"GPT"</span>, ParameterType.Text);
        gpF = GlobalParameter.Create(document, <span class="highlight-literal">"GPF"</span>, ParameterType.Text);
        gpX = GlobalParameter.Create(document, <span class="highlight-literal">"GPX"</span>, ParameterType.Text);

        <span class="highlight-comment">// assign initial values and a formula to the global parameters</span>

        gpB.SetValue(<span class="highlight-keyword">new</span> IntegerParameterValue(TRUE));
        gpT.SetValue(<span class="highlight-keyword">new</span> StringParameterValue(<span class="highlight-literal">"TypeA"</span>));
        gpF.SetValue(<span class="highlight-keyword">new</span> StringParameterValue(<span class="highlight-literal">"TypeB"</span>));

        <span class="highlight-comment">// Set the formula to GPX so that its final value is either the value of GPT (TypeA)</span>
        <span class="highlight-comment">// or GPF (TypeB) depending on whether the value of GPB is True or False.</span>
        <span class="highlight-comment">// Note: in this particular case we are certain the formula is valid, but if weren't </span>
        <span class="highlight-comment">// certain, we could use a validation method as we are now going to illustrate here:</span>
        <span class="highlight-keyword">string</span> expression = <span class="highlight-literal">"if(GPB,GPT,GPF)"</span>; <span class="highlight-comment">// XPX &lt;== if (GPB == TRUE) then GPT else GPF</span>
        <span class="highlight-keyword">if</span> (gpX.IsValidFormula(expression))
        {
            gpX.SetFormula(expression);  
        }

        trans.Commit();
    }

    <span class="highlight-comment">// we can test that the formula works</span>
    <span class="highlight-comment">// since the boolean value is TRUE, the value of the GPX parameter</span>
    <span class="highlight-comment">// should be the same as the value of the GPT parameters</span>

    StringParameterValue sTrue = gpT.GetValue() <span class="highlight-keyword">as</span> StringParameterValue;
    StringParameterValue sFalse = gpF.GetValue() <span class="highlight-keyword">as</span> StringParameterValue;
    StringParameterValue sValue = gpX.GetValue() <span class="highlight-keyword">as</span> StringParameterValue;

    <span class="highlight-keyword">if</span> (sValue.Value != sTrue.Value)
    {
        TaskDialog.Show(<span class="highlight-literal">"Error"</span>, <span class="highlight-literal">"Unexpected value of a global parameter"</span>);
    }

    <span class="highlight-comment">// we can also test that evaluation of the formula is affected by changes</span>

    <span class="highlight-keyword">using</span> (Transaction trans = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Change value of a YesNo parameter"</span>))
    {
        trans.Start();
        gpB.SetValue(<span class="highlight-keyword">new</span> IntegerParameterValue(FALSE));
        trans.Commit();
    }

    sValue = gpX.GetValue() <span class="highlight-keyword">as</span> StringParameterValue;

    <span class="highlight-keyword">if</span> (sValue.Value != sFalse.Value)
    {
        TaskDialog.Show(<span class="highlight-literal">"Error"</span>, <span class="highlight-literal">"Unexpected value of a global parameter"</span>);
    }

}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' Create global parameters and then set a formula to one so it has a value of</span>
<span class="highlight-comment">' either of two other parameters depending on the boolean value of the forth one.</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;param name="document"&gt;Revit project document in which we create global parameters.&lt;/param&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> SetCombinationParameters(document <span class="highlight-keyword">As</span> Document)
    <span class="highlight-keyword">Dim</span> gpB <span class="highlight-keyword">As</span> GlobalParameter = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">Dim</span> gpT <span class="highlight-keyword">As</span> GlobalParameter = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">Dim</span> gpF <span class="highlight-keyword">As</span> GlobalParameter = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">Dim</span> gpX <span class="highlight-keyword">As</span> GlobalParameter = <span class="highlight-keyword">Nothing</span>

    <span class="highlight-keyword">Dim</span> [<span class="highlight-keyword">TRUE</span>] <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">1</span>
    <span class="highlight-keyword">Dim</span> [<span class="highlight-keyword">FALSE</span>] <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>

    <span class="highlight-comment">' transaction to create global parameters and set their values</span>
    <span class="highlight-keyword">Using</span> trans <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Creating global parameters"</span>)
        <span class="highlight-comment">' create 4 new global parameters</span>


        trans.Start()

        gpB = GlobalParameter.Create(document, <span class="highlight-literal">"GPB"</span>, ParameterType.YesNo)
        gpT = GlobalParameter.Create(document, <span class="highlight-literal">"GPT"</span>, ParameterType.Text)
        gpF = GlobalParameter.Create(document, <span class="highlight-literal">"GPF"</span>, ParameterType.Text)
        gpX = GlobalParameter.Create(document, <span class="highlight-literal">"GPX"</span>, ParameterType.Text)

        <span class="highlight-comment">' assign initial values and a formula to the global parameters</span>


        gpB.SetValue(<span class="highlight-keyword">New</span> IntegerParameterValue([<span class="highlight-keyword">TRUE</span>]))
        gpT.SetValue(<span class="highlight-keyword">New</span> StringParameterValue(<span class="highlight-literal">"TypeA"</span>))
        gpF.SetValue(<span class="highlight-keyword">New</span> StringParameterValue(<span class="highlight-literal">"TypeB"</span>))

        <span class="highlight-comment">' Set the formula to GPX so that its final value is either the value of GPT (TypeA)</span>
        <span class="highlight-comment">' or GPF (TypeB) depending on whether the value of GPB is True or False.</span>
        <span class="highlight-comment">' Note: in this particular case we are certain the formula is valid, but if weren't </span>
        <span class="highlight-comment">' certain, we could use a validation method as we are now going to illustrate here:</span>
        <span class="highlight-keyword">Dim</span> expression <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"if(GPB,GPT,GPF)"</span>
        <span class="highlight-comment">' XPX &lt;== if (GPB == TRUE) then GPT else GPF</span>
        <span class="highlight-keyword">If</span> gpX.IsValidFormula(expression) <span class="highlight-keyword">Then</span>
            gpX.SetFormula(expression)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        trans.Commit()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

    <span class="highlight-comment">' we can test that the formula works</span>
    <span class="highlight-comment">' since the boolean value is TRUE, the value of the GPX parameter</span>
    <span class="highlight-comment">' should be the same as the value of the GPT parameters</span>


    <span class="highlight-keyword">Dim</span> sTrue <span class="highlight-keyword">As</span> StringParameterValue = <span class="highlight-keyword">TryCast</span>(gpT.GetValue(), StringParameterValue)
    <span class="highlight-keyword">Dim</span> sFalse <span class="highlight-keyword">As</span> StringParameterValue = <span class="highlight-keyword">TryCast</span>(gpF.GetValue(), StringParameterValue)
    <span class="highlight-keyword">Dim</span> sValue <span class="highlight-keyword">As</span> StringParameterValue = <span class="highlight-keyword">TryCast</span>(gpX.GetValue(), StringParameterValue)

    <span class="highlight-keyword">If</span> sValue.Value &lt;&gt; sTrue.Value <span class="highlight-keyword">Then</span>
        TaskDialog.Show(<span class="highlight-literal">"Error"</span>, <span class="highlight-literal">"Unexpected value of a global parameter"</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' we can also test that evaluation of the formula is affected by changes</span>


    <span class="highlight-keyword">Using</span> trans <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Change value of a YesNo parameter"</span>)
        trans.Start()
        gpB.SetValue(<span class="highlight-keyword">New</span> IntegerParameterValue([<span class="highlight-keyword">FALSE</span>]))
        trans.Commit()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

    sValue = <span class="highlight-keyword">TryCast</span>(gpX.GetValue(), StringParameterValue)

    <span class="highlight-keyword">If</span> sValue.Value &lt;&gt; sFalse.Value <span class="highlight-keyword">Then</span>
        TaskDialog.Show(<span class="highlight-literal">"Error"</span>, <span class="highlight-literal">"Unexpected value of a global parameter"</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Exceptions
    </h1>
    <div class="section" id="exceptionsSection" name="collapseableSection" style="">
     <div class="tableSection">
      <table cellpadding="5" cellspacing="2" frame="lhs" width="100%">
       <tbody>
        <tr>
         <th class="exceptionNameColumn">
          Exception
         </th>
         <th class="exceptionConditionColumn">
          Condition
         </th>
        </tr>
        <tr>
         <td>
          <a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">
           Autodesk.Revit.Exceptions
           ArgumentException
          </a>
         </td>
         <td>
          The given expression argument is not valid as a formula for this parameter.
         </td>
        </tr>
        <tr>
         <td>
          <a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">
           Autodesk.Revit.Exceptions
           ArgumentNullException
          </a>
         </td>
         <td>
          A non-optional argument was NULL
         </td>
        </tr>
        <tr>
         <td>
          <a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">
           Autodesk.Revit.Exceptions
           InvalidOperationException
          </a>
         </td>
         <td>
          This is a non-reporting global parameter. As such it does not allow the current operation.
         </td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <h1 class="heading">
     See Also
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="b0e53a4a-84ad-abb4-358d-9797870f101b.htm">
       GlobalParameter Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>