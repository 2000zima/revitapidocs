<article id="api-content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="b0e53a4a-84ad-abb4-358d-9797870f101b.htm">
       GlobalParameter Class
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Sets a new value of the global parameter.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 17.0.0.0 (17.0.1090.0)
     <br/>
     <b>
      Since:
     </b>
     2016 Subscription Update
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">void</span> <span class="identifier">SetValue</span>(
	<a href="366521ef-ecc2-c3e3-feb5-81b3bbd8df0c.htm">ParameterValue</a> <span class="parameter">value</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">SetValue</span> ( _
	<span class="parameter">value</span> <span class="keyword">As</span> <a href="366521ef-ecc2-c3e3-feb5-81b3bbd8df0c.htm">ParameterValue</a> _
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<span class="keyword">void</span> <span class="identifier">SetValue</span>(
	<a href="366521ef-ecc2-c3e3-feb5-81b3bbd8df0c.htm">ParameterValue</a>^ <span class="parameter">value</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="value">
       <dt>
        <span class="parameter">
         value
        </span>
       </dt>
       <dd>
        Type:
        <a href="366521ef-ecc2-c3e3-feb5-81b3bbd8df0c.htm">
         Autodesk.Revit.DB
         ParameterValue
        </a>
        <br/>
        An instance of one of the value classes derived from ParameterValue.
       </dd>
      </dl>
     </div>
    </div>
    <h1 class="heading">
     Remarks
     <a name="remarksToggle">
     </a>
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     <p>
      Note that a value can only be set for parameters that are neither
   formula-driven nor dimension-driven, as those have their values determined
   by evaluating the formula or by the dimension, respectively.
     </p>
     <p>
      The argument this method accepts is of the same type of
      <a href="366521ef-ecc2-c3e3-feb5-81b3bbd8df0c.htm">
       ParameterValue
      </a>
      that is returned by
      <a href="56eb0e54-eac4-9b51-3122-e4fb065b63f0.htm">
       GetValue
      </a>
      . However, the type can also be easily deduced:
      <b>
       Text
      </b>
      parameters accept only
      <a href="2f79fff4-9773-471a-83f8-5636459bdbe5.htm">
       StringParameterValue
      </a>
      .
      <b>
       Integer
      </b>
      and
      <b>
       YesNo
      </b>
      parameters accept only
      <a href="14c16038-74bf-205b-ac93-6ffa6274c034.htm">
       IntegerParameterValue
      </a>
      .
   All other types of parameters accept only
      <a href="561ef32b-c3bc-3847-ef2a-27f4a011e650.htm">
       DoubleParameterValue
      </a>
      .
   Curiously, the actual value of a
      <b>
       YesNo
      </b>
      parameter can be only either 0 or 1.
     </p>
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Modifies values of certain types of global parameters so that</span>
<span class="highlight-comment">/// - integer values will be incremented by one</span>
<span class="highlight-comment">/// - double values will be multiplied by two</span>
<span class="highlight-comment">/// - boolean values will be negated</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="document"&gt;Revit project document in which we create global parameters.&lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="gpset"&gt;A set of ElementIds of global parameter elements&lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;returns&gt;Number of actually modified values&lt;/returns&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> ModifyGlobalParametersValues(Document document, ISet&lt;ElementId&gt; gpset)
{
    <span class="highlight-keyword">int</span> nChangedValues = <span class="highlight-number">0</span>;     <span class="highlight-comment">// number of values changed</span>

    <span class="highlight-comment">// we need a transaction to modify the model</span>
    <span class="highlight-keyword">using</span> (Transaction trans = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Change global parameters values"</span>))
    {
        trans.Start();

        <span class="highlight-keyword">foreach</span>(ElementId gpid <span class="highlight-keyword">in</span> gpset)
        {
            <span class="highlight-comment">// filter out element Ids that are not of a global parameters</span>
            <span class="highlight-comment">// (in production code, this would be an assert-able situation)</span>
            <span class="highlight-keyword">if</span> (!GlobalParametersManager.IsValidGlobalParameter(document, gpid))
                <span class="highlight-keyword">continue</span>;

            <span class="highlight-comment">// get the current value of the global parameter</span>
            GlobalParameter gp = document.GetElement(gpid) <span class="highlight-keyword">as</span> GlobalParameter;
            ParameterValue gpvalue = gp.GetValue();

            <span class="highlight-comment">// test whether it is a Double or Integer</span>
            <span class="highlight-keyword">if</span> (gp.GetType() == <span class="highlight-keyword">typeof</span>(DoubleParameterValue))
            {
                DoubleParameterValue dvalue = gpvalue <span class="highlight-keyword">as</span> DoubleParameterValue;
                dvalue.Value *= <span class="highlight-number">2.0</span>;
                gp.SetValue(dvalue);
                nChangedValues += <span class="highlight-number">1</span>;
            }
            <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (gp.GetType() == <span class="highlight-keyword">typeof</span>(IntegerParameterValue))
            {
                <span class="highlight-comment">// Integer values may represent Boolean parameters too</span>
                IntegerParameterValue ivalue = gpvalue <span class="highlight-keyword">as</span> IntegerParameterValue;
                <span class="highlight-keyword">if</span> (gp.GetDefinition().ParameterType == ParameterType.YesNo)
                {
                    ivalue.Value = (ivalue.Value == <span class="highlight-number">0</span>) ? <span class="highlight-number">1</span> : <span class="highlight-number">0</span>;
                }
                <span class="highlight-keyword">else</span>   <span class="highlight-comment">// common integers</span>
                {
                    ivalue.Value += <span class="highlight-number">1</span>;
                }
                gp.SetValue(ivalue);
                nChangedValues += <span class="highlight-number">1</span>;
            }
        }

        trans.Commit();
    }

    <span class="highlight-keyword">return</span> nChangedValues;
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' Modifies values of certain types of global parameters so that</span>
<span class="highlight-comment">' - integer values will be incremented by one</span>
<span class="highlight-comment">' - double values will be multiplied by two</span>
<span class="highlight-comment">' - boolean values will be negated</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;param name="document"&gt;Revit project document in which we create global parameters.&lt;/param&gt;</span>
<span class="highlight-comment">' &lt;param name="gpset"&gt;A set of ElementIds of global parameter elements&lt;/param&gt;</span>
<span class="highlight-comment">' &lt;returns&gt;Number of actually modified values&lt;/returns&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> ModifyGlobalParametersValues(document <span class="highlight-keyword">As</span> Document, gpset <span class="highlight-keyword">As</span> ISet(<span class="highlight-keyword">Of</span> ElementId)) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>
    <span class="highlight-keyword">Dim</span> nChangedValues <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
    <span class="highlight-comment">' number of values changed</span>
    <span class="highlight-comment">' we need a transaction to modify the model</span>
    <span class="highlight-keyword">Using</span> trans <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Change global parameters values"</span>)
        trans.Start()

        <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> gpid <span class="highlight-keyword">As</span> ElementId <span class="highlight-keyword">In</span> gpset
            <span class="highlight-comment">' filter out element Ids that are not of a global parameters</span>
            <span class="highlight-comment">' (in production code, this would be an assert-able situation)</span>
            <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> GlobalParametersManager.IsValidGlobalParameter(document, gpid) <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">For</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' get the current value of the global parameter</span>
            <span class="highlight-keyword">Dim</span> gp <span class="highlight-keyword">As</span> GlobalParameter = <span class="highlight-keyword">TryCast</span>(document.GetElement(gpid), GlobalParameter)
            <span class="highlight-keyword">Dim</span> gpvalue <span class="highlight-keyword">As</span> ParameterValue = gp.GetValue()

            <span class="highlight-comment">' test whether it is a Double or Integer</span>
            <span class="highlight-keyword">If</span> gp.[<span class="highlight-keyword">GetType</span>]() = <span class="highlight-keyword">GetType</span>(DoubleParameterValue) <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Dim</span> dvalue <span class="highlight-keyword">As</span> DoubleParameterValue = <span class="highlight-keyword">TryCast</span>(gpvalue, DoubleParameterValue)
                dvalue.Value *= <span class="highlight-number">2.0</span>
                gp.SetValue(dvalue)
                nChangedValues += <span class="highlight-number">1</span>
            <span class="highlight-keyword">ElseIf</span> gp.[<span class="highlight-keyword">GetType</span>]() = <span class="highlight-keyword">GetType</span>(IntegerParameterValue) <span class="highlight-keyword">Then</span>
                <span class="highlight-comment">' Integer values may represent Boolean parameters too</span>
                <span class="highlight-keyword">Dim</span> ivalue <span class="highlight-keyword">As</span> IntegerParameterValue = <span class="highlight-keyword">TryCast</span>(gpvalue, IntegerParameterValue)
                <span class="highlight-keyword">If</span> gp.GetDefinition().ParameterType = ParameterType.YesNo <span class="highlight-keyword">Then</span>
                    ivalue.Value = <span class="highlight-keyword">If</span>((ivalue.Value = <span class="highlight-number">0</span>), <span class="highlight-number">1</span>, <span class="highlight-number">0</span>)
                <span class="highlight-keyword">Else</span>
                    <span class="highlight-comment">' common integers</span>
                    ivalue.Value += <span class="highlight-number">1</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
                gp.SetValue(ivalue)
                nChangedValues += <span class="highlight-number">1</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">Next</span>

        trans.Commit()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

    <span class="highlight-keyword">Return</span> nChangedValues
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Exceptions
     <a name="exceptionsToggle">
     </a>
    </h1>
    <div class="section" id="exceptionsSection" name="collapseableSection" style="">
     <div class="tableSection">
      <table frame="lhs" width="100%">
       <tbody>
        <tr>
         <th class="exceptionNameColumn">
          Exception
         </th>
         <th class="exceptionConditionColumn">
          Condition
         </th>
        </tr>
        <tr>
         <td>
          <a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">
           Autodesk.Revit.Exceptions
           ArgumentException
          </a>
         </td>
         <td>
          The given value argument is not a valid instance of ParameterValue!
   -or-
   The given parameter value arguments is not of the storage type the global parameter expects.
         </td>
        </tr>
        <tr>
         <td>
          <a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">
           Autodesk.Revit.Exceptions
           ArgumentNullException
          </a>
         </td>
         <td>
          A non-optional argument was NULL
         </td>
        </tr>
        <tr>
         <td>
          <a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">
           Autodesk.Revit.Exceptions
           InvalidOperationException
          </a>
         </td>
         <td>
          This is a formula-driven parameter. As such it does not allow the current operation.
   -or-
   This is a dimension-driven parameter. As such it does not allow the current operation.
         </td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="b0e53a4a-84ad-abb4-358d-9797870f101b.htm">
       GlobalParameter Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</article>