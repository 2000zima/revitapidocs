<div class="chm_content">
 <div id="header">
  <table cellpadding="0" cellspacing="0" id="topTable">
   <tbody>
    <tr>
     <td>
      <span>
      </span>
     </td>
    </tr>
   </tbody>
  </table>
  <table cellpadding="0" cellspacing="0" id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="79a92343-2342-8325-1b51-f12c4fb05481.htm">
       FormattedText Class
      </a>
      <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">
       Example
      </a>
      <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Returns a
     <a href="8a00baaf-8cb8-d9f0-e0a0-eaa5aa16e55e.htm">
      TextRange
     </a>
     object that represents the entire text.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 17.0.0.0 (17.0.1090.0)
     <br/>
     <b>
      Since:
     </b>
     2017
    </p>
    <h1 class="heading">
     Syntax
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <a href="8a00baaf-8cb8-d9f0-e0a0-eaa5aa16e55e.htm">TextRange</a> <span class="identifier">AsTextRange</span>()</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">AsTextRange</span> <span class="keyword">As</span> <a href="8a00baaf-8cb8-d9f0-e0a0-eaa5aa16e55e.htm">TextRange</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<a href="8a00baaf-8cb8-d9f0-e0a0-eaa5aa16e55e.htm">TextRange</a>^ <span class="identifier">AsTextRange</span>()</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <h4 class="subHeading">
      Return Value
     </h4>
     The
     <a href="8a00baaf-8cb8-d9f0-e0a0-eaa5aa16e55e.htm">
      TextRange
     </a>
     object that represents the entire text.
    </div>
    <h1 class="heading">
     Remarks
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     This range includes a carriage return character ('\r') that is always present.
   As a result the range can never be an empty range.
    </div>
    <h1 class="heading">
     Examples
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> AppendText(TextNote textNote)
{
    FormattedText formatText = textNote.GetFormattedText();

    TextRange range = formatText.AsTextRange();

    range.Start = range.End - <span class="highlight-number">1</span>;
    <span class="highlight-comment">// set Length to 0 to insert</span>
    range.Length = <span class="highlight-number">0</span>;
    <span class="highlight-keyword">string</span> someNewText = <span class="highlight-literal">"\rThis is a new paragraph\vThis is a new line without a paragraph break\r"</span>;
    formatText.SetPlainText(range, someNewText);

    <span class="highlight-comment">// get range for entire text</span>
    range = formatText.AsTextRange();
    range.Start = range.End - <span class="highlight-number">1</span>;
    range.Length = <span class="highlight-number">0</span>;
    <span class="highlight-keyword">string</span> someListText = <span class="highlight-literal">"\rBulleted List item 1\rItem 2\vSecond line for Item 2\rThird bullet point"</span>;
    formatText.SetPlainText(range, someListText);
    range.Start++;
    range.Length = someListText.Length;
    formatText.SetListType(range, ListType.Bullet);

    <span class="highlight-keyword">if</span> (formatText.GetAllCapsStatus(range) != FormatStatus.None)
    {
        formatText.SetAllCapsStatus(range, <span class="highlight-keyword">false</span>);
    }

    textNote.SetFormattedText(formatText);
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> AppendText(textNote <span class="highlight-keyword">As</span> TextNote)
    <span class="highlight-keyword">Dim</span> formatText <span class="highlight-keyword">As</span> FormattedText = textNote.GetFormattedText()

    <span class="highlight-keyword">Dim</span> range <span class="highlight-keyword">As</span> TextRange = formatText.AsTextRange()

    range.Start = range.[<span class="highlight-keyword">End</span>] - <span class="highlight-number">1</span>
    <span class="highlight-comment">' set Length to 0 to insert</span>
    range.Length = <span class="highlight-number">0</span>
    <span class="highlight-keyword">Dim</span> someNewText <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = vbCr &amp; <span class="highlight-literal">"This is a new paragraph"</span> &amp; vbVerticalTab &amp; <span class="highlight-literal">"This is a new line without a paragraph break"</span> &amp; vbCr
    formatText.SetPlainText(range, someNewText)

    <span class="highlight-comment">' get range for entire text</span>
    range = formatText.AsTextRange()
    range.Start = range.[<span class="highlight-keyword">End</span>] - <span class="highlight-number">1</span>
    range.Length = <span class="highlight-number">0</span>
    <span class="highlight-keyword">Dim</span> someListText <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = vbCr &amp; <span class="highlight-literal">"Bulleted List item 1"</span> &amp; vbCr &amp; <span class="highlight-literal">"Item 2"</span> &amp; vbVerticalTab &amp; <span class="highlight-literal">"Second line for Item 2"</span> &amp; vbCr &amp; <span class="highlight-literal">"Third bullet point"</span>
    formatText.SetPlainText(range, someListText)
    range.Start += <span class="highlight-number">1</span>
    range.Length = someListText.Length
    formatText.SetListType(range, ListType.Bullet)

    <span class="highlight-keyword">If</span> formatText.GetAllCapsStatus(range) &lt;&gt; FormatStatus.None <span class="highlight-keyword">Then</span>
        formatText.SetAllCapsStatus(range, <span class="highlight-keyword">False</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    textNote.SetFormattedText(formatText)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     See Also
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="79a92343-2342-8325-1b51-f12c4fb05481.htm">
       FormattedText Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>