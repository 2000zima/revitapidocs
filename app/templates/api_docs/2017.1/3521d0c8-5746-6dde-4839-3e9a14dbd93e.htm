<article id="api-content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="70fd7426-f4a4-591c-8c06-3c18dda45e7d.htm">
       Rebar Class
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Get the id of the EndTreatmentType to be applied to the rebar.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">
      Autodesk.Revit.DB.Structure
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 17.0.0.0 (17.0.1090.0)
     <br/>
     <b>
      Since:
     </b>
     2009
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a> <span class="identifier">GetEndTreatmentTypeId</span>(
	<a href="http://msdn2.microsoft.com/en-us/library/td2s409d" target="_blank">int</a> <span class="parameter">end</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">GetEndTreatmentTypeId</span> ( _
	<span class="parameter">end</span> <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/td2s409d" target="_blank">Integer</a> _
) <span class="keyword">As</span> <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a>^ <span class="identifier">GetEndTreatmentTypeId</span>(
	<a href="http://msdn2.microsoft.com/en-us/library/td2s409d" target="_blank">int</a> <span class="parameter">end</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="end">
       <dt>
        <span class="parameter">
         end
        </span>
       </dt>
       <dd>
        Type:
        <a href="http://msdn2.microsoft.com/en-us/library/td2s409d" target="_blank">
         System
         Int32
        </a>
        <br/>
        0 for the start end treatment, 1 for the end end treatment.
       </dd>
      </dl>
     </div>
     <h4 class="subHeading">
      Return Value
     </h4>
     The id of a EndTreatmentType, or invalidElementId if the rebar has
   no end treatment at the specified end.
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> ListEndTreatments(Document doc, List&lt;Rebar&gt; bars)
{
    StringBuilder info = <span class="highlight-keyword">new</span> StringBuilder();
    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> n = <span class="highlight-number">0</span>; n &lt; bars.Count; n++)
    {
        <span class="highlight-comment">// get end treatment for both ends of bar</span>
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; <span class="highlight-number">2</span>; i++)
        {
            ElementId treatmentTypeId = bars[n].GetEndTreatmentTypeId(i);
            <span class="highlight-keyword">if</span> (treatmentTypeId != ElementId.InvalidElementId)
            {
                EndTreatmentType treatmentType = doc.GetElement(treatmentTypeId) <span class="highlight-keyword">as</span> EndTreatmentType;
                info.AppendLine(<span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"End treatment for bar {0} end {1}: {2}"</span>, n, i, treatmentType.EndTreatment));
            }
        }
    }

    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, info.ToString());
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> ListEndTreatments(doc <span class="highlight-keyword">As</span> Document, bars <span class="highlight-keyword">As</span> List(<span class="highlight-keyword">Of</span> Rebar))
    <span class="highlight-keyword">Dim</span> info <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> StringBuilder()
    <span class="highlight-keyword">For</span> n <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> bars.Count - <span class="highlight-number">1</span>
        <span class="highlight-comment">' get end treatment for both ends of bar</span>
        <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> <span class="highlight-number">1</span>
            <span class="highlight-keyword">Dim</span> treatmentTypeId <span class="highlight-keyword">As</span> ElementId = bars(n).GetEndTreatmentTypeId(i)
            <span class="highlight-keyword">If</span> treatmentTypeId &lt;&gt; ElementId.InvalidElementId <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Dim</span> treatmentType <span class="highlight-keyword">As</span> EndTreatmentType = <span class="highlight-keyword">TryCast</span>(doc.GetElement(treatmentTypeId), EndTreatmentType)
                info.AppendLine(<span class="highlight-keyword">String</span>.Format(<span class="highlight-literal">"End treatment for bar {0} end {1}: {2}"</span>, n, i, treatmentType.EndTreatment))
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">Next</span>
    <span class="highlight-keyword">Next</span>

    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, info.ToString())
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Exceptions
     <a name="exceptionsToggle">
     </a>
    </h1>
    <div class="section" id="exceptionsSection" name="collapseableSection" style="">
     <div class="tableSection">
      <table frame="lhs" width="100%">
       <tbody>
        <tr>
         <th class="exceptionNameColumn">
          Exception
         </th>
         <th class="exceptionConditionColumn">
          Condition
         </th>
        </tr>
        <tr>
         <td>
          <a href="60f148c9-ece0-a6bb-4e12-bb4a9c8c8a24.htm">
           Autodesk.Revit.Exceptions
           ArgumentOutOfRangeException
          </a>
         </td>
         <td>
          end must be 0 or 1.
         </td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="70fd7426-f4a4-591c-8c06-3c18dda45e7d.htm">
       Rebar Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">
       Autodesk.Revit.DB.Structure Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</article>