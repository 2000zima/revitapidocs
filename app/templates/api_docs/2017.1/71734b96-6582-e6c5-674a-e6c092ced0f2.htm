<article id="api-content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="5991dc40-234a-4835-cc06-07524d2e61a4.htm">
       Viewport Class
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Moves this viewport so that the center of the box outline (excluding the viewport label) is at a given point.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 17.0.0.0 (17.0.1090.0)
     <br/>
     <b>
      Since:
     </b>
     2014
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">void</span> <span class="identifier">SetBoxCenter</span>(
	<a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a> <span class="parameter">newCenterPoint</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">SetBoxCenter</span> ( _
	<span class="parameter">newCenterPoint</span> <span class="keyword">As</span> <a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a> _
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<span class="keyword">void</span> <span class="identifier">SetBoxCenter</span>(
	<a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a>^ <span class="parameter">newCenterPoint</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="newCenterPoint">
       <dt>
        <span class="parameter">
         newCenterPoint
        </span>
       </dt>
       <dd>
        Type:
        <a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">
         Autodesk.Revit.DB
         XYZ
        </a>
        <br/>
        The desired center for the box outline.
       </dd>
      </dl>
     </div>
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> PlaceAlignedViewsAtLeftCorner(Document doc)
{
    FilteredElementCollector fec = <span class="highlight-keyword">new</span> FilteredElementCollector(doc);
    fec.OfClass(<span class="highlight-keyword">typeof</span>(ViewPlan));
    var viewPlans = fec.Cast&lt;ViewPlan&gt;().Where&lt;ViewPlan&gt;(vp =&gt; !vp.IsTemplate &amp;&amp; vp.ViewType == ViewType.CeilingPlan);

    ViewPlan vp1 = viewPlans.ElementAt(<span class="highlight-number">0</span>);
    ViewPlan vp2 = viewPlans.ElementAt(<span class="highlight-number">1</span>);

    <span class="highlight-keyword">using</span> (Transaction t = <span class="highlight-keyword">new</span> Transaction(doc, <span class="highlight-literal">"Place on sheet"</span>))
    {
        t.Start();

        <span class="highlight-comment">// Add two viewports distinct from one another</span>
        ViewSheet vs = ViewSheet.Create(doc, ElementId.InvalidElementId);
        Viewport viewport1 = Viewport.Create(doc, vs.Id, vp1.Id, <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>));
        Viewport viewport2 = Viewport.Create(doc, vs.Id, vp2.Id, <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">5</span>, <span class="highlight-number">0</span>));

        doc.Regenerate();

        <span class="highlight-comment">// Calculate the necessary move vector to align the lower left corner</span>
        Outline outline1 = viewport1.GetBoxOutline();
        Outline outline2 = viewport2.GetBoxOutline();
        XYZ boxCenter = viewport2.GetBoxCenter();
        XYZ vectorToCenter = boxCenter - outline2.MinimumPoint;
        XYZ newCenter = outline1.MinimumPoint + vectorToCenter;

        <span class="highlight-comment">// Move the viewport to the new location</span>
        viewport2.SetBoxCenter(newCenter);

        t.Commit();
    }
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> PlaceAlignedViewsAtLeftCorner(doc <span class="highlight-keyword">As</span> Document)
    <span class="highlight-keyword">Dim</span> fec <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(doc)
    fec.OfClass(<span class="highlight-keyword">GetType</span>(ViewPlan))
    <span class="highlight-keyword">Dim</span> viewPlans = fec.Cast(<span class="highlight-keyword">Of</span> ViewPlan)().Where(<span class="highlight-keyword">Function</span>(vp) <span class="highlight-keyword">Not</span> vp.IsTemplate <span class="highlight-keyword">AndAlso</span> vp.ViewType = ViewType.CeilingPlan)

    <span class="highlight-keyword">Dim</span> vp1 <span class="highlight-keyword">As</span> ViewPlan = viewPlans.ElementAt(<span class="highlight-number">0</span>)
    <span class="highlight-keyword">Dim</span> vp2 <span class="highlight-keyword">As</span> ViewPlan = viewPlans.ElementAt(<span class="highlight-number">1</span>)

    <span class="highlight-keyword">Using</span> t <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(doc, <span class="highlight-literal">"Place on sheet"</span>)
        t.Start()

        <span class="highlight-comment">' Add two viewports distinct from one another</span>
        <span class="highlight-keyword">Dim</span> vs <span class="highlight-keyword">As</span> ViewSheet = ViewSheet.Create(doc, ElementId.InvalidElementId)
        <span class="highlight-keyword">Dim</span> viewport1 <span class="highlight-keyword">As</span> Viewport = Viewport.Create(doc, vs.Id, vp1.Id, <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>))
        <span class="highlight-keyword">Dim</span> viewport2 <span class="highlight-keyword">As</span> Viewport = Viewport.Create(doc, vs.Id, vp2.Id, <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">5</span>, <span class="highlight-number">0</span>))

        doc.Regenerate()

        <span class="highlight-comment">' Calculate the necessary move vector to align the lower left corner</span>
        <span class="highlight-keyword">Dim</span> outline1 <span class="highlight-keyword">As</span> Outline = viewport1.GetBoxOutline()
        <span class="highlight-keyword">Dim</span> outline2 <span class="highlight-keyword">As</span> Outline = viewport2.GetBoxOutline()
        <span class="highlight-keyword">Dim</span> boxCenter <span class="highlight-keyword">As</span> XYZ = viewport2.GetBoxCenter()
        <span class="highlight-keyword">Dim</span> vectorToCenter <span class="highlight-keyword">As</span> XYZ = boxCenter - outline2.MinimumPoint
        <span class="highlight-keyword">Dim</span> newCenter <span class="highlight-keyword">As</span> XYZ = outline1.MinimumPoint + vectorToCenter

        <span class="highlight-comment">' Move the viewport to the new location</span>
        viewport2.SetBoxCenter(newCenter)

        t.Commit()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Exceptions
     <a name="exceptionsToggle">
     </a>
    </h1>
    <div class="section" id="exceptionsSection" name="collapseableSection" style="">
     <div class="tableSection">
      <table frame="lhs" width="100%">
       <tbody>
        <tr>
         <th class="exceptionNameColumn">
          Exception
         </th>
         <th class="exceptionConditionColumn">
          Condition
         </th>
        </tr>
        <tr>
         <td>
          <a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">
           Autodesk.Revit.Exceptions
           ArgumentNullException
          </a>
         </td>
         <td>
          A non-optional argument was NULL
         </td>
        </tr>
        <tr>
         <td>
          <a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">
           Autodesk.Revit.Exceptions
           InvalidOperationException
          </a>
         </td>
         <td>
          The viewport is not on a sheet.
         </td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="5991dc40-234a-4835-cc06-07524d2e61a4.htm">
       Viewport Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</article>