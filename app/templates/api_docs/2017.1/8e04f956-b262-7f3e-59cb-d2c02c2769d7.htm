<div class="chm_content">
 <div id="header">
  <table cellpadding="0" cellspacing="0" id="topTable">
   <tbody>
    <tr>
     <td>
      <span>
      </span>
     </td>
    </tr>
   </tbody>
  </table>
  <table cellpadding="0" cellspacing="0" id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="7a3b5ac1-c66d-9f81-a11d-9bcd4e026295.htm">
       Solid Class
      </a>
      <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">
       Example
      </a>
      <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Calculates and returns the intersection between a curve and this solid.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 17.0.0.0 (17.0.1090.0)
     <br/>
     <b>
      Since:
     </b>
     2013
    </p>
    <h1 class="heading">
     Syntax
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <a href="888716e3-376f-c4db-abe3-4e826c799656.htm">SolidCurveIntersection</a> <span class="identifier">IntersectWithCurve</span>(
	<a href="400cc9b6-9ff7-de85-6fd8-c20002209d25.htm">Curve</a> <span class="parameter">curve</span>,
	<a href="fce58e1d-47c7-9afb-d701-ec73d97d0f2b.htm">SolidCurveIntersectionOptions</a> <span class="parameter">options</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">IntersectWithCurve</span> ( _
	<span class="parameter">curve</span> <span class="keyword">As</span> <a href="400cc9b6-9ff7-de85-6fd8-c20002209d25.htm">Curve</a>, _
	<span class="parameter">options</span> <span class="keyword">As</span> <a href="fce58e1d-47c7-9afb-d701-ec73d97d0f2b.htm">SolidCurveIntersectionOptions</a> _
) <span class="keyword">As</span> <a href="888716e3-376f-c4db-abe3-4e826c799656.htm">SolidCurveIntersection</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<a href="888716e3-376f-c4db-abe3-4e826c799656.htm">SolidCurveIntersection</a>^ <span class="identifier">IntersectWithCurve</span>(
	<a href="400cc9b6-9ff7-de85-6fd8-c20002209d25.htm">Curve</a>^ <span class="parameter">curve</span>, 
	<a href="fce58e1d-47c7-9afb-d701-ec73d97d0f2b.htm">SolidCurveIntersectionOptions</a>^ <span class="parameter">options</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="curve">
       <dt>
        <span class="parameter">
         curve
        </span>
       </dt>
       <dd>
        Type:
        <a href="400cc9b6-9ff7-de85-6fd8-c20002209d25.htm">
         Autodesk.Revit.DB
         Curve
        </a>
        <br/>
        The curve.
       </dd>
      </dl>
      <dl paramname="options">
       <dt>
        <span class="parameter">
         options
        </span>
       </dt>
       <dd>
        Type:
        <a href="fce58e1d-47c7-9afb-d701-ec73d97d0f2b.htm">
         Autodesk.Revit.DB
         SolidCurveIntersectionOptions
        </a>
        <br/>
        The options.  If NULL, the default options will be used.
       </dd>
      </dl>
     </div>
     <h4 class="subHeading">
      Return Value
     </h4>
     The intersection results.
    </div>
    <h1 class="heading">
     Examples
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> FindColumnRebarIntersections(Document document, FamilyInstance column)
{
    <span class="highlight-comment">// We will be computing the total length of the rebar inside the column</span>
    <span class="highlight-keyword">double</span> totalRebarLengthInColumn = <span class="highlight-number">0</span>;

    <span class="highlight-comment">// Find rebar hosted by this column</span>
    RebarHostData rebarHostData = RebarHostData.GetRebarHostData(column);
    <span class="highlight-keyword">if</span> (rebarHostData == <span class="highlight-keyword">null</span>)
    {
        <span class="highlight-keyword">return</span>;
    }

    IList&lt;Rebar&gt; rebars = rebarHostData.GetRebarsInHost();
    <span class="highlight-keyword">if</span> (rebars.Count == <span class="highlight-number">0</span>)
    {
        <span class="highlight-keyword">return</span>;
    }

    <span class="highlight-comment">// Retrieve geometry of the column</span>
    Options geomOptions = <span class="highlight-keyword">new</span> Options();
    geomOptions.ComputeReferences = <span class="highlight-keyword">true</span>;
    geomOptions.DetailLevel = ViewDetailLevel.Fine;
    GeometryElement elemGeometry = column.get_Geometry(geomOptions);

    <span class="highlight-comment">// Examine all geometry primitives of the column</span>
    <span class="highlight-keyword">foreach</span> (GeometryObject elemPrimitive <span class="highlight-keyword">in</span> elemGeometry)
    {

        <span class="highlight-comment">// Skip objects that are not geometry instances</span>
        GeometryInstance gInstance = elemPrimitive <span class="highlight-keyword">as</span> GeometryInstance;
        <span class="highlight-keyword">if</span> (gInstance == <span class="highlight-keyword">null</span>)
        {
            <span class="highlight-keyword">continue</span>;
        }

        <span class="highlight-comment">// Retrieve geometry of each found geometry instance</span>
        GeometryElement instGeometry = gInstance.GetInstanceGeometry();
        <span class="highlight-keyword">foreach</span> (GeometryObject instPrimitive <span class="highlight-keyword">in</span> instGeometry)
        {

            <span class="highlight-comment">// Skip non-solid sobject</span>
            Solid solid = instPrimitive <span class="highlight-keyword">as</span> Solid;
            <span class="highlight-keyword">if</span> (solid == <span class="highlight-keyword">null</span>)
            {
                <span class="highlight-keyword">continue</span>;
            }

            SolidCurveIntersectionOptions intersectOptions = <span class="highlight-keyword">new</span> SolidCurveIntersectionOptions();
            <span class="highlight-keyword">foreach</span> (Rebar rebar <span class="highlight-keyword">in</span> rebars)
            {
                <span class="highlight-comment">// Get the centerlines for the rebar to find their intersection with the column</span>
                <span class="highlight-keyword">bool</span> selfIntersection = <span class="highlight-keyword">false</span>;
                <span class="highlight-keyword">bool</span> suppresHooks = <span class="highlight-keyword">false</span>;
                <span class="highlight-keyword">bool</span> suppresBends = <span class="highlight-keyword">false</span>;
                IList&lt;Curve&gt; curves = rebar.GetCenterlineCurves(selfIntersection, suppresHooks, suppresBends, MultiplanarOption.IncludeOnlyPlanarCurves, <span class="highlight-number">0</span>);

                <span class="highlight-comment">// Examine every segment of every curve of the centerline</span>
                <span class="highlight-keyword">foreach</span> (Curve curve <span class="highlight-keyword">in</span> curves)
                {
                    SolidCurveIntersection intersection = solid.IntersectWithCurve(curve, intersectOptions);
                    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> segment = <span class="highlight-number">0</span>; segment &lt;= intersection.SegmentCount - <span class="highlight-number">1</span>; segment++)
                    {
                        <span class="highlight-comment">// Calculate length of the rebar that is inside the column</span>
                        Curve curveInside = intersection.GetCurveSegment(segment);
                        <span class="highlight-keyword">double</span> rebarLengthInColumn = curveInside.Length;
                        totalRebarLengthInColumn = totalRebarLengthInColumn + rebarLengthInColumn;
                    }
                }

            }
        }
    }

}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> FindColumnRebarIntersections(document <span class="highlight-keyword">As</span> Document, column <span class="highlight-keyword">As</span> FamilyInstance)
    <span class="highlight-comment">' We will be computing the total length of the rebar inside the column</span>
    <span class="highlight-keyword">Dim</span> totalRebarLengthInColumn <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = <span class="highlight-number">0</span>

    <span class="highlight-comment">' Find rebar hosted by this column</span>
    <span class="highlight-keyword">Dim</span> rebarHostData__1 <span class="highlight-keyword">As</span> RebarHostData = RebarHostData.GetRebarHostData(column)
    <span class="highlight-keyword">If</span> rebarHostData__1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> rebars <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> Rebar) = rebarHostData__1.GetRebarsInHost()
    <span class="highlight-keyword">If</span> rebars.Count = <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Retrieve geometry of the column</span>
    <span class="highlight-keyword">Dim</span> geomOptions <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Options()
    geomOptions.ComputeReferences = <span class="highlight-keyword">True</span>
    geomOptions.DetailLevel = ViewDetailLevel.Fine
    <span class="highlight-keyword">Dim</span> elemGeometry <span class="highlight-keyword">As</span> GeometryElement = column.Geometry(geomOptions)

    <span class="highlight-comment">' Examine all geometry primitives of the column</span>
    <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> elemPrimitive <span class="highlight-keyword">As</span> GeometryObject <span class="highlight-keyword">In</span> elemGeometry

        <span class="highlight-comment">' Skip objects that are not geometry instances</span>
        <span class="highlight-keyword">Dim</span> gInstance <span class="highlight-keyword">As</span> GeometryInstance = <span class="highlight-keyword">TryCast</span>(elemPrimitive, GeometryInstance)
        <span class="highlight-keyword">If</span> gInstance <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">For</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        <span class="highlight-comment">' Retrieve geometry of each found geometry instance</span>
        <span class="highlight-keyword">Dim</span> instGeometry <span class="highlight-keyword">As</span> GeometryElement = gInstance.GetInstanceGeometry()
        <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> instPrimitive <span class="highlight-keyword">As</span> GeometryObject <span class="highlight-keyword">In</span> instGeometry

            <span class="highlight-comment">' Skip non-solid sobject</span>
            <span class="highlight-keyword">Dim</span> solid <span class="highlight-keyword">As</span> Solid = <span class="highlight-keyword">TryCast</span>(instPrimitive, Solid)
            <span class="highlight-keyword">If</span> solid <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">For</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-keyword">Dim</span> intersectOptions <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> SolidCurveIntersectionOptions()
            <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> rebar <span class="highlight-keyword">As</span> Rebar <span class="highlight-keyword">In</span> rebars
                <span class="highlight-comment">' Get the centerlines for the rebar to find their intersection with the column</span>
                <span class="highlight-keyword">Dim</span> selfIntersection <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>
                <span class="highlight-keyword">Dim</span> suppresHooks <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>
                <span class="highlight-keyword">Dim</span> suppresBends <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>
                <span class="highlight-keyword">Dim</span> curves <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> Curve) = rebar.GetCenterlineCurves(selfIntersection, suppresHooks, suppresBends, MultiplanarOption.IncludeOnlyPlanarCurves, <span class="highlight-number">0</span>)

                <span class="highlight-comment">' Examine every segment of every curve of the centerline</span>
                <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> curve <span class="highlight-keyword">As</span> Curve <span class="highlight-keyword">In</span> curves
                    <span class="highlight-keyword">Dim</span> intersection <span class="highlight-keyword">As</span> SolidCurveIntersection = solid.IntersectWithCurve(curve, intersectOptions)
                    <span class="highlight-keyword">For</span> segment <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> intersection.SegmentCount - <span class="highlight-number">1</span>
                        <span class="highlight-comment">' Calculate length of the rebar that is inside the column</span>
                        <span class="highlight-keyword">Dim</span> curveInside <span class="highlight-keyword">As</span> Curve = intersection.GetCurveSegment(segment)
                        <span class="highlight-keyword">Dim</span> rebarLengthInColumn <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = curveInside.Length
                        totalRebarLengthInColumn = totalRebarLengthInColumn + rebarLengthInColumn
                    <span class="highlight-keyword">Next</span>

                <span class="highlight-keyword">Next</span>
            <span class="highlight-keyword">Next</span>
        <span class="highlight-keyword">Next</span>
    <span class="highlight-keyword">Next</span>

<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Exceptions
    </h1>
    <div class="section" id="exceptionsSection" name="collapseableSection" style="">
     <div class="tableSection">
      <table cellpadding="5" cellspacing="2" frame="lhs" width="100%">
       <tbody>
        <tr>
         <th class="exceptionNameColumn">
          Exception
         </th>
         <th class="exceptionConditionColumn">
          Condition
         </th>
        </tr>
        <tr>
         <td>
          <a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">
           Autodesk.Revit.Exceptions
           ArgumentException
          </a>
         </td>
         <td>
          The input curve is not bound.
   -or-
   The input solid is not a closed volume.
         </td>
        </tr>
        <tr>
         <td>
          <a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">
           Autodesk.Revit.Exceptions
           ArgumentNullException
          </a>
         </td>
         <td>
          A non-optional argument was NULL
         </td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <h1 class="heading">
     See Also
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="7a3b5ac1-c66d-9f81-a11d-9bcd4e026295.htm">
       Solid Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>