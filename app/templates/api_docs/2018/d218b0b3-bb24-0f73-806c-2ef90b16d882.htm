<article id="api-content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="7d0dc6df-db0e-6a07-3b42-8dde1bedb3c1.htm">
       IExportContext Interface
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     This method marks the beginning of an element to be exported.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 18.0.0.0 (18.0.0.420)
     <br/>
     <b>
      Since:
     </b>
     2014
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><a href="39f98799-628b-8d65-765c-ca86949ce7ed.htm">RenderNodeAction</a> <span class="identifier">OnElementBegin</span>(
	<a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a> <span class="parameter">elementId</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Function</span> <span class="identifier">OnElementBegin</span> ( _
	<span class="parameter">elementId</span> <span class="keyword">As</span> <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a> _
) <span class="keyword">As</span> <a href="39f98799-628b-8d65-765c-ca86949ce7ed.htm">RenderNodeAction</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><a href="39f98799-628b-8d65-765c-ca86949ce7ed.htm">RenderNodeAction</a> <span class="identifier">OnElementBegin</span>(
	<a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a>^ <span class="parameter">elementId</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="elementId">
       <dt>
        <span class="parameter">
         elementId
        </span>
       </dt>
       <dd>
        Type:
        <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">
         Autodesk.Revit.DB
         ElementId
        </a>
        <br/>
        The Id of the element that is about to be processed.
       </dd>
      </dl>
     </div>
     <h4 class="subHeading">
      Return Value
     </h4>
     Return RenderNodeAction.Skip if you wish to skip exporting this element,
   or return RenderNodeAction.Proceed otherwise.
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Often it is found beneficial to keep a stack of th element(s)</span>
<span class="highlight-comment">/// currently being processed, so it can be refer to it from other</span>
<span class="highlight-comment">/// methods of the export context.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
Stack&lt;ElementId&gt; m_elementStack = <span class="highlight-keyword">new</span> Stack&lt;ElementId&gt;();

ElementId CurrentElementId()
{
   <span class="highlight-keyword">return</span> (m_elementStack.Count &gt; <span class="highlight-number">0</span>) ? m_elementStack.Peek() : ElementId.InvalidElementId;
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Method that indicates the start of processing an element.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-keyword">public</span> RenderNodeAction OnElementBegin(ElementId elementId)
{
   <span class="highlight-comment">// We may find it useful to remember this element's Id.</span>
   <span class="highlight-comment">// So we can refer to it in methods invoked during the </span>
   <span class="highlight-comment">// export process of this element</span>
   m_elementStack.Push(elementId);

   <span class="highlight-comment">// We can use the element's Id to find out more about the element being processed.</span>
   <span class="highlight-comment">// For example, we can test if the element is a wall; if it is, we can get more</span>
   <span class="highlight-comment">// information about the wall and then we can proceed with the export, which will </span>
   <span class="highlight-comment">// continue with processing geometry of the element. Elements that are not wall</span>
   <span class="highlight-comment">// will be skipped.</span>

   Wall theWall = m_document.GetElement(elementId) <span class="highlight-keyword">as</span> Wall;
   <span class="highlight-keyword">if</span> (theWall != <span class="highlight-keyword">null</span>)
   {
      <span class="highlight-keyword">double</span> wallVolume = theWall.get_Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED).AsDouble();
      <span class="highlight-keyword">return</span> RenderNodeAction.Proceed;
   }
   <span class="highlight-keyword">else</span>
   {
      <span class="highlight-keyword">return</span> RenderNodeAction.Skip;
   }
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Method that indicates the end of processing an element</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> OnElementEnd(ElementId elementId)
{
   <span class="highlight-comment">// Note: this method is invoked even for elements that were skipped.</span>

   m_elementStack.Pop();
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' Often it is found beneficial to keep a stack of th element(s)</span>
<span class="highlight-comment">' currently being processed, so it can be refer to it from other</span>
<span class="highlight-comment">' methods of the export context.</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-keyword">Private</span> m_elementStack <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Stack(<span class="highlight-keyword">Of</span> ElementId)()

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> CurrentElementId() <span class="highlight-keyword">As</span> ElementId
    <span class="highlight-keyword">Return</span> <span class="highlight-keyword">If</span>((m_elementStack.Count &gt; <span class="highlight-number">0</span>), m_elementStack.Peek(), ElementId.InvalidElementId)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' Method that indicates the start of processing an element.</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnElementBegin(elementId <span class="highlight-keyword">As</span> ElementId) <span class="highlight-keyword">As</span> RenderNodeAction <span class="highlight-keyword">Implements</span> IExportContext.OnElementBegin
    <span class="highlight-comment">' We may find it useful to remember this element's Id.</span>
    <span class="highlight-comment">' So we can refer to it in methods invoked during the </span>
    <span class="highlight-comment">' export process of this element</span>
    m_elementStack.Push(elementId)

    <span class="highlight-comment">' We can use the element's Id to find out more about the element being processed.</span>
    <span class="highlight-comment">' For example, we can test if the element is a wall; if it is, we can get more</span>
    <span class="highlight-comment">' information about the wall and then we can proceed with the export, which will </span>
    <span class="highlight-comment">' continue with processing geometry of the element. Elements that are not wall</span>
    <span class="highlight-comment">' will be skipped.</span>


    <span class="highlight-keyword">Dim</span> theWall <span class="highlight-keyword">As</span> Wall = <span class="highlight-keyword">TryCast</span>(m_document.GetElement(elementId), Wall)
    <span class="highlight-keyword">If</span> theWall <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Dim</span> wallVolume <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = theWall.Parameter(BuiltInParameter.HOST_VOLUME_COMPUTED).AsDouble()
        <span class="highlight-keyword">Return</span> RenderNodeAction.Proceed
    <span class="highlight-keyword">Else</span>
        <span class="highlight-keyword">Return</span> RenderNodeAction.Skip
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' Method that indicates the end of processing an element</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> OnElementEnd(elementId <span class="highlight-keyword">As</span> ElementId) <span class="highlight-keyword">Implements</span> IExportContext.OnElementEnd
    <span class="highlight-comment">' Note: this method is invoked even for elements that were skipped.</span>


    m_elementStack.Pop()
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="7d0dc6df-db0e-6a07-3b42-8dde1bedb3c1.htm">
       IExportContext Interface
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</article>