<div class="chm_content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="7d0dc6df-db0e-6a07-3b42-8dde1bedb3c1.htm">
       IExportContext Interface
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     This method is called at the very start of the export process,
   still before the first entity of the model was send out.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 16.0.0.0 (16.0.0.0)
     <br/>
     <b>
      Since:
     </b>
     2014
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">bool</a> <span class="identifier">Start</span>()</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Function</span> <span class="identifier">Start</span> <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">Boolean</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">bool</a> <span class="identifier">Start</span>()</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <h4 class="subHeading">
      Return Value
     </h4>
     Return True if you are ready to proceed with processing the export.
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">// A context would typically maintain a variable for the document being exported</span>
<span class="highlight-keyword">private</span> Document m_document = <span class="highlight-keyword">null</span>;

<span class="highlight-comment">// Some contexts may find it useful to have a flag indicating</span>
<span class="highlight-comment">// whether or not the process should be canceled (see Is</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">bool</span> m_cancelled = <span class="highlight-keyword">false</span>;

<span class="highlight-comment">// Typically, an export context has to manage a stack of transformation</span>
<span class="highlight-comment">// for all nested objects, such as instances, lights, links, etc.</span>
<span class="highlight-keyword">private</span> Stack&lt;Transform&gt; m_TransformationStack = <span class="highlight-keyword">new</span> Stack&lt;Transform&gt;();

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Assuming that instance variables gets initiated in the context's constructor</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="document"&gt;&lt;/param&gt;</span>
<span class="highlight-keyword">public</span> MyExportContext(Document document)
{
   m_document = document;
   m_TransformationStack.Push(Transform.Identity);
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// This method is the starting point of the export process.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;remarks&gt;</span>
<span class="highlight-comment">/// The method is called only once and is typically used to prepare</span>
<span class="highlight-comment">/// the context object, e.g. crate or open the output files,</span>
<span class="highlight-comment">/// or establish a connection to an on-line renderer, etc.</span>
<span class="highlight-comment">/// &lt;/remarks&gt;</span>
<span class="highlight-comment">/// &lt;returns&gt;</span>
<span class="highlight-comment">/// Return true if the export process it good to start.</span>
<span class="highlight-comment">/// &lt;/returns&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> Start()
{
   <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// This method establishes the final point of the export process.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;remarks&gt;</span>
<span class="highlight-comment">/// Resources (such as files, pipes, threads, etc.) used by the context</span>
<span class="highlight-comment">/// should be properly released/closed inside this method.</span>
<span class="highlight-comment">/// &lt;/remarks&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Finish()
{
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// This method is invoked many times during the export process.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;remarks&gt;</span>
<span class="highlight-comment">/// Depending on internal condition of the context, it can be decided</span>
<span class="highlight-comment">/// whether the export is to be immediately canceled or not.</span>
<span class="highlight-comment">/// &lt;/remarks&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> IsCanceled()
{
   <span class="highlight-keyword">return</span> m_cancelled;
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">' A context would typically maintain a variable for the document being exported</span>
<span class="highlight-keyword">Private</span> m_document <span class="highlight-keyword">As</span> Document = <span class="highlight-keyword">Nothing</span>

<span class="highlight-comment">' Some contexts may find it useful to have a flag indicating</span>
<span class="highlight-comment">' whether or not the process should be canceled (see Is</span>
<span class="highlight-keyword">Private</span> m_cancelled <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>

<span class="highlight-comment">' Typically, an export context has to manage a stack of transformation</span>
<span class="highlight-comment">' for all nested objects, such as instances, lights, links, etc.</span>
<span class="highlight-keyword">Private</span> m_TransformationStack <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Stack(<span class="highlight-keyword">Of</span> Transform)()

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' Assuming that instance variables gets initiated in the context's constructor</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;param name="document"&gt;&lt;/param&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>(document <span class="highlight-keyword">As</span> Document)
    m_document = document
    m_TransformationStack.Push(Transform.Identity)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' This method is the starting point of the export process.</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;remarks&gt;</span>
<span class="highlight-comment">' The method is called only once and is typically used to prepare</span>
<span class="highlight-comment">' the context object, e.g. crate or open the output files,</span>
<span class="highlight-comment">' or establish a connection to an on-line renderer, etc.</span>
<span class="highlight-comment">' &lt;/remarks&gt;</span>
<span class="highlight-comment">' &lt;returns&gt;</span>
<span class="highlight-comment">' Return true if the export process it good to start.</span>
<span class="highlight-comment">' &lt;/returns&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> Start() <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> <span class="highlight-keyword">Implements</span> IExportContext.Start
    <span class="highlight-keyword">Return</span> <span class="highlight-keyword">True</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' This method establishes the final point of the export process.</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;remarks&gt;</span>
<span class="highlight-comment">' Resources (such as files, pipes, threads, etc.) used by the context</span>
<span class="highlight-comment">' should be properly released/closed inside this method.</span>
<span class="highlight-comment">' &lt;/remarks&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> Finish() <span class="highlight-keyword">Implements</span> IExportContext.Finish
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' This method is invoked many times during the export process.</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;remarks&gt;</span>
<span class="highlight-comment">' Depending on internal condition of the context, it can be decided</span>
<span class="highlight-comment">' whether the export is to be immediately canceled or not.</span>
<span class="highlight-comment">' &lt;/remarks&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> IsCanceled() <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> <span class="highlight-keyword">Implements</span> IExportContext.IsCanceled
    <span class="highlight-keyword">Return</span> m_cancelled
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="7d0dc6df-db0e-6a07-3b42-8dde1bedb3c1.htm">
       IExportContext Interface
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>