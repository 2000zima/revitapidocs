<div class="chm_content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="82891124-6fb9-e612-ca8c-6f4e32e2c121.htm">
       LoadCombination Class
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Creates a new LoadCombination.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">
      Autodesk.Revit.DB.Structure
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 16.0.0.0 (16.0.0.0)
     <br/>
     <b>
      Since:
     </b>
     2016
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">static</span> <a href="82891124-6fb9-e612-ca8c-6f4e32e2c121.htm">LoadCombination</a> <span class="identifier">Create</span>(
	<a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a> <span class="parameter">document</span>,
	<a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">string</a> <span class="parameter">name</span>,
	<a href="cd4f9fcf-2a5c-b887-4b1f-426df941dcf4.htm">LoadCombinationType</a> <span class="parameter">type</span>,
	<a href="e996d993-abe2-a1f8-a722-aedf6e95cf4a.htm">LoadCombinationState</a> <span class="parameter">state</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">Create</span> ( _
	<span class="parameter">document</span> <span class="keyword">As</span> <a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a>, _
	<span class="parameter">name</span> <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>, _
	<span class="parameter">type</span> <span class="keyword">As</span> <a href="cd4f9fcf-2a5c-b887-4b1f-426df941dcf4.htm">LoadCombinationType</a>, _
	<span class="parameter">state</span> <span class="keyword">As</span> <a href="e996d993-abe2-a1f8-a722-aedf6e95cf4a.htm">LoadCombinationState</a> _
) <span class="keyword">As</span> <a href="82891124-6fb9-e612-ca8c-6f4e32e2c121.htm">LoadCombination</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<span class="keyword">static</span> <a href="82891124-6fb9-e612-ca8c-6f4e32e2c121.htm">LoadCombination</a>^ <span class="identifier">Create</span>(
	<a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a>^ <span class="parameter">document</span>, 
	<a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>^ <span class="parameter">name</span>, 
	<a href="cd4f9fcf-2a5c-b887-4b1f-426df941dcf4.htm">LoadCombinationType</a> <span class="parameter">type</span>, 
	<a href="e996d993-abe2-a1f8-a722-aedf6e95cf4a.htm">LoadCombinationState</a> <span class="parameter">state</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="document">
       <dt>
        <span class="parameter">
         document
        </span>
       </dt>
       <dd>
        Type:
        <a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">
         Autodesk.Revit.DB
         Document
        </a>
        <br/>
        The Document to which new load combination element will be added.
       </dd>
      </dl>
      <dl paramname="name">
       <dt>
        <span class="parameter">
         name
        </span>
       </dt>
       <dd>
        Type:
        <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">
         System
         String
        </a>
        <br/>
        The name of the load combination.
       </dd>
      </dl>
      <dl paramname="type">
       <dt>
        <span class="parameter">
         type
        </span>
       </dt>
       <dd>
        Type:
        <a href="cd4f9fcf-2a5c-b887-4b1f-426df941dcf4.htm">
         Autodesk.Revit.DB.Structure
         LoadCombinationType
        </a>
        <br/>
        The type of the load combination.
       </dd>
      </dl>
      <dl paramname="state">
       <dt>
        <span class="parameter">
         state
        </span>
       </dt>
       <dd>
        Type:
        <a href="e996d993-abe2-a1f8-a722-aedf6e95cf4a.htm">
         Autodesk.Revit.DB.Structure
         LoadCombinationState
        </a>
        <br/>
        The state of the load combination.
       </dd>
      </dl>
     </div>
     <h4 class="subHeading">
      Return Value
     </h4>
     The newly created load combination element if successful,
     <span class="keyword">
     </span>
     <span class="nu">
      a null reference (
      <span class="keyword">
       Nothing
      </span>
      in Visual Basic)
     </span>
     otherwise.
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-preprocessor">#region</span> Autodesk.Revit.DB.Structure.LoadNature.Create(Autodesk.Revit.DB.Document,<span class="highlight-keyword">string</span>)
<span class="highlight-preprocessor">#region</span> Autodesk.Revit.DB.Structure.LoadCase.Create(Autodesk.Revit.DB.Document,<span class="highlight-keyword">string</span>,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.Structure.LoadNatureCategory)
<span class="highlight-preprocessor">#region</span> Autodesk.Revit.DB.Structure.LoadUsage.Create(Autodesk.Revit.DB.Document,<span class="highlight-keyword">string</span>)
<span class="highlight-preprocessor">#region</span> Autodesk.Revit.DB.Structure.LoadComponent.<span class="highlight-preprocessor">#ctor</span>(Autodesk.Revit.DB.ElementId,System.Double)
<span class="highlight-preprocessor">#region</span> Autodesk.Revit.DB.Structure.LoadCombination.SetComponents(System.Collections.Generic.IList{Autodesk.Revit.DB.Structure.LoadComponent})
<span class="highlight-preprocessor">#region</span> Autodesk.Revit.DB.Structure.LoadCombination.SetUsageIds(System.Collections.Generic.IList{Autodesk.Revit.DB.ElementId})
LoadCombination CreateLoadCombinationLoadCaseLoadUsageLoadNatureAndLoadComponent(Document document)
{
    <span class="highlight-comment">// Create a new load combination</span>
    LoadCombination loadCombination = LoadCombination.Create(document, <span class="highlight-literal">"DL1 + RAIN1"</span>, LoadCombinationType.Combination, LoadCombinationState.Ultimate);
    <span class="highlight-keyword">if</span> (loadCombination == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load combination failed."</span>);

    <span class="highlight-comment">// Get all existing LoadCase</span>
    FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
    ICollection&lt;Element&gt; collection = collector.OfClass(<span class="highlight-keyword">typeof</span>(LoadCase)).ToElements();

    <span class="highlight-comment">// Find LoadCase "DL1"</span>
    LoadCase case1 = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">foreach</span> (Element e <span class="highlight-keyword">in</span> collection)
    {
       LoadCase loadCase = e <span class="highlight-keyword">as</span> LoadCase;
       <span class="highlight-keyword">if</span> (loadCase.Name == <span class="highlight-literal">"DL1"</span>)
       {
          case1 = loadCase;
          <span class="highlight-keyword">break</span>;
       }
    }

    <span class="highlight-comment">// Get all existing LoadNature</span>
    collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
    collection = collector.OfClass(<span class="highlight-keyword">typeof</span>(LoadNature)).ToElements();

    <span class="highlight-comment">// Find LoadNature "Dead"</span>
    LoadNature nature1 = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">foreach</span> (Element e <span class="highlight-keyword">in</span> collection)
    {
       LoadNature loadNature = e <span class="highlight-keyword">as</span> LoadNature;
       <span class="highlight-keyword">if</span> (loadNature.Name == <span class="highlight-literal">"Dead"</span>)
       {
          nature1 = loadNature;
          <span class="highlight-keyword">break</span>;
       }
    }

    <span class="highlight-comment">// Create LoadNature "Dead" if not exist</span>
    <span class="highlight-keyword">if</span> (nature1 == <span class="highlight-keyword">null</span>)
       nature1 = LoadNature.Create(document, <span class="highlight-literal">"Dead"</span>);

    <span class="highlight-comment">// Create LoadCase "DL1" if not exist</span>
    <span class="highlight-keyword">if</span> (case1 == <span class="highlight-keyword">null</span>)
       case1 = LoadCase.Create(document, <span class="highlight-literal">"DL1"</span>, nature1.Id, LoadNatureCategory.Dead);

    <span class="highlight-comment">// Create LoadNature "Rain"</span>
    LoadNature nature2 = LoadNature.Create(document, <span class="highlight-literal">"Rain"</span>);
    <span class="highlight-keyword">if</span> (nature2 == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load nature failed."</span>);

    <span class="highlight-comment">// Create LoadCase "RAIN1"</span>
    LoadCase case2 = LoadCase.Create(document, <span class="highlight-literal">"RAIN1"</span>, nature2.Id, LoadNatureCategory.Snow);
    <span class="highlight-keyword">if</span> (case1 == <span class="highlight-keyword">null</span> || case2 == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load case failed."</span>);

    <span class="highlight-comment">// Create LoadComponents - they consist of LoadCases or nested LoadCombination and Factors</span>
    List&lt;LoadComponent&gt; components = <span class="highlight-keyword">new</span> List&lt;LoadComponent&gt;();
    components.Add(<span class="highlight-keyword">new</span> LoadComponent(case1.Id, <span class="highlight-number">2.0</span>));
    components.Add(<span class="highlight-keyword">new</span> LoadComponent(case2.Id, <span class="highlight-number">1.5</span>));

    <span class="highlight-comment">// Add components to combination</span>
    loadCombination.SetComponents(components);

    <span class="highlight-comment">// Create LoadUsages</span>
    LoadUsage usage1 = LoadUsage.Create(document, <span class="highlight-literal">"Frequent"</span>);
    LoadUsage usage2 = LoadUsage.Create(document, <span class="highlight-literal">"Rare"</span>);

    <span class="highlight-keyword">if</span> (usage1 == <span class="highlight-keyword">null</span> || usage2 == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load usage failed."</span>);

    <span class="highlight-comment">// Add load usages to combination</span>
    loadCombination.SetUsageIds(<span class="highlight-keyword">new</span> List&lt;ElementId&gt;() {usage1.Id, usage2.Id});

    <span class="highlight-comment">// Give the user some information</span>
    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, <span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"Load Combination ID='{0}' created successfully."</span>, loadCombination.Id.IntegerValue));

    <span class="highlight-keyword">return</span> loadCombination;
}
<span class="highlight-preprocessor">#endregion</span>
<span class="highlight-preprocessor">#endregion</span>
<span class="highlight-preprocessor">#endregion</span>
<span class="highlight-preprocessor">#endregion</span>
<span class="highlight-preprocessor">#endregion</span>
<span class="highlight-preprocessor">#endregion</span></code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">'#Region "Autodesk.Revit.DB.Structure.LoadNature.Create(Autodesk.Revit.DB.Document,string)"</span>
<span class="highlight-comment">'#Region "Autodesk.Revit.DB.Structure.LoadCase.Create(Autodesk.Revit.DB.Document,string,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.Structure.LoadNatureCategory)"</span>
<span class="highlight-comment">'#Region "Autodesk.Revit.DB.Structure.LoadUsage.Create(Autodesk.Revit.DB.Document,string)"</span>
<span class="highlight-comment">'#Region "Autodesk.Revit.DB.Structure.LoadComponent.#ctor(Autodesk.Revit.DB.ElementId,System.Double)"</span>
<span class="highlight-comment">'#Region "Autodesk.Revit.DB.Structure.LoadCombination.SetComponents(System.Collections.Generic.IList{Autodesk.Revit.DB.Structure.LoadComponent})"</span>
<span class="highlight-comment">'#Region "Autodesk.Revit.DB.Structure.LoadCombination.SetUsageIds(System.Collections.Generic.IList{Autodesk.Revit.DB.ElementId})"</span>
<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> CreateLoadCombinationLoadCaseLoadUsageLoadNatureAndLoadComponent(document <span class="highlight-keyword">As</span> Document) <span class="highlight-keyword">As</span> LoadCombination

   <span class="highlight-comment">' Create a new load combination</span>
   <span class="highlight-keyword">Dim</span> loadCombination <span class="highlight-keyword">As</span> LoadCombination = loadCombination.Create(document, <span class="highlight-literal">"DL1 + RAIN1"</span>, LoadCombinationType.Combination, LoadCombinationState.Ultimate)
   <span class="highlight-keyword">If</span> loadCombination <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load combination failed."</span>)
   <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

   <span class="highlight-comment">' Get all existing LoadCase</span>
   <span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(document)
   <span class="highlight-keyword">Dim</span> collection <span class="highlight-keyword">As</span> ICollection(<span class="highlight-keyword">Of</span> Element) = collector.OfClass(<span class="highlight-keyword">GetType</span>(LoadCase)).ToElements()

   <span class="highlight-comment">' Find LoadCase "DL1"</span>
   <span class="highlight-keyword">Dim</span> case1 <span class="highlight-keyword">As</span> LoadCase = <span class="highlight-keyword">Nothing</span>
   <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> e <span class="highlight-keyword">As</span> Element <span class="highlight-keyword">In</span> collection
      <span class="highlight-keyword">Dim</span> loadCase <span class="highlight-keyword">As</span> LoadCase = <span class="highlight-keyword">TryCast</span>(e, LoadCase)
      <span class="highlight-keyword">If</span> loadCase.Name <span class="highlight-keyword">Is</span> <span class="highlight-literal">"DL1"</span> <span class="highlight-keyword">Then</span>
         case1 = loadCase
         <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
   <span class="highlight-keyword">Next</span>

   <span class="highlight-comment">' Get all existing LoadNature</span>
   collector = <span class="highlight-keyword">New</span> FilteredElementCollector(document)
   collection = collector.OfClass(<span class="highlight-keyword">GetType</span>(LoadCase)).ToElements()

   <span class="highlight-comment">' Find LoadNature "Dead"</span>
   <span class="highlight-keyword">Dim</span> nature1 <span class="highlight-keyword">As</span> LoadNature = <span class="highlight-keyword">Nothing</span>
   <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> e <span class="highlight-keyword">As</span> Element <span class="highlight-keyword">In</span> collection
      <span class="highlight-keyword">Dim</span> loadNature <span class="highlight-keyword">As</span> LoadNature = <span class="highlight-keyword">TryCast</span>(e, LoadNature)
      <span class="highlight-keyword">If</span> loadNature.Name <span class="highlight-keyword">Is</span> <span class="highlight-literal">"Dead"</span> <span class="highlight-keyword">Then</span>
         nature1 = loadNature
         <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
   <span class="highlight-keyword">Next</span>

   <span class="highlight-comment">' Create LoadNature "Dead" if not exist</span>
   <span class="highlight-keyword">If</span> nature1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      nature1 = LoadNature.Create(document, <span class="highlight-literal">"Dead"</span>)
   <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

   <span class="highlight-comment">' Create LoadCase "DL1" if not exist</span>
   <span class="highlight-keyword">If</span> case1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      case1 = LoadCase.Create(document, <span class="highlight-literal">"DL1"</span>, nature1.Id, LoadNatureCategory.Dead)
   <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

   <span class="highlight-comment">' Create LoadNature "Rain"</span>
   <span class="highlight-keyword">Dim</span> nature2 <span class="highlight-keyword">As</span> LoadNature = LoadNature.Create(document, <span class="highlight-literal">"Rain"</span>)
   <span class="highlight-keyword">If</span> nature2 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load nature failed."</span>)
   <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

   <span class="highlight-comment">' Create LoadCase "RAIN1"</span>
   <span class="highlight-keyword">Dim</span> case2 <span class="highlight-keyword">As</span> LoadCase = LoadCase.Create(document, <span class="highlight-literal">"RAIN1"</span>, nature2.Id, LoadNatureCategory.Snow)
   <span class="highlight-keyword">If</span> case1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Or</span> case2 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load case failed."</span>)
   <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

   <span class="highlight-comment">' Create LoadComponents - they consist of LoadCases or nested LoadCombination and Factors</span>
   <span class="highlight-keyword">Dim</span> components <span class="highlight-keyword">As</span> List(<span class="highlight-keyword">Of</span> LoadComponent) = <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> LoadComponent)()
   components.Add(<span class="highlight-keyword">New</span> LoadComponent(case1.Id, <span class="highlight-number">2.0</span>))
   components.Add(<span class="highlight-keyword">New</span> LoadComponent(case2.Id, <span class="highlight-number">1.5</span>))

   <span class="highlight-comment">' Add components to combination</span>
   loadCombination.SetComponents(components)

   <span class="highlight-comment">' Create LoadUsages</span>
   <span class="highlight-keyword">Dim</span> usage1 <span class="highlight-keyword">As</span> LoadUsage = LoadUsage.Create(document, <span class="highlight-literal">"Frequent"</span>)
   <span class="highlight-keyword">Dim</span> usage2 <span class="highlight-keyword">As</span> LoadUsage = LoadUsage.Create(document, <span class="highlight-literal">"Rare"</span>)

   <span class="highlight-keyword">If</span> usage1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Or</span> usage2 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load usage failed."</span>)
   <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

   <span class="highlight-comment">' Add load usages to combination</span>
   loadCombination.SetUsageIds(<span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> ElementId) From {usage1.Id, usage2.Id})

   <span class="highlight-comment">' Give the user some information</span>
   TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, <span class="highlight-keyword">String</span>.Format(<span class="highlight-comment">"Load Combination ID='{0}' created successfully."</span>, loadCombination.Id.IntegerValue))

   <span class="highlight-keyword">Return</span> loadCombination
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-comment">'#End Region</span>
<span class="highlight-comment">'#End Region</span>
<span class="highlight-comment">'#End Region</span>
<span class="highlight-comment">'#End Region</span>
<span class="highlight-comment">'#End Region</span>
<span class="highlight-comment">'#End Region</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Exceptions
     <a name="exceptionsToggle">
     </a>
    </h1>
    <div class="section" id="exceptionsSection" name="collapseableSection" style="">
     <div class="tableSection">
      <table frame="lhs" width="100%">
       <tbody>
        <tr>
         <th class="exceptionNameColumn">
          Exception
         </th>
         <th class="exceptionConditionColumn">
          Condition
         </th>
        </tr>
        <tr>
         <td>
          <a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">
           Autodesk.Revit.Exceptions
           ArgumentNullException
          </a>
         </td>
         <td>
          A non-optional argument was NULL
         </td>
        </tr>
        <tr>
         <td>
          <a href="60f148c9-ece0-a6bb-4e12-bb4a9c8c8a24.htm">
           Autodesk.Revit.Exceptions
           ArgumentOutOfRangeException
          </a>
         </td>
         <td>
          A value passed for an enumeration argument is not a member of that enumeration
         </td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="82891124-6fb9-e612-ca8c-6f4e32e2c121.htm">
       LoadCombination Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="cd856a05-634a-dfaa-f791-837630b3b352.htm">
       Create Overload
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">
       Autodesk.Revit.DB.Structure Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>