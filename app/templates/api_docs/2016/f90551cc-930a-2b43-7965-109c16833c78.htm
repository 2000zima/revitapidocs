<div class="chm_content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="82891124-6fb9-e612-ca8c-6f4e32e2c121.htm">
       LoadCombination Class
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Returns collection of the load combination components.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">
      Autodesk.Revit.DB.Structure
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 16.0.0.0 (16.0.0.0)
     <br/>
     <b>
      Since:
     </b>
     2016
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <a href="http://msdn2.microsoft.com/en-us/library/5y536ey6" target="_blank">IList</a>&lt;<a href="62ee3920-2a87-4fd1-d9e8-af9655d04456.htm">LoadComponent</a>&gt; <span class="identifier">GetComponents</span>()</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">GetComponents</span> <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/5y536ey6" target="_blank">IList</a>(<span class="keyword">Of</span> <a href="62ee3920-2a87-4fd1-d9e8-af9655d04456.htm">LoadComponent</a>)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<a href="http://msdn2.microsoft.com/en-us/library/5y536ey6" target="_blank">IList</a>&lt;<a href="62ee3920-2a87-4fd1-d9e8-af9655d04456.htm">LoadComponent</a>^&gt;^ <span class="identifier">GetComponents</span>()</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <h4 class="subHeading">
      Return Value
     </h4>
     A collection of the load combination components.
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-preprocessor">#region</span> Autodesk.Revit.DB.Structure.LoadCombination.GetUsageIds()
<span class="highlight-keyword">void</span> ModifyLoadCombinationLoadCaseLoadUsageLoadNatureAndLoadComponent(Document document, LoadCombination loadCombination)
{
    <span class="highlight-comment">// Change name of LoadCombination</span>
    loadCombination.Name = <span class="highlight-literal">"DL2 + RAIN1"</span>;

    <span class="highlight-comment">// Get any LoadCase from combination</span>
    <span class="highlight-comment">// Combination can have assigned LoadCase or other (nested) LoadCombination so we need to filter out any LoadCombination</span>
    LoadCase case1 = <span class="highlight-keyword">null</span>;
    IList&lt;ElementId&gt; caseAndCombinationIds = loadCombination.GetCaseAndCombinationIds();
    <span class="highlight-keyword">foreach</span> (ElementId id <span class="highlight-keyword">in</span> caseAndCombinationIds)
    {
        Element element = document.GetElement(id);
        <span class="highlight-keyword">if</span> (element <span class="highlight-keyword">is</span> LoadCase)
        {
           case1 = (LoadCase)element;
           <span class="highlight-keyword">break</span>;
        }
        <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (element <span class="highlight-keyword">is</span> LoadCombination)
        {
           <span class="highlight-keyword">continue</span>;
        }
    }

    <span class="highlight-keyword">if</span> (case1 == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Can't get LoadCase."</span>);

    <span class="highlight-comment">// Change case name and nature category</span>
    case1.Name = <span class="highlight-literal">"DL2"</span>;

    <span class="highlight-comment">// Create load nature</span>
    LoadNature liveNature = LoadNature.Create(document, <span class="highlight-literal">"Dead nature"</span>);
    <span class="highlight-keyword">if</span> (liveNature == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load nature failed."</span>);

    <span class="highlight-comment">// Change nature category and ID for case</span>
    case1.NatureCategory = LoadNatureCategory.Dead;
    case1.NatureId = liveNature.Id;

    <span class="highlight-comment">//Change factor for case1</span>
    IList&lt;LoadComponent&gt; components = loadCombination.GetComponents();
    <span class="highlight-keyword">foreach</span> (LoadComponent loadComponent <span class="highlight-keyword">in</span> components)
    {
        <span class="highlight-keyword">if</span> (loadComponent.LoadCaseOrCombinationId == case1.Id)
        {
            loadComponent.Factor = <span class="highlight-number">3.0</span>;
        }
    }

    loadCombination.SetComponents(components);

    <span class="highlight-comment">// Remove one usage from combination</span>
    IList&lt;ElementId&gt; usages = loadCombination.GetUsageIds();
    usages.RemoveAt(<span class="highlight-number">0</span>);
    loadCombination.SetUsageIds(usages);

    <span class="highlight-comment">// Give the user some information</span>
    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, <span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"Load Combination ID='{0}' modified successfully."</span>, loadCombination.Id.IntegerValue));
}
<span class="highlight-preprocessor">#endregion</span></code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">'#Region "Autodesk.Revit.DB.Structure.LoadCombination.GetUsageIds()"</span>
<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> ModifyLoadCombinationLoadCaseLoadUsageLoadNatureAndLoadComponent(document <span class="highlight-keyword">As</span> Document, loadCombination <span class="highlight-keyword">As</span> LoadCombination)

   <span class="highlight-comment">' Change name of LoadCombination</span>
   loadCombination.Name = <span class="highlight-literal">"DL2 + RAIN1"</span>

   <span class="highlight-comment">' Get any LoadCase from combination</span>
   <span class="highlight-comment">' Combination can have assigned LoadCase or other (nested) LoadCombination so we need to filter out any LoadCombination</span>
   <span class="highlight-keyword">Dim</span> case1 <span class="highlight-keyword">As</span> LoadCase = <span class="highlight-keyword">Nothing</span>
   <span class="highlight-keyword">Dim</span> caseAndCombinationIds <span class="highlight-keyword">As</span> List(<span class="highlight-keyword">Of</span> ElementId) = loadCombination.GetCaseAndCombinationIds()
   <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> id <span class="highlight-keyword">As</span> ElementId <span class="highlight-keyword">In</span> caseAndCombinationIds
      <span class="highlight-keyword">Dim</span> element <span class="highlight-keyword">As</span> Element = document.GetElement(id)

      <span class="highlight-keyword">If</span> <span class="highlight-keyword">TypeOf</span> element <span class="highlight-keyword">Is</span> LoadCase <span class="highlight-keyword">Then</span>
         case1 = element
         <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
      <span class="highlight-keyword">ElseIf</span> <span class="highlight-keyword">TypeOf</span> element <span class="highlight-keyword">Is</span> LoadCombination <span class="highlight-keyword">Then</span>
         <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">For</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
   <span class="highlight-keyword">Next</span>

   <span class="highlight-keyword">If</span> case1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Can't get LoadCase."</span>)
   <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

   <span class="highlight-comment">' Change case name and nature category</span>
   case1.Name = <span class="highlight-literal">"DL2"</span>

   <span class="highlight-comment">' Create load nature</span>
   <span class="highlight-keyword">Dim</span> liveNature <span class="highlight-keyword">As</span> LoadNature = LoadNature.Create(document, <span class="highlight-literal">"Dead nature"</span>)
   <span class="highlight-keyword">If</span> liveNature <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load nature failed."</span>)
   <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

   <span class="highlight-comment">' Change nature category and ID for case</span>
   case1.NatureCategory = LoadNatureCategory.Dead
   case1.NatureId = liveNature.Id

   <span class="highlight-comment">'Change factor for case1</span>
   <span class="highlight-keyword">Dim</span> components <span class="highlight-keyword">As</span> List(<span class="highlight-keyword">Of</span> LoadComponent) = loadCombination.GetComponents()
   <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> loadComponent <span class="highlight-keyword">As</span> LoadComponent <span class="highlight-keyword">In</span> components
      <span class="highlight-keyword">If</span> loadComponent.LoadCaseOrCombinationId <span class="highlight-keyword">Is</span> case1.Id <span class="highlight-keyword">Then</span>
         loadComponent.Factor = <span class="highlight-number">3.0</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
   <span class="highlight-keyword">Next</span>

   loadCombination.SetComponents(components)

   <span class="highlight-comment">' Remove one usage from combination</span>
   <span class="highlight-keyword">Dim</span> usages <span class="highlight-keyword">As</span> List(<span class="highlight-keyword">Of</span> ElementId) = loadCombination.GetUsageIds()
   usages.RemoveAt(<span class="highlight-number">0</span>)
   loadCombination.SetUsageIds(usages)

   <span class="highlight-comment">' Give the user some information</span>
   TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, <span class="highlight-keyword">String</span>.Format(<span class="highlight-comment">"Load Combination ID='{0}' modIfied successfully."</span>, loadCombination.Id.IntegerValue))
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
<span class="highlight-comment">'#End Region</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="82891124-6fb9-e612-ca8c-6f4e32e2c121.htm">
       LoadCombination Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">
       Autodesk.Revit.DB.Structure Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>