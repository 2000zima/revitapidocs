<div class="chm_content">
 <div id="header">
  <table cellpadding="0" cellspacing="0" id="topTable">
   <tbody>
    <tr>
     <td>
      <span>
      </span>
     </td>
    </tr>
   </tbody>
  </table>
  <table cellpadding="0" cellspacing="0" id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="35859972-2407-3910-cb07-bbb337e307e6.htm">
       ControlledApplication Class
      </a>
      <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">
       Example
      </a>
      <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Subscribe to the ViewPrinted event to be notified immediately after Revit has finished printing a view of the document.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="91957e18-2935-006c-83ab-3b5b9dbb5928.htm">
      Autodesk.Revit.ApplicationServices
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 16.0.0.0 (16.0.0.0)
     <br/>
     <b>
      Since:
     </b>
     2010
    </p>
    <h1 class="heading">
     Syntax
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> event <a href="http://msdn2.microsoft.com/en-us/library/db0etb8x" target="_blank">EventHandler</a>&lt;<a href="8d683cd4-c19b-034f-8b42-653b024e7aa4.htm">ViewPrintedEventArgs</a>&gt; <span class="identifier">ViewPrinted</span></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> Event <span class="identifier">ViewPrinted</span> <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/db0etb8x" target="_blank">EventHandler</a>(<span class="keyword">Of</span> <a href="8d683cd4-c19b-034f-8b42-653b024e7aa4.htm">ViewPrintedEventArgs</a>)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
 <span class="keyword">event</span> <a href="http://msdn2.microsoft.com/en-us/library/db0etb8x" target="_blank">EventHandler</a>&lt;<a href="8d683cd4-c19b-034f-8b42-653b024e7aa4.htm">ViewPrintedEventArgs</a>^&gt;^ <span class="identifier">ViewPrinted</span> {
	<span class="keyword">void</span> <span class="keyword">add</span> (<a href="http://msdn2.microsoft.com/en-us/library/db0etb8x" target="_blank">EventHandler</a>&lt;<a href="8d683cd4-c19b-034f-8b42-653b024e7aa4.htm">ViewPrintedEventArgs</a>^&gt;^ <span class="parameter">value</span>);
	<span class="keyword">void</span> <span class="keyword">remove</span> (<a href="http://msdn2.microsoft.com/en-us/library/db0etb8x" target="_blank">EventHandler</a>&lt;<a href="8d683cd4-c19b-034f-8b42-653b024e7aa4.htm">ViewPrintedEventArgs</a>^&gt;^ <span class="parameter">value</span>);
}</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
    </div>
    <h1 class="heading">
     Remarks
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     <p>
      This event is raised immediately after Revit has finished printing a view of the document.
   If multiple views are combined to a single file, this event will be raised only once.
   It is raised even when view printing failed.
     </p>
     <p>
      Handlers of this event are permitted to make modifications to any document (including the active document),
   except for documents that are currently in read-only mode.
     </p>
     <p>
      Check the 'Status' field in event's argument to see whether the action was successful or not.
     </p>
     <p>
      This event is not cancellable, for the process of view printing has already been finished.
     </p>
     <p>
      If the action was not successful, the document may not be modified and new transactions may not be started.
     </p>
     <p>
      The following API functions are not available for the current document during this event:
     </p>
     <ul>
      <li>
       <span class="nolink">
        [!:Autodesk::Revit::DB::Document::Close()]
       </span>
       and similar overloads.
      </li>
     </ul>
     <p>
     </p>
     <p>
      Exception
      <a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">
       InvalidOperationException
      </a>
      will be thrown if any of the above methods is called during this event.
     </p>
    </div>
    <h1 class="heading">
     Examples
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Application_ViewPrinted : IExternalApplication
{
    <span class="highlight-comment">/// &lt;ExampleMethod&gt;</span>
    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// Implement the OnStartup method to register events when Revit starts.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">public</span> Result OnStartup(UIControlledApplication application)
    {
        <span class="highlight-comment">// Register related events</span>
        application.ControlledApplication.ViewPrinted += <span class="highlight-keyword">new</span> EventHandler&lt;Autodesk.Revit.DB.Events.ViewPrintedEventArgs&gt;(AppViewPrinted);
        <span class="highlight-keyword">return</span> Result.Succeeded;
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// Implement this method to unregister the subscribed events when Revit exits.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">public</span> Result OnShutdown(UIControlledApplication application)
    {
        <span class="highlight-comment">// unregister events</span>
       application.ControlledApplication.ViewPrinted -= <span class="highlight-keyword">new</span> EventHandler&lt;Autodesk.Revit.DB.Events.ViewPrintedEventArgs&gt;(AppViewPrinted);
        <span class="highlight-keyword">return</span> Result.Succeeded;
    }
    <span class="highlight-comment">/// &lt;TrivialCode&gt;</span>
    <span class="highlight-comment">/// Code ID: 501</span>
    <span class="highlight-comment">/// For ViewPrinted class description</span>
    <span class="highlight-comment">/// &lt;/TrivialCode&gt;</span>

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// Handler method for ViewPrinting event, it will dump some event arguments. </span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> AppViewPrinted(<span class="highlight-keyword">object</span> sender, Autodesk.Revit.DB.Events.ViewPrintedEventArgs args)
    {
        StringBuilder info = <span class="highlight-keyword">new</span> StringBuilder();
        info.AppendLine(<span class="highlight-literal">"ViewPrintedEventArgs Parameters ------&gt;"</span>);
        info.AppendLine(<span class="highlight-literal">"    Event Status        : "</span> + args.Status);
        info.AppendLine(<span class="highlight-literal">"    TotalViews          : "</span> + args.TotalViews);
        info.AppendLine(<span class="highlight-literal">"    View Index          : "</span> + args.Index);
        info.AppendLine(<span class="highlight-literal">"    View Information    :"</span>);
        DumpViewInfo(args.View, <span class="highlight-literal">"      "</span>, <span class="highlight-keyword">ref</span> info);

        TaskDialog.Show(<span class="highlight-literal">"Revit"</span>,info.ToString());
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// Dump information of single view: ViewType, Id and ViewName.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-comment">/// &lt;param name="view"&gt;View element to be displayed in message box.&lt;/param&gt;</span>
    <span class="highlight-comment">/// &lt;param name="prefix"&gt;Prefix mark for each line added to message box string.&lt;/param&gt;</span>
    <span class="highlight-comment">/// &lt;param name="info"&gt;String where data is stored for display&lt;/param&gt;</span>
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> DumpViewInfo(Autodesk.Revit.DB.View view, String prefix, <span class="highlight-keyword">ref</span> StringBuilder info)
    {
        info.AppendLine(String.Format(<span class="highlight-literal">"{0} Id: {1}, ViewName: {2}, ViewType: {3}"</span>,
            prefix, view.Id.IntegerValue, view.ViewName, view.ViewType));
    }
    <span class="highlight-comment">/// &lt;/ExampleMethod&gt;</span>
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> Application_ViewPrinted
    <span class="highlight-keyword">Implements</span> IExternalApplication
    <span class="highlight-comment">' &lt;ExampleMethod&gt;</span>
    <span class="highlight-comment">' &lt;summary&gt;</span>
    <span class="highlight-comment">' Implement the OnStartup method to register events when Revit starts.</span>
    <span class="highlight-comment">' &lt;/summary&gt;</span>
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnStartup(application <span class="highlight-keyword">As</span> UIControlledApplication) <span class="highlight-keyword">As</span> Autodesk.Revit.UI.Result <span class="highlight-keyword">Implements</span> IExternalApplication.OnStartup
        <span class="highlight-comment">' Register related events</span>
        <span class="highlight-keyword">AddHandler</span> application.ControlledApplication.ViewPrinted, <span class="highlight-keyword">AddressOf</span> AppViewPrinted
        <span class="highlight-keyword">Return</span> Result.Succeeded
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

    <span class="highlight-comment">' &lt;summary&gt;</span>
    <span class="highlight-comment">' Implement this method to unregister the subscribed events when Revit exits.</span>
    <span class="highlight-comment">' &lt;/summary&gt;</span>
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnShutdown(application <span class="highlight-keyword">As</span> UIControlledApplication) <span class="highlight-keyword">As</span> Autodesk.Revit.UI.Result <span class="highlight-keyword">Implements</span> IExternalApplication.OnShutdown
        <span class="highlight-comment">' unregister events</span>
        <span class="highlight-keyword">RemoveHandler</span> application.ControlledApplication.ViewPrinted, <span class="highlight-keyword">AddressOf</span> AppViewPrinted
        <span class="highlight-keyword">Return</span> Result.Succeeded
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
    <span class="highlight-comment">' &lt;TrivialCode&gt;</span>
    <span class="highlight-comment">' Code ID: 501</span>
    <span class="highlight-comment">' For ViewPrinted class description</span>
    <span class="highlight-comment">' &lt;/TrivialCode&gt;</span>


    <span class="highlight-comment">' &lt;summary&gt;</span>
    <span class="highlight-comment">' Handler method for ViewPrinting event, it will dump some event arguments. </span>
    <span class="highlight-comment">' &lt;/summary&gt;</span>
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> AppViewPrinted(sender <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, args <span class="highlight-keyword">As</span> Autodesk.Revit.DB.Events.ViewPrintedEventArgs)
        <span class="highlight-keyword">Dim</span> info <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> StringBuilder()
        info.AppendLine(<span class="highlight-literal">"ViewPrintedEventArgs Parameters ------&gt;"</span>)
        info.AppendLine(<span class="highlight-literal">"    Event Status        : "</span> &amp; Convert.ToString(args.Status))
        info.AppendLine(<span class="highlight-literal">"    TotalViews          : "</span> &amp; Convert.ToString(args.TotalViews))
        info.AppendLine(<span class="highlight-literal">"    View Index          : "</span> &amp; Convert.ToString(args.Index))
        info.AppendLine(<span class="highlight-literal">"    View Information    :"</span>)
        DumpViewInfo(args.View, <span class="highlight-literal">"      "</span>, info)

        TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, info.ToString())
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

    <span class="highlight-comment">' &lt;summary&gt;</span>
    <span class="highlight-comment">' Dump information of single view: ViewType, Id and ViewName.</span>
    <span class="highlight-comment">' &lt;/summary&gt;</span>
    <span class="highlight-comment">' &lt;param name="view"&gt;View element to be displayed in message box.&lt;/param&gt;</span>
    <span class="highlight-comment">' &lt;param name="prefix"&gt;Prefix mark for each line added to message box string.&lt;/param&gt;</span>
    <span class="highlight-comment">' &lt;param name="info"&gt;String where data is stored for display&lt;/param&gt;</span>
    <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> DumpViewInfo(view <span class="highlight-keyword">As</span> Autodesk.Revit.DB.View, prefix <span class="highlight-keyword">As</span> [<span class="highlight-keyword">String</span>], <span class="highlight-keyword">ByRef</span> info <span class="highlight-keyword">As</span> StringBuilder)
        info.AppendLine([<span class="highlight-keyword">String</span>].Format(<span class="highlight-literal">"{0} Id: {1}, ViewName: {2}, ViewType: {3}"</span>, prefix, view.Id.IntegerValue, view.ViewName, view.ViewType))
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
    <span class="highlight-comment">' &lt;/ExampleMethod&gt;</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     See Also
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="35859972-2407-3910-cb07-bbb337e307e6.htm">
       ControlledApplication Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="91957e18-2935-006c-83ab-3b5b9dbb5928.htm">
       Autodesk.Revit.ApplicationServices Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>