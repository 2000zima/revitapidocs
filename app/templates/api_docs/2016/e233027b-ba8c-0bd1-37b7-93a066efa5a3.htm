<div class="chm_content">
 <div id="header">
  <table cellpadding="0" cellspacing="0" id="topTable">
   <tbody>
    <tr>
     <td>
      <span>
      </span>
     </td>
    </tr>
   </tbody>
  </table>
  <table cellpadding="0" cellspacing="0" id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="4638c568-a118-1d57-ceed-a57595202644.htm">
       UIControlledApplication Class
      </a>
      <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">
       Example
      </a>
      <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Subscribe to the Idling event to be notified when Revit is not in an active tool or transaction.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="e86fd90a-8957-02a6-da7f-ced248966e3e.htm">
      Autodesk.Revit.UI
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPIUI
     </span>
     (in RevitAPIUI.dll) Version: 16.0.0.0 (16.0.0.0)
     <br/>
     <b>
      Since:
     </b>
     2010
    </p>
    <h1 class="heading">
     Syntax
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> event <a href="http://msdn2.microsoft.com/en-us/library/db0etb8x" target="_blank">EventHandler</a>&lt;<a href="92e2300b-b4b1-af35-221a-cfbeb22c8705.htm">IdlingEventArgs</a>&gt; <span class="identifier">Idling</span></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> Event <span class="identifier">Idling</span> <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/db0etb8x" target="_blank">EventHandler</a>(<span class="keyword">Of</span> <a href="92e2300b-b4b1-af35-221a-cfbeb22c8705.htm">IdlingEventArgs</a>)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
 <span class="keyword">event</span> <a href="http://msdn2.microsoft.com/en-us/library/db0etb8x" target="_blank">EventHandler</a>&lt;<a href="92e2300b-b4b1-af35-221a-cfbeb22c8705.htm">IdlingEventArgs</a>^&gt;^ <span class="identifier">Idling</span> {
	<span class="keyword">void</span> <span class="keyword">add</span> (<a href="http://msdn2.microsoft.com/en-us/library/db0etb8x" target="_blank">EventHandler</a>&lt;<a href="92e2300b-b4b1-af35-221a-cfbeb22c8705.htm">IdlingEventArgs</a>^&gt;^ <span class="parameter">value</span>);
	<span class="keyword">void</span> <span class="keyword">remove</span> (<a href="http://msdn2.microsoft.com/en-us/library/db0etb8x" target="_blank">EventHandler</a>&lt;<a href="92e2300b-b4b1-af35-221a-cfbeb22c8705.htm">IdlingEventArgs</a>^&gt;^ <span class="parameter">value</span>);
}</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
    </div>
    <h1 class="heading">
     Remarks
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     <p>
      This event is raised when it is safe for the API application to access the active
   document between user interactions. The event is raised only when the Revit UI is
   in a state where the user could successfully click on an API command button.
     </p>
     <p>
      Handlers of this event are permitted to make modifications to any document (including the active document),
   except for documents that are currently in read-only mode.
     </p>
     <p>
      In order to change a document, you must begin a new transaction for that document.
   This transaction will appear in the Revit undo stack and may be undone by the Revit user.
     </p>
     <p>
      This event is invoked between user actions in the Revit UI. If the handler for
   this event requires a significant amount of processing time, users will perceive a slowdown
   in the responsiveness of Revit. If the execution for updates can be safely split across
   multiple calls to this event, the user perception of Revit responsiveness will be improved.
     </p>
     <p>
      There are two ways to use this event.  In the default mode, a single raise of the event
   will be made each time Revit begins an idle session.  Note that when the user is active in the Revit
   user interface, idle sessions begin whenever the mouse stops moving for a moment or when a
   command completes.  However, if the user is not active in the user interface at all, Revit may not invoke
   additional idling sessions for quite some time; this means that your application may not be able to take advantage
   of time when the user leaves the machine completely for a period of time.
     </p>
     <p>
      In the non-default mode, your application forces Revit to keep the idling session open and to make
   repeated calls to your event subscriber.  In this mode even if the user is totally inactive the Revit
   session will continue to make Idling calls to your application.  However, this can result in performance
   degradation for the system on which Revit is running because the CPU remains fully engaged in serving Idling
   events during the Revit application's downtime.
     </p>
     <p>
      You can indicate the preference for the non-default Idling frequency by calling
      <a href="6ead2453-9221-9044-0d93-84cc7db00b0d.htm">
       SetRaiseWithoutDelay
      </a>
      each time the Idling event callback is made.  Revit will revert to the default Idling frequency
   if this method is not called every time in your callback.
     </p>
     <p>
      Event is not cancellable.
     </p>
    </div>
    <h1 class="heading">
     Examples
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">// Create a text note and update it once per second while Revit is idle</span>
TextNote textNote = <span class="highlight-keyword">null</span>;
String oldDateTime = <span class="highlight-keyword">null</span>;
<span class="highlight-keyword">public</span> Result Execute(ExternalCommandData commandData, <span class="highlight-keyword">ref</span> <span class="highlight-keyword">string</span> message, ElementSet elements)
{
    UIApplication uiApp = <span class="highlight-keyword">new</span> UIApplication(commandData.Application.Application);
    Document doc = commandData.Application.ActiveUIDocument.Document;
    <span class="highlight-keyword">using</span> (Transaction t = <span class="highlight-keyword">new</span> Transaction(doc, <span class="highlight-literal">"Text Note Creation"</span>))
    {
       t.Start();
       oldDateTime = DateTime.Now.ToString();
       ElementId defaultTextTypeId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType);
       textNote = TextNote.Create(doc, doc.ActiveView.Id, XYZ.Zero, oldDateTime, defaultTextTypeId);
       t.Commit();
    }
    uiApp.Idling += <span class="highlight-keyword">new</span> EventHandler&lt;IdlingEventArgs&gt;(idleUpdate);
    <span class="highlight-keyword">return</span> Result.Succeeded;
}
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> idleUpdate(<span class="highlight-keyword">object</span> sender, IdlingEventArgs e)
{
    UIApplication uiApp = sender <span class="highlight-keyword">as</span> UIApplication;
    Document doc = uiApp.ActiveUIDocument.Document;
    <span class="highlight-keyword">if</span> (oldDateTime != DateTime.Now.ToString())
    {
        <span class="highlight-keyword">using</span> (Transaction transaction = <span class="highlight-keyword">new</span> Transaction(doc, <span class="highlight-literal">"Text Note Update"</span>))
        {
           transaction.Start();
           textNote.Text = DateTime.Now.ToString();
           transaction.Commit();
        }
        oldDateTime = DateTime.Now.ToString();
    }
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">' Create a text note and update it once per second while Revit is idle</span>
<span class="highlight-keyword">Private</span> textNote <span class="highlight-keyword">As</span> TextNote = <span class="highlight-keyword">Nothing</span>
<span class="highlight-keyword">Private</span> oldDateTime <span class="highlight-keyword">As</span> [<span class="highlight-keyword">String</span>] = <span class="highlight-keyword">Nothing</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> Execute(commandData <span class="highlight-keyword">As</span> ExternalCommandData, <span class="highlight-keyword">ByRef</span> message <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>, elements <span class="highlight-keyword">As</span> ElementSet) <span class="highlight-keyword">As</span> Autodesk.Revit.UI.Result <span class="highlight-keyword">Implements</span> IExternalCommand.Execute
    <span class="highlight-keyword">Dim</span> uiApp <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> UIApplication(commandData.Application.Application)
    <span class="highlight-keyword">Dim</span> doc <span class="highlight-keyword">As</span> Document = commandData.Application.ActiveUIDocument.Document
    <span class="highlight-keyword">Using</span> t <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(doc, <span class="highlight-literal">"Text Note Creation"</span>)
        t.Start()
        oldDateTime = DateTime.Now.ToString()
        <span class="highlight-keyword">Dim</span> defaultTextTypeId <span class="highlight-keyword">As</span> ElementId = doc.GetDefaultElementTypeId(ElementTypeGroup.TextNoteType)
        textNote = textNote.Create(doc, doc.ActiveView.Id, XYZ.Zero, oldDateTime, defaultTextTypeId)
        t.Commit()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
    <span class="highlight-keyword">AddHandler</span> uiApp.Idling, <span class="highlight-keyword">AddressOf</span> idleUpdate
    <span class="highlight-keyword">Return</span> Result.Succeeded
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> idleUpdate(sender <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, e <span class="highlight-keyword">As</span> IdlingEventArgs)
    <span class="highlight-keyword">Dim</span> uiApp <span class="highlight-keyword">As</span> UIApplication = <span class="highlight-keyword">TryCast</span>(sender, UIApplication)
    <span class="highlight-keyword">Dim</span> doc <span class="highlight-keyword">As</span> Document = uiApp.ActiveUIDocument.Document
    <span class="highlight-keyword">If</span> oldDateTime &lt;&gt; DateTime.Now.ToString() <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Using</span> transaction <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(doc, <span class="highlight-literal">"Text Note Update"</span>)
            transaction.Start()
            textNote.Text = DateTime.Now.ToString()
            transaction.Commit()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
        oldDateTime = DateTime.Now.ToString()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     See Also
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="4638c568-a118-1d57-ceed-a57595202644.htm">
       UIControlledApplication Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="e86fd90a-8957-02a6-da7f-ced248966e3e.htm">
       Autodesk.Revit.UI Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>