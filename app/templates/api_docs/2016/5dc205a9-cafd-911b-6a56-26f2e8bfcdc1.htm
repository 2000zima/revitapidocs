<div class="chm_content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="09dbcdc8-e3b9-35d3-34aa-977e3119e3d8.htm">
       Members
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     An object that represents a force applied across an area.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">
      Autodesk.Revit.DB.Structure
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 16.0.0.0 (16.0.0.0)
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">AreaLoad</span> : <a href="4130f6dc-1963-2105-d85b-e08a7c34af8b.htm">LoadBase</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">AreaLoad</span> _
	<span class="keyword">Inherits</span> <a href="4130f6dc-1963-2105-d85b-e08a7c34af8b.htm">LoadBase</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">AreaLoad</span> : <span class="keyword">public</span> <a href="4130f6dc-1963-2105-d85b-e08a7c34af8b.htm">LoadBase</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> GetInfo_AreaLoad(AreaLoad areaLoad)
{
    <span class="highlight-keyword">string</span> message = <span class="highlight-literal">"AreaLoad Force : "</span>;
    <span class="highlight-comment">// Get areaload force1 position</span>
    message += <span class="highlight-literal">"\nAreaLoad Force1 position :("</span> + areaLoad.ForceVector1.X + <span class="highlight-literal">", "</span>
        + areaLoad.ForceVector1.Y + <span class="highlight-literal">", "</span> + areaLoad.ForceVector1.Z + <span class="highlight-literal">")"</span>;
    <span class="highlight-comment">// Get areaload force2 position</span>
    message += <span class="highlight-literal">"\nAreaLoad Force2 position :("</span> + areaLoad.ForceVector2.X + <span class="highlight-literal">", "</span>
        + areaLoad.ForceVector2.Y + <span class="highlight-literal">", "</span> + areaLoad.ForceVector2.Z + <span class="highlight-literal">")"</span>;
    <span class="highlight-comment">// Get areaload force3 position</span>
    message += <span class="highlight-literal">"\nAreaLoad Force3 position :("</span> + areaLoad.ForceVector3.X + <span class="highlight-literal">", "</span>
        + areaLoad.ForceVector3.Y + <span class="highlight-literal">", "</span> + areaLoad.ForceVector3.Z + <span class="highlight-literal">")"</span>;

    <span class="highlight-comment">// Get Loops</span>
    <span class="highlight-keyword">int</span> loopIndex = <span class="highlight-number">0</span>;
    <span class="highlight-keyword">foreach</span> (CurveLoop curveLoop <span class="highlight-keyword">in</span> areaLoad.GetLoops())
    {
       message += <span class="highlight-literal">"\nLoop "</span> + loopIndex + <span class="highlight-literal">" consist of following points :"</span>;
       <span class="highlight-keyword">foreach</span> (Curve curve <span class="highlight-keyword">in</span> curveLoop)
       {
          message += <span class="highlight-literal">" ("</span> + curve.GetEndPoint(<span class="highlight-number">0</span>).X + <span class="highlight-literal">", "</span> + curve.GetEndPoint(<span class="highlight-number">0</span>).Y + <span class="highlight-literal">", "</span> + curve.GetEndPoint(<span class="highlight-number">0</span>).Z + <span class="highlight-literal">")"</span>;
       }
       loopIndex++;
    }

    <span class="highlight-comment">// Get ref points information</span>
    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> k = <span class="highlight-number">0</span>; k &lt; areaLoad.NumRefPoints; k++)
    {
        <span class="highlight-comment">// Get areaload Ref point</span>
        message += <span class="highlight-literal">"\nAreaLoad Ref point :("</span> + areaLoad.GetRefPoint(k).X + <span class="highlight-literal">", "</span>
            + areaLoad.GetRefPoint(k).Y + <span class="highlight-literal">", "</span> + areaLoad.GetRefPoint(k).Z + <span class="highlight-literal">")"</span>;
    }
    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>,message);
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> GetInfo_AreaLoad(areaLoad <span class="highlight-keyword">As</span> AreaLoad)
    <span class="highlight-keyword">Dim</span> message <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"AreaLoad Force : "</span>
    <span class="highlight-comment">' Get areaload force1 position</span>
 message += vbLf &amp; <span class="highlight-literal">"AreaLoad Force1 position :("</span> &amp; Convert.ToString(areaLoad.ForceVector1.X) &amp; <span class="highlight-literal">", "</span> &amp; Convert.ToString(areaLoad.ForceVector1.Y) &amp; <span class="highlight-literal">", "</span> &amp; Convert.ToString(areaLoad.ForceVector1.Z) &amp; <span class="highlight-literal">")"</span>
    <span class="highlight-comment">' Get areaload force2 position</span>
 message += vbLf &amp; <span class="highlight-literal">"AreaLoad Force2 position :("</span> &amp; Convert.ToString(areaLoad.ForceVector2.X) &amp; <span class="highlight-literal">", "</span> &amp; Convert.ToString(areaLoad.ForceVector2.Y) &amp; <span class="highlight-literal">", "</span> &amp; Convert.ToString(areaLoad.ForceVector2.Z) &amp; <span class="highlight-literal">")"</span>
    <span class="highlight-comment">' Get areaload force3 position</span>
 message += vbLf &amp; <span class="highlight-literal">"AreaLoad Force3 position :("</span> &amp; Convert.ToString(areaLoad.ForceVector3.X) &amp; <span class="highlight-literal">", "</span> &amp; Convert.ToString(areaLoad.ForceVector3.Y) &amp; <span class="highlight-literal">", "</span> &amp; Convert.ToString(areaLoad.ForceVector3.Z) &amp; <span class="highlight-literal">")"</span>

    <span class="highlight-comment">' Get Loops</span>
    <span class="highlight-keyword">Dim</span> loopIndex <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
    <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> curveLoop <span class="highlight-keyword">As</span> CurveLoop <span class="highlight-keyword">In</span> areaLoad.GetLoops()
        message += vbLf &amp; <span class="highlight-literal">"Loop "</span> +  loopIndex + <span class="highlight-literal">" consist of following points :"</span>
        <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> curve <span class="highlight-keyword">As</span> Autodesk.Revit.DB.Curve <span class="highlight-keyword">In</span> curveLoop
            message += ((<span class="highlight-literal">" ("</span> + curve.GetEndPoint(<span class="highlight-number">0</span>).X &amp; <span class="highlight-literal">", "</span>) + curve.GetEndPoint(<span class="highlight-number">0</span>).Y &amp; <span class="highlight-literal">", "</span>) + curve.GetEndPoint(<span class="highlight-number">0</span>).Z &amp; <span class="highlight-literal">")"</span>
        <span class="highlight-keyword">Next</span>
         loopIndex =  loopIndex + <span class="highlight-number">1</span>
    <span class="highlight-keyword">Next</span>

    <span class="highlight-comment">' Get ref points information</span>
    <span class="highlight-keyword">For</span> k <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> areaLoad.NumRefPoints - <span class="highlight-number">1</span>
        <span class="highlight-comment">' Get areaload Ref point</span>
        message += ((vbLf &amp; <span class="highlight-literal">"AreaLoad Ref point :("</span> + areaLoad.GetRefPoint(k).X &amp; <span class="highlight-literal">", "</span>) + areaLoad.GetRefPoint(k).Y &amp; <span class="highlight-literal">", "</span>) + areaLoad.GetRefPoint(k).Z &amp; <span class="highlight-literal">")"</span>
    <span class="highlight-keyword">Next</span>
    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, message)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Inheritance Hierarchy
     <a name="familyToggle">
     </a>
    </h1>
    <div class="section" id="familySection" name="collapseableSection" style="">
     <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">
      System
      Object
     </a>
     <br/>
     <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">
      Autodesk.Revit.DB
      Element
     </a>
     <br/>
     <a href="4130f6dc-1963-2105-d85b-e08a7c34af8b.htm">
      Autodesk.Revit.DB.Structure
      LoadBase
     </a>
     <br/>
     <span class="selflink">
      Autodesk.Revit.DB.Structure
      AreaLoad
     </span>
     <br/>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="09dbcdc8-e3b9-35d3-34aa-977e3119e3d8.htm">
       AreaLoad Members
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">
       Autodesk.Revit.DB.Structure Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>