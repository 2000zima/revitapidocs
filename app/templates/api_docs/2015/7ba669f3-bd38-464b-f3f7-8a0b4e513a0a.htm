<div class="chm_content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="f7cc505f-1a17-881e-7859-adc21fb8d6e4.htm">
       Members
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Represents the rendering settings for a 3d view.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
     <br/>
     <b>
      Since:
     </b>
     2013
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">RenderingSettings</span> : <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">RenderingSettings</span> _
	<span class="keyword">Implements</span> <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">RenderingSettings</span> : <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> GetRenderingSettingsData(View3D view3D)
{
    RenderingSettings renderingSettings = view3D.GetRenderingSettings();

    <span class="highlight-comment">// get print or screen resolution data</span>
    <span class="highlight-keyword">if</span> (renderingSettings.ResolutionTarget == ResolutionTarget.Printer) <span class="highlight-comment">// for print resolution</span>
    {
        PrinterResolution printResolution = renderingSettings.PrinterResolution;
        <span class="highlight-keyword">int</span> resolutionValue = renderingSettings.ResolutionValue;
    }
    <span class="highlight-keyword">else</span>    <span class="highlight-comment">// for screen resolution</span>
    {
        <span class="highlight-keyword">int</span> resolutionValue = renderingSettings.ResolutionValue;
    }

    <span class="highlight-comment">// Get the outline of the rendering region. </span>
    renderingSettings.UsesRegionRendering = <span class="highlight-keyword">true</span>;
    Outline regionOutline = renderingSettings.GetRenderingRegionOutline();
    XYZ max = regionOutline.MaximumPoint;
    XYZ min = regionOutline.MinimumPoint;

    <span class="highlight-comment">// get lighting information.</span>
    renderingSettings.LightingSource = LightingSource.ExteriorSun; <span class="highlight-comment">// set lighting scheme type</span>
    <span class="highlight-comment">// Please note that the sun setting has been exposed in View.SunAndShadowSettings property already.</span>
    SunAndShadowSettings sunSettings = view3D.SunAndShadowSettings;

    <span class="highlight-comment">// get the background setting data</span>
    <span class="highlight-keyword">switch</span> (renderingSettings.BackgroundStyle)
    {
        <span class="highlight-keyword">case</span> BackgroundStyle.Color: <span class="highlight-comment">// for color style</span>
            ColorBackgroundSettings colorBKSettings = renderingSettings.GetBackgroundSettings() <span class="highlight-keyword">as</span> ColorBackgroundSettings;
            Color bkColor = colorBKSettings.Color;
            <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> BackgroundStyle.Image: <span class="highlight-comment">// for image style</span>
            ImageBackgroundSettings imageBKSettings = renderingSettings.GetBackgroundSettings() <span class="highlight-keyword">as</span> ImageBackgroundSettings;
            BackgroundImageFit imageFit = imageBKSettings.BackgroundImageFit;
            <span class="highlight-keyword">string</span> filePath = imageBKSettings.FilePath;
            <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> BackgroundStyle.SkyCloudy: <span class="highlight-comment">// for sky related styles</span>
        <span class="highlight-keyword">case</span> BackgroundStyle.SkyFewClouds:
        <span class="highlight-keyword">case</span> BackgroundStyle.SkyNoClouds:
        <span class="highlight-keyword">case</span> BackgroundStyle.SkyVeryCloudy:
        <span class="highlight-keyword">case</span> BackgroundStyle.SkyVeryFewClouds:
            SkyBackgroundSettings skyBKSettings = renderingSettings.GetBackgroundSettings() <span class="highlight-keyword">as</span> SkyBackgroundSettings;
            <span class="highlight-keyword">float</span> visibilityDis = skyBKSettings.VisibilityDistance;
            <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">default</span>:
            <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> InvalidOperationException(<span class="highlight-literal">"Not expected background style"</span>);
    }

    <span class="highlight-comment">// Get the rendering image exposure settings</span>
    RenderingImageExposureSettings exposureSettings = renderingSettings.GetRenderingImageExposureSettings();
    <span class="highlight-keyword">double</span> imageShadows = exposureSettings.Shadows;

    <span class="highlight-comment">// Get the rendering quality settings</span>
    RenderingQualitySettings qualitySettings = renderingSettings.GetRenderingQualitySettings();
    RenderingQuality qualitySytle = qualitySettings.RenderingQuality;   <span class="highlight-comment">// get rendering quality enum</span>
    <span class="highlight-keyword">if</span>(qualitySytle == RenderingQuality.Custom)
    {
        <span class="highlight-comment">// The user can set the data only in custom quality</span>
        qualitySettings.ImagePrecision = <span class="highlight-number">1</span>;
    }
    <span class="highlight-keyword">else</span>
    {
        <span class="highlight-comment">// Different property value is retruned according to its rendering quality style.</span>
        <span class="highlight-comment">// Take ImagePrecision property for example, it returns 1 for Draft quality and returns 2 for low quality.</span>
        <span class="highlight-keyword">int</span> imagePrecision = qualitySettings.ImagePrecision;
    }
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> GetRenderingSettingsData(view3D <span class="highlight-keyword">As</span> View3D)
    <span class="highlight-keyword">Dim</span> renderingSettings <span class="highlight-keyword">As</span> RenderingSettings = view3D.GetRenderingSettings()

    <span class="highlight-comment">' get print or screen resolution data</span>
    <span class="highlight-keyword">If</span> renderingSettings.ResolutionTarget = ResolutionTarget.Printer <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' for print resolution</span>
        <span class="highlight-keyword">Dim</span> printResolution <span class="highlight-keyword">As</span> PrinterResolution = renderingSettings.PrinterResolution
        <span class="highlight-keyword">Dim</span> resolutionValue <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = renderingSettings.ResolutionValue
    <span class="highlight-keyword">Else</span>
        <span class="highlight-comment">' for screen resolution</span>
        <span class="highlight-keyword">Dim</span> resolutionValue <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = renderingSettings.ResolutionValue
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Get the outline of the rendering region. </span>
    renderingSettings.UsesRegionRendering = <span class="highlight-keyword">True</span>
    <span class="highlight-keyword">Dim</span> regionOutline <span class="highlight-keyword">As</span> Outline = renderingSettings.GetRenderingRegionOutline()
    <span class="highlight-keyword">Dim</span> max <span class="highlight-keyword">As</span> XYZ = regionOutline.MaximumPoint
    <span class="highlight-keyword">Dim</span> min <span class="highlight-keyword">As</span> XYZ = regionOutline.MinimumPoint

    <span class="highlight-comment">' get lighting information.</span>
    renderingSettings.LightingSource = LightingSource.ExteriorSun
    <span class="highlight-comment">' set lighting scheme type</span>
    <span class="highlight-comment">' Please note that the sun setting has been exposed in View.SunAndShadowSettings property already.</span>
    <span class="highlight-keyword">Dim</span> sunSettings <span class="highlight-keyword">As</span> SunAndShadowSettings = view3D.SunAndShadowSettings

    <span class="highlight-comment">' get the background setting data</span>
    <span class="highlight-keyword">Select</span> <span class="highlight-keyword">Case</span> renderingSettings.BackgroundStyle
        <span class="highlight-keyword">Case</span> BackgroundStyle.Color
            <span class="highlight-comment">' for color style</span>
            <span class="highlight-keyword">Dim</span> colorBKSettings <span class="highlight-keyword">As</span> ColorBackgroundSettings = <span class="highlight-keyword">TryCast</span>(renderingSettings.GetBackgroundSettings(), ColorBackgroundSettings)
            <span class="highlight-keyword">Dim</span> bkColor <span class="highlight-keyword">As</span> Color = colorBKSettings.Color
            <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
        <span class="highlight-keyword">Case</span> BackgroundStyle.Image
            <span class="highlight-comment">' for image style</span>
            <span class="highlight-keyword">Dim</span> imageBKSettings <span class="highlight-keyword">As</span> ImageBackgroundSettings = <span class="highlight-keyword">TryCast</span>(renderingSettings.GetBackgroundSettings(), ImageBackgroundSettings)
            <span class="highlight-keyword">Dim</span> imageFit <span class="highlight-keyword">As</span> BackgroundImageFit = imageBKSettings.BackgroundImageFit
            <span class="highlight-keyword">Dim</span> filePath <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = imageBKSettings.FilePath
            <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
            <span class="highlight-comment">' for sky related styles</span>
        <span class="highlight-keyword">Case</span> BackgroundStyle.SkyCloudy, BackgroundStyle.SkyFewClouds, BackgroundStyle.SkyNoClouds, BackgroundStyle.SkyVeryCloudy, BackgroundStyle.SkyVeryFewClouds
            <span class="highlight-keyword">Dim</span> skyBKSettings <span class="highlight-keyword">As</span> SkyBackgroundSettings = <span class="highlight-keyword">TryCast</span>(renderingSettings.GetBackgroundSettings(), SkyBackgroundSettings)
            <span class="highlight-keyword">Dim</span> visibilityDis <span class="highlight-keyword">As</span> <span class="highlight-keyword">Single</span> = skyBKSettings.VisibilityDistance
            <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
        <span class="highlight-keyword">Case</span> <span class="highlight-keyword">Else</span>
            <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> InvalidOperationException(<span class="highlight-literal">"Not expected background style"</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Select</span>

    <span class="highlight-comment">' Get the rendering image exposure settings</span>
    <span class="highlight-keyword">Dim</span> exposureSettings <span class="highlight-keyword">As</span> RenderingImageExposureSettings = renderingSettings.GetRenderingImageExposureSettings()
    <span class="highlight-keyword">Dim</span> imageShadows <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = exposureSettings.[<span class="highlight-keyword">Shadows</span>]

    <span class="highlight-comment">' Get the rendering quality settings</span>
    <span class="highlight-keyword">Dim</span> qualitySettings <span class="highlight-keyword">As</span> RenderingQualitySettings = renderingSettings.GetRenderingQualitySettings()
    <span class="highlight-keyword">Dim</span> qualitySytle <span class="highlight-keyword">As</span> RenderingQuality = qualitySettings.RenderingQuality
    <span class="highlight-comment">' get rendering quality enum</span>
    <span class="highlight-keyword">If</span> qualitySytle = RenderingQuality.[Custom] <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' The user can set the data only in custom quality</span>
        qualitySettings.ImagePrecision = <span class="highlight-number">1</span>
    <span class="highlight-keyword">Else</span>
        <span class="highlight-comment">' Different property value is retruned according to its rendering quality style.</span>
        <span class="highlight-comment">' Take ImagePrecision property for example, it returns 1 for Draft quality and returns 2 for low quality.</span>
        <span class="highlight-keyword">Dim</span> imagePrecision <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = qualitySettings.ImagePrecision
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Inheritance Hierarchy
     <a name="familyToggle">
     </a>
    </h1>
    <div class="section" id="familySection" name="collapseableSection" style="">
     <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">
      System
      Object
     </a>
     <br/>
     <span class="selflink">
      Autodesk.Revit.DB
      RenderingSettings
     </span>
     <br/>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="f7cc505f-1a17-881e-7859-adc21fb8d6e4.htm">
       RenderingSettings Members
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>