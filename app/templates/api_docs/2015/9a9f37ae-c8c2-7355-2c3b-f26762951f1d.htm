<article id="api-content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="7d0dc6df-db0e-6a07-3b42-8dde1bedb3c1.htm">
       IExportContext Interface
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     This method marks the beginning of a Face to be exported
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
     <br/>
     <b>
      Since:
     </b>
     2014
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><a href="39f98799-628b-8d65-765c-ca86949ce7ed.htm">RenderNodeAction</a> <span class="identifier">OnFaceBegin</span>(
	<a href="fbd0d7af-ac40-e81e-8e06-8b2ce90be28b.htm">FaceNode</a> <span class="parameter">node</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Function</span> <span class="identifier">OnFaceBegin</span> ( _
	<span class="parameter">node</span> <span class="keyword">As</span> <a href="fbd0d7af-ac40-e81e-8e06-8b2ce90be28b.htm">FaceNode</a> _
) <span class="keyword">As</span> <a href="39f98799-628b-8d65-765c-ca86949ce7ed.htm">RenderNodeAction</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><a href="39f98799-628b-8d65-765c-ca86949ce7ed.htm">RenderNodeAction</a> <span class="identifier">OnFaceBegin</span>(
	<a href="fbd0d7af-ac40-e81e-8e06-8b2ce90be28b.htm">FaceNode</a>^ <span class="parameter">node</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="node">
       <dt>
        <span class="parameter">
         node
        </span>
       </dt>
       <dd>
        Type:
        <a href="fbd0d7af-ac40-e81e-8e06-8b2ce90be28b.htm">
         Autodesk.Revit.DB
         FaceNode
        </a>
        <br/>
        An output node that represents a Face.
       </dd>
      </dl>
     </div>
     <h4 class="subHeading">
      Return Value
     </h4>
     Return RenderNodeAction.Proceed if you wish to receive geometry (polymesh)
   for this face, or return RenderNodeAction.Skip otherwise.
    </div>
    <h1 class="heading">
     Remarks
     <a name="remarksToggle">
     </a>
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     Note that OnFaceBeging (as well as OnFaceEnd) is called only if
   the custom exporter was set up to include faces in the output stream.
   See CustomExporter.IncudeFaces for mode details.
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// This code demonstrates how to process face geometry</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;remarks&gt;</span>
<span class="highlight-comment">/// This method is invoked only if the custom exporter was set to include faces.</span>
<span class="highlight-comment">/// &lt;/remarks&gt;</span>
<span class="highlight-keyword">public</span> RenderNodeAction OnFaceBegin(FaceNode node)
{
   <span class="highlight-comment">// Get the get the actual geometric face and all information about it</span>
   <span class="highlight-comment">// and its edges by using standard API for Face and Edge</span>
   Face theFace = node.GetFace();
   <span class="highlight-keyword">double</span> area = theFace.Area;
   <span class="highlight-keyword">if</span> (theFace.HasRegions)
   {
      IList&lt;Face&gt; regionedFaces = theFace.GetRegions();
   }

   <span class="highlight-comment">// We can either skip this face or proceed with rendering it depending on </span>
   <span class="highlight-comment">// whether our export process can handle face geometry or not. If we choose </span>
   <span class="highlight-comment">// to proceed, we get calls to export tessellated meshes for this face.</span>
   <span class="highlight-keyword">if</span> (<span class="highlight-keyword">true</span> == ExportAFace(theFace))
   {
      <span class="highlight-keyword">return</span> RenderNodeAction.Skip;
   }
   <span class="highlight-keyword">return</span> RenderNodeAction.Proceed;
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// This code marks the end of processing a face</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;remarks&gt;</span>
<span class="highlight-comment">/// This method is invoked only if the custom exporter was set to include faces.</span>
<span class="highlight-comment">/// &lt;/remarks&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> OnFaceEnd(FaceNode node)
{
   <span class="highlight-comment">// Note: This method is invoked even for faces that were skipped.</span>
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Assuming this would be the method that processes faces and exports them in our proprietary format.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;remarks&gt;</span>
<span class="highlight-comment">/// For example, we can decide that our format supports planar faces only, but no curved surfaces.</span>
<span class="highlight-comment">/// Or we can support basic surfaces only (planar, spherical, cylindrical), but not complex faces.</span>
<span class="highlight-comment">/// This is, naturally, depending on what a particular custom exporter is designed to output.</span>
<span class="highlight-comment">/// &lt;/remarks&gt;</span>
<span class="highlight-comment">/// &lt;returns&gt;</span>
<span class="highlight-comment">/// Should return True if the face could be handled (exported), False otherwise.</span>
<span class="highlight-comment">/// &lt;/returns&gt;</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">bool</span> ExportAFace(Face face)
{
   <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;  <span class="highlight-comment">// in this case, </span>
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' This code demonstrates how to process face geometry</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;remarks&gt;</span>
<span class="highlight-comment">' This method is invoked only if the custom exporter was set to include faces.</span>
<span class="highlight-comment">' &lt;/remarks&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnFaceBegin(node <span class="highlight-keyword">As</span> FaceNode) <span class="highlight-keyword">As</span> RenderNodeAction <span class="highlight-keyword">Implements</span> IExportContext.OnFaceBegin
    <span class="highlight-comment">' Get the get the actual geometric face and all information about it</span>
    <span class="highlight-comment">' and its edges by using standard API for Face and Edge</span>
    <span class="highlight-keyword">Dim</span> theFace <span class="highlight-keyword">As</span> Face = node.GetFace()
    <span class="highlight-keyword">Dim</span> area <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = theFace.Area
    <span class="highlight-keyword">If</span> theFace.HasRegions <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Dim</span> regionedFaces <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> Face) = theFace.GetRegions()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' We can either skip this face or proceed with rendering it depending on </span>
    <span class="highlight-comment">' whether our export process can handle face geometry or not. If we choose </span>
    <span class="highlight-comment">' to proceed, we get calls to export tessellated meshes for this face.</span>
    <span class="highlight-keyword">If</span> <span class="highlight-keyword">True</span> = ExportAFace(theFace) <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> RenderNodeAction.Skip
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Return</span> RenderNodeAction.Proceed
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' This code marks the end of processing a face</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;remarks&gt;</span>
<span class="highlight-comment">' This method is invoked only if the custom exporter was set to include faces.</span>
<span class="highlight-comment">' &lt;/remarks&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> OnFaceEnd(node <span class="highlight-keyword">As</span> FaceNode) <span class="highlight-keyword">Implements</span> IExportContext.OnFaceEnd
    <span class="highlight-comment">' Note: This method is invoked even for faces that were skipped.</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' Assuming this would be the method that processes faces and exports them in our proprietary format.</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;remarks&gt;</span>
<span class="highlight-comment">' For example, we can decide that our format supports planar faces only, but no curved surfaces.</span>
<span class="highlight-comment">' Or we can support basic surfaces only (planar, spherical, cylindrical), but not complex faces.</span>
<span class="highlight-comment">' This is, naturally, depending on what a particular custom exporter is designed to output.</span>
<span class="highlight-comment">' &lt;/remarks&gt;</span>
<span class="highlight-comment">' &lt;returns&gt;</span>
<span class="highlight-comment">' Should return True if the face could be handled (exported), False otherwise.</span>
<span class="highlight-comment">' &lt;/returns&gt;</span>
<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> ExportAFace(face <span class="highlight-keyword">As</span> Face) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>
    <span class="highlight-keyword">Return</span> <span class="highlight-keyword">False</span>
    <span class="highlight-comment">' in this case, </span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="7d0dc6df-db0e-6a07-3b42-8dde1bedb3c1.htm">
       IExportContext Interface
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</article>