<div class="chm_content">
 <div id="header">
  <table cellpadding="0" cellspacing="0" id="topTable">
   <tbody>
    <tr>
     <td>
      <span>
      </span>
     </td>
    </tr>
   </tbody>
  </table>
  <table cellpadding="0" cellspacing="0" id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="a7622967-1381-c17f-ed04-1ebe40da0440.htm">
       FamilyItemFactory Class
      </a>
      <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">
       Example
      </a>
      <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Add a new Blend instance into the Autodesk Revit family document.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="ded320da-058a-4edd-0418-0582389559a7.htm">
      Autodesk.Revit.Creation
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
    </p>
    <h1 class="heading">
     Syntax
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <a href="6875edf6-f0ba-60bc-f294-21bb689c5994.htm">Blend</a> <span class="identifier">NewBlend</span>(
	<a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">bool</a> <span class="parameter">isSolid</span>,
	<a href="55103aad-38fd-45d2-6bf7-67a5203e99f3.htm">CurveArray</a> <span class="parameter">topProfile</span>,
	<a href="55103aad-38fd-45d2-6bf7-67a5203e99f3.htm">CurveArray</a> <span class="parameter">baseProfile</span>,
	<a href="ba104029-d175-7e75-caef-667a4281f4af.htm">SketchPlane</a> <span class="parameter">sketchPlane</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">NewBlend</span> ( _
	<span class="parameter">isSolid</span> <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">Boolean</a>, _
	<span class="parameter">topProfile</span> <span class="keyword">As</span> <a href="55103aad-38fd-45d2-6bf7-67a5203e99f3.htm">CurveArray</a>, _
	<span class="parameter">baseProfile</span> <span class="keyword">As</span> <a href="55103aad-38fd-45d2-6bf7-67a5203e99f3.htm">CurveArray</a>, _
	<span class="parameter">sketchPlane</span> <span class="keyword">As</span> <a href="ba104029-d175-7e75-caef-667a4281f4af.htm">SketchPlane</a> _
) <span class="keyword">As</span> <a href="6875edf6-f0ba-60bc-f294-21bb689c5994.htm">Blend</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<a href="6875edf6-f0ba-60bc-f294-21bb689c5994.htm">Blend</a>^ <span class="identifier">NewBlend</span>(
	<a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">bool</a> <span class="parameter">isSolid</span>, 
	<a href="55103aad-38fd-45d2-6bf7-67a5203e99f3.htm">CurveArray</a>^ <span class="parameter">topProfile</span>, 
	<a href="55103aad-38fd-45d2-6bf7-67a5203e99f3.htm">CurveArray</a>^ <span class="parameter">baseProfile</span>, 
	<a href="ba104029-d175-7e75-caef-667a4281f4af.htm">SketchPlane</a>^ <span class="parameter">sketchPlane</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="isSolid">
       <dt>
        <span class="parameter">
         isSolid
        </span>
       </dt>
       <dd>
        Type:
        <a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">
         System
         Boolean
        </a>
        <br/>
        Indicates if the Blend is Solid or Void.
       </dd>
      </dl>
      <dl paramname="topProfile">
       <dt>
        <span class="parameter">
         topProfile
        </span>
       </dt>
       <dd>
        Type:
        <a href="55103aad-38fd-45d2-6bf7-67a5203e99f3.htm">
         Autodesk.Revit.DB
         CurveArray
        </a>
        <br/>
        The top blend section. It should consist of only one curve loop.
The input profile must be in one plane.
       </dd>
      </dl>
      <dl paramname="baseProfile">
       <dt>
        <span class="parameter">
         baseProfile
        </span>
       </dt>
       <dd>
        Type:
        <a href="55103aad-38fd-45d2-6bf7-67a5203e99f3.htm">
         Autodesk.Revit.DB
         CurveArray
        </a>
        <br/>
        The base blend section. It should consist of only one curve loop.
The input profile must be in one plane.
       </dd>
      </dl>
      <dl paramname="sketchPlane">
       <dt>
        <span class="parameter">
         sketchPlane
        </span>
       </dt>
       <dd>
        Type:
        <a href="ba104029-d175-7e75-caef-667a4281f4af.htm">
         Autodesk.Revit.DB
         SketchPlane
        </a>
        <br/>
        The sketch plane for the base profile. Use this to associate the 
base of the blend to geometry from another element. Optional, it can be
        <span class="keyword">
        </span>
        <span class="nu">
         a null reference (
         <span class="keyword">
          Nothing
         </span>
         in Visual Basic)
        </span>
        if you want Revit
to derive a new sketch plane from the geometry of the base profile.
       </dd>
      </dl>
     </div>
     <h4 class="subHeading">
      Return Value
     </h4>
     If creation was successful the new blend is returned, 
otherwise an exception with failure information will be thrown.
    </div>
    <h1 class="heading">
     Remarks
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     This method creates a blend in a family document. The blend will be 
extended between the two independent pieces of geometry. Revit will determine an appropriate 
default mapping for the vertices of the two profiles. The two input profiles must be parallel.
If the input profile is to be a cyclic profile (curve or ellipse) it must be split into at least two 
segments, so that Revit can find vertices to use for mapping the blend.
    </div>
    <h1 class="heading">
     Examples
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">private</span> Blend CreateBlend(UIApplication application, SketchPlane sketchPlane)
{
    Blend blend = <span class="highlight-keyword">null</span>;

    <span class="highlight-comment">// make sure we have a family document</span>
    Document familyDocument = application.ActiveUIDocument.Document;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">true</span> == familyDocument.IsFamilyDocument)
    {
        <span class="highlight-comment">// Define top and base profiles for the blend</span>
        CurveArray topProfile = <span class="highlight-keyword">new</span> CurveArray();
        CurveArray baseProfile = <span class="highlight-keyword">new</span> CurveArray();

        <span class="highlight-comment">// create rectangular base profile</span>
        XYZ p00 = XYZ.Zero;
        XYZ p01 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">10</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
        XYZ p02 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">10</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>);
        XYZ p03 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>);
        Line line01 = Line.CreateBound(p00, p01);
        Line line02 = Line.CreateBound(p01, p02);
        Line line03 = Line.CreateBound(p02, p03);
        Line line04 = Line.CreateBound(p03, p00);

        baseProfile.Append(line01);
        baseProfile.Append(line02);
        baseProfile.Append(line03);
        baseProfile.Append(line04);

        <span class="highlight-comment">// create rectangular top profile</span>
        XYZ p10 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">5</span>, <span class="highlight-number">2</span>, <span class="highlight-number">10</span>);
        XYZ p11 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">8</span>, <span class="highlight-number">5</span>, <span class="highlight-number">10</span>);
        XYZ p12 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">5</span>, <span class="highlight-number">8</span>, <span class="highlight-number">10</span>);
        XYZ p13 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">2</span>, <span class="highlight-number">5</span>, <span class="highlight-number">10</span>);
        Line line11 = Line.CreateBound(p10, p11);
        Line line12 = Line.CreateBound(p11, p12);
        Line line13 = Line.CreateBound(p12, p13);
        Line line14 = Line.CreateBound(p13, p10);

        topProfile.Append(line11);
        topProfile.Append(line12);
        topProfile.Append(line13);
        topProfile.Append(line14);

        <span class="highlight-comment">// now create solid rectangular blend</span>
        blend = familyDocument.FamilyCreate.NewBlend(<span class="highlight-keyword">true</span>, topProfile, baseProfile, sketchPlane);

        <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != blend)
        {
            <span class="highlight-comment">// move to proper place</span>
            XYZ transPoint1 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">11</span>, <span class="highlight-number">0</span>);
            ElementTransformUtils.MoveElement(familyDocument, blend.Id, transPoint1);
        }
        <span class="highlight-keyword">else</span>
        {
            <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new Blend failed."</span>);
        }
    }
    <span class="highlight-keyword">else</span>
    {
        <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Please open a Family document before invoking this command."</span>);
    }

    <span class="highlight-keyword">return</span> blend;
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> CreateBlend(application <span class="highlight-keyword">As</span> UIApplication, sketchPlane <span class="highlight-keyword">As</span> SketchPlane) <span class="highlight-keyword">As</span> Blend
    <span class="highlight-keyword">Dim</span> blend <span class="highlight-keyword">As</span> Blend = <span class="highlight-keyword">Nothing</span>

    <span class="highlight-comment">' make sure we have a family document</span>
    <span class="highlight-keyword">Dim</span> familyDocument <span class="highlight-keyword">As</span> Document = application.ActiveUIDocument.Document
    <span class="highlight-keyword">If</span> <span class="highlight-keyword">True</span> = familyDocument.IsFamilyDocument <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' Define top and base profiles for the blend</span>
        <span class="highlight-keyword">Dim</span> topProfile <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> CurveArray()
        <span class="highlight-keyword">Dim</span> baseProfile <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> CurveArray()

        <span class="highlight-comment">' create rectangular base profile</span>
        <span class="highlight-keyword">Dim</span> p00 <span class="highlight-keyword">As</span> XYZ = XYZ.Zero
        <span class="highlight-keyword">Dim</span> p01 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">10</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> p02 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">10</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> p03 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">10</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> line01 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p00, p01)
        <span class="highlight-keyword">Dim</span> line02 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p01, p02)
        <span class="highlight-keyword">Dim</span> line03 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p02, p03)
        <span class="highlight-keyword">Dim</span> line04 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p03, p00)

        baseProfile.Append(line01)
        baseProfile.Append(line02)
        baseProfile.Append(line03)
        baseProfile.Append(line04)

        <span class="highlight-comment">' create rectangular top profile</span>
        <span class="highlight-keyword">Dim</span> p10 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">5</span>, <span class="highlight-number">2</span>, <span class="highlight-number">10</span>)
        <span class="highlight-keyword">Dim</span> p11 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">8</span>, <span class="highlight-number">5</span>, <span class="highlight-number">10</span>)
        <span class="highlight-keyword">Dim</span> p12 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">5</span>, <span class="highlight-number">8</span>, <span class="highlight-number">10</span>)
        <span class="highlight-keyword">Dim</span> p13 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">2</span>, <span class="highlight-number">5</span>, <span class="highlight-number">10</span>)
        <span class="highlight-keyword">Dim</span> line11 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p10, p11)
        <span class="highlight-keyword">Dim</span> line12 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p11, p12)
        <span class="highlight-keyword">Dim</span> line13 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p12, p13)
        <span class="highlight-keyword">Dim</span> line14 <span class="highlight-keyword">As</span> Line = Line.CreateBound(p13, p10)

        topProfile.Append(line11)
        topProfile.Append(line12)
        topProfile.Append(line13)
        topProfile.Append(line14)

        <span class="highlight-comment">' now create solid rectangular blend</span>
        blend = familyDocument.FamilyCreate.NewBlend(<span class="highlight-keyword">True</span>, topProfile, baseProfile, sketchPlane)

        <span class="highlight-keyword">If</span> blend <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' move to proper place</span>
            <span class="highlight-keyword">Dim</span> transPoint1 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">11</span>, <span class="highlight-number">0</span>)
            ElementTransformUtils.MoveElement(familyDocument, blend.Id, transPoint1)
        <span class="highlight-keyword">Else</span>
            <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new Blend failed."</span>)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Else</span>
        <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Please open a Family document before invoking this command."</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Return</span> blend
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Exceptions
    </h1>
    <div class="section" id="exceptionsSection" name="collapseableSection" style="">
     <div class="tableSection">
      <table cellpadding="5" cellspacing="2" frame="lhs" width="100%">
       <tbody>
        <tr>
         <th class="exceptionNameColumn">
          Exception
         </th>
         <th class="exceptionConditionColumn">
          Condition
         </th>
        </tr>
        <tr>
         <td>
          <a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">
           Autodesk.Revit.Exceptions
           ArgumentException
          </a>
         </td>
         <td>
          Thrown when the argument is invalid.
         </td>
        </tr>
        <tr>
         <td>
          <a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">
           Autodesk.Revit.Exceptions
           InvalidOperationException
          </a>
         </td>
         <td>
          Thrown when creation is attempted in Conceptual Mass, 2D, or other family where blends cannot be created.
         </td>
        </tr>
        <tr>
         <td>
          <a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">
           Autodesk.Revit.Exceptions
           InvalidOperationException
          </a>
         </td>
         <td>
          Thrown when the creation failed.
         </td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <h1 class="heading">
     See Also
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="a7622967-1381-c17f-ed04-1ebe40da0440.htm">
       FamilyItemFactory Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="ded320da-058a-4edd-0418-0582389559a7.htm">
       Autodesk.Revit.Creation Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>