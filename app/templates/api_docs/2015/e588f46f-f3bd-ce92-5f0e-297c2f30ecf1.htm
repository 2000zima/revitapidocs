<article id="api-content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="f7cbd23a-1b69-d9bf-88b4-df10a8c4be0b.htm">
       MechanicalUtils Class
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Connects a pair of placeholders that can intersect in an Elbow connection.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="0eafd899-5912-56fd-94b1-d286156e26fc.htm">
      Autodesk.Revit.DB.Mechanical
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
     <br/>
     <b>
      Since:
     </b>
     2012
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">static</span> <a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">bool</a> <span class="identifier">ConnectDuctPlaceholdersAtElbow</span>(
	<a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a> <span class="parameter">document</span>,
	<a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">Connector</a> <span class="parameter">connector1</span>,
	<a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">Connector</a> <span class="parameter">connector2</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">ConnectDuctPlaceholdersAtElbow</span> ( _
	<span class="parameter">document</span> <span class="keyword">As</span> <a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a>, _
	<span class="parameter">connector1</span> <span class="keyword">As</span> <a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">Connector</a>, _
	<span class="parameter">connector2</span> <span class="keyword">As</span> <a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">Connector</a> _
) <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">Boolean</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<span class="keyword">static</span> <a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">bool</a> <span class="identifier">ConnectDuctPlaceholdersAtElbow</span>(
	<a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a>^ <span class="parameter">document</span>, 
	<a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">Connector</a>^ <span class="parameter">connector1</span>, 
	<a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">Connector</a>^ <span class="parameter">connector2</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="document">
       <dt>
        <span class="parameter">
         document
        </span>
       </dt>
       <dd>
        Type:
        <a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">
         Autodesk.Revit.DB
         Document
        </a>
        <br/>
        The document.
       </dd>
      </dl>
      <dl paramname="connector1">
       <dt>
        <span class="parameter">
         connector1
        </span>
       </dt>
       <dd>
        Type:
        <a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">
         Autodesk.Revit.DB
         Connector
        </a>
        <br/>
        The end connector of the first placeholder.
       </dd>
      </dl>
      <dl paramname="connector2">
       <dt>
        <span class="parameter">
         connector2
        </span>
       </dt>
       <dd>
        Type:
        <a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">
         Autodesk.Revit.DB
         Connector
        </a>
        <br/>
        The end connector of the second placeholder.
       </dd>
      </dl>
     </div>
     <h4 class="subHeading">
      Return Value
     </h4>
     True if connection succeeds, false otherwise.
    </div>
    <h1 class="heading">
     Remarks
     <a name="remarksToggle">
     </a>
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     The placeholders may have a physical intersection but this is not required.
   If they are not intersecting the connectors must be coplanar and able to be moved to
   intersect each other.
   If connection fails, the placeholders cannot be physically connected.
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">//Create a point to be the connection point of two ductPlaceholders</span>
XYZ connectionPoint = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">150</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);

<span class="highlight-comment">//Create two new ductPlaceholders, duct1 and duct2, each ductPlaceholder has connectionPoint as its parameter</span>
Duct duct1 = Duct.CreatePlaceholder(document, systemTypeId, ductTypeId, levelId, <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">100</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>), connectionPoint);
Duct duct2 = Duct.CreatePlaceholder(document, systemTypeId, ductTypeId, levelId, connectionPoint, <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">150</span>, <span class="highlight-number">50</span>, <span class="highlight-number">0</span>));

<span class="highlight-comment">//Get Connectors of duct1 and duct2's ConnectorManager and change their type to IEnumerable&lt;Connector&gt;</span>
<span class="highlight-comment">//Get the first connector from the IEnumerable where the origin of the connector is almost equal to connectionPoint</span>
Connector connector1 = duct1.ConnectorManager.Connectors.Cast&lt;Connector&gt;().Where(c =&gt; c.Origin.IsAlmostEqualTo(connectionPoint)).First();
Connector connector2 = duct2.ConnectorManager.Connectors.Cast&lt;Connector&gt;().Where(c =&gt; c.Origin.IsAlmostEqualTo(connectionPoint)).First();

<span class="highlight-comment">//Connect duct1 and duct2 with elbow fitting by their intersecting connectors(whose origin is almost equal to connectionPoint)</span>
<span class="highlight-keyword">bool</span> connectResult = MechanicalUtils.ConnectDuctPlaceholdersAtElbow(document, connector1, connector2);

<span class="highlight-comment">//Convert duct1 and duct2 to real ducts</span>
ICollection&lt;ElementId&gt; convertedElementsId = MechanicalUtils.ConvertDuctPlaceholders(document, <span class="highlight-keyword">new</span> ElementId[] { duct1.Id, duct2.Id });</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">'Create a point to be the connection point of two ductPlaceholders</span>
<span class="highlight-keyword">Dim</span> connectionPoint <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">150</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)

<span class="highlight-comment">'Create two new ductPlaceholders, duct1 and duct2, each ductPlaceholder has connectionPoint as its parameter</span>
<span class="highlight-keyword">Dim</span> duct1 <span class="highlight-keyword">As</span> Duct = Duct.CreatePlaceholder(document, systemTypeId, ductTypeId, levelId, <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">100</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>), connectionPoint)
<span class="highlight-keyword">Dim</span> duct2 <span class="highlight-keyword">As</span> Duct = Duct.CreatePlaceholder(document, systemTypeId, ductTypeId, levelId, connectionPoint, <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">150</span>, <span class="highlight-number">50</span>, <span class="highlight-number">0</span>))

<span class="highlight-comment">'Get Connectors of duct1 and duct2's ConnectorManager and change their type to IEnumerable&lt;Connector&gt;</span>
<span class="highlight-comment">'Get the first connector from the IEnumerable where the origin of the connector is almost equal to connectionPoint</span>
<span class="highlight-keyword">Dim</span> connector1 <span class="highlight-keyword">As</span> Connector = duct1.ConnectorManager.Connectors.Cast(<span class="highlight-keyword">Of</span> Connector)().Where(<span class="highlight-keyword">Function</span>(c) c.Origin.IsAlmostEqualTo(connectionPoint)).First()
<span class="highlight-keyword">Dim</span> connector2 <span class="highlight-keyword">As</span> Connector = duct2.ConnectorManager.Connectors.Cast(<span class="highlight-keyword">Of</span> Connector)().Where(<span class="highlight-keyword">Function</span>(c) c.Origin.IsAlmostEqualTo(connectionPoint)).First()

<span class="highlight-comment">'Connect duct1 and duct2 with elbow fitting by their intersecting connectors(whose origin is almost equal to connectionPoint)</span>
<span class="highlight-keyword">Dim</span> connectResult <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = MechanicalUtils.ConnectDuctPlaceholdersAtElbow(document, connector1, connector2)

<span class="highlight-comment">'Convert duct1 and duct2 to real ducts</span>
<span class="highlight-keyword">Dim</span> convertedElementsId <span class="highlight-keyword">As</span> ICollection(<span class="highlight-keyword">Of</span> ElementId) = MechanicalUtils.ConvertDuctPlaceholders(document, <span class="highlight-keyword">New</span> ElementId() {duct1.Id, duct2.Id})</code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Exceptions
     <a name="exceptionsToggle">
     </a>
    </h1>
    <div class="section" id="exceptionsSection" name="collapseableSection" style="">
     <div class="tableSection">
      <table frame="lhs" width="100%">
       <tbody>
        <tr>
         <th class="exceptionNameColumn">
          Exception
         </th>
         <th class="exceptionConditionColumn">
          Condition
         </th>
        </tr>
        <tr>
         <td>
          <a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">
           Autodesk.Revit.Exceptions
           ArgumentException
          </a>
         </td>
         <td>
          The owner of connector is not duct placeholder.
   -or-
   The owners of connectors belong to different types of system.
         </td>
        </tr>
        <tr>
         <td>
          <a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">
           Autodesk.Revit.Exceptions
           ArgumentNullException
          </a>
         </td>
         <td>
          A non-optional argument was NULL
         </td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="f7cbd23a-1b69-d9bf-88b4-df10a8c4be0b.htm">
       MechanicalUtils Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="7b82eb6f-4daf-cc0b-0ae6-9468c95a7245.htm">
       ConnectDuctPlaceholdersAtElbow Overload
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="0eafd899-5912-56fd-94b1-d286156e26fc.htm">
       Autodesk.Revit.DB.Mechanical Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</article>