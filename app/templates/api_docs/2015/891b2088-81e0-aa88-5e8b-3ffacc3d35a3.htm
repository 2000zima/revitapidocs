<div class="chm_content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="08113547-eaaa-5ec1-5ff1-de609fe7c29c.htm">
       DisplacementElement Class
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Creates a new DisplacementElement as a child of the specified parent DisplacementElement.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
     <br/>
     <b>
      Since:
     </b>
     2014
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">static</span> <a href="08113547-eaaa-5ec1-5ff1-de609fe7c29c.htm">DisplacementElement</a> <span class="identifier">Create</span>(
	<a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a> <span class="parameter">document</span>,
	<a href="http://msdn2.microsoft.com/en-us/library/92t2ye13" target="_blank">ICollection</a>&lt;<a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a>&gt; <span class="parameter">elementsToDisplace</span>,
	<a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a> <span class="parameter">displacement</span>,
	<a href="fb92a4e7-f3a7-ef14-e631-342179b18de9.htm">View</a> <span class="parameter">ownerDBView</span>,
	<a href="08113547-eaaa-5ec1-5ff1-de609fe7c29c.htm">DisplacementElement</a> <span class="parameter">parentDisplacementElement</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">Create</span> ( _
	<span class="parameter">document</span> <span class="keyword">As</span> <a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a>, _
	<span class="parameter">elementsToDisplace</span> <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/92t2ye13" target="_blank">ICollection</a>(<span class="keyword">Of</span> <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a>), _
	<span class="parameter">displacement</span> <span class="keyword">As</span> <a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a>, _
	<span class="parameter">ownerDBView</span> <span class="keyword">As</span> <a href="fb92a4e7-f3a7-ef14-e631-342179b18de9.htm">View</a>, _
	<span class="parameter">parentDisplacementElement</span> <span class="keyword">As</span> <a href="08113547-eaaa-5ec1-5ff1-de609fe7c29c.htm">DisplacementElement</a> _
) <span class="keyword">As</span> <a href="08113547-eaaa-5ec1-5ff1-de609fe7c29c.htm">DisplacementElement</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<span class="keyword">static</span> <a href="08113547-eaaa-5ec1-5ff1-de609fe7c29c.htm">DisplacementElement</a>^ <span class="identifier">Create</span>(
	<a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a>^ <span class="parameter">document</span>, 
	<a href="http://msdn2.microsoft.com/en-us/library/92t2ye13" target="_blank">ICollection</a>&lt;<a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a>^&gt;^ <span class="parameter">elementsToDisplace</span>, 
	<a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a>^ <span class="parameter">displacement</span>, 
	<a href="fb92a4e7-f3a7-ef14-e631-342179b18de9.htm">View</a>^ <span class="parameter">ownerDBView</span>, 
	<a href="08113547-eaaa-5ec1-5ff1-de609fe7c29c.htm">DisplacementElement</a>^ <span class="parameter">parentDisplacementElement</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="document">
       <dt>
        <span class="parameter">
         document
        </span>
       </dt>
       <dd>
        Type:
        <a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">
         Autodesk.Revit.DB
         Document
        </a>
        <br/>
        The Document
       </dd>
      </dl>
      <dl paramname="elementsToDisplace">
       <dt>
        <span class="parameter">
         elementsToDisplace
        </span>
       </dt>
       <dd>
        Type:
        <a href="http://msdn2.microsoft.com/en-us/library/92t2ye13" target="_blank">
         System.Collections.Generic
         ICollection
        </a>
        <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">
         ElementId
        </a>
        <br/>
        The elements to be displaced.
       </dd>
      </dl>
      <dl paramname="displacement">
       <dt>
        <span class="parameter">
         displacement
        </span>
       </dt>
       <dd>
        Type:
        <a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">
         Autodesk.Revit.DB
         XYZ
        </a>
        <br/>
        The translation to be applied to the graphics of the displaced elements.
       </dd>
      </dl>
      <dl paramname="ownerDBView">
       <dt>
        <span class="parameter">
         ownerDBView
        </span>
       </dt>
       <dd>
        Type:
        <a href="fb92a4e7-f3a7-ef14-e631-342179b18de9.htm">
         Autodesk.Revit.DB
         View
        </a>
        <br/>
        The 3D view which will own the DisplacementElement.
       </dd>
      </dl>
      <dl paramname="parentDisplacementElement">
       <dt>
        <span class="parameter">
         parentDisplacementElement
        </span>
       </dt>
       <dd>
        Type:
        <a href="08113547-eaaa-5ec1-5ff1-de609fe7c29c.htm">
         Autodesk.Revit.DB
         DisplacementElement
        </a>
        <br/>
        An existing DisplacementElement that will be the parent of the one being created.
   It must be owned by ownerDBView.
   The relative transform of new DisplacementElement will be concatenated with the
   absolute transform of the parent DisplacementElement.
   If the elements specified by displacedElemIds are already displaced by another
   DisplacementElement, then this must be that element.
       </dd>
      </dl>
     </div>
     <h4 class="subHeading">
      Return Value
     </h4>
     The id of the new DisplacementElement.
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> CreateDisplacementAndPath(Document doc, View view)
{
    <span class="highlight-comment">// Find roof</span>
    FilteredElementCollector fec = <span class="highlight-keyword">new</span> FilteredElementCollector(doc);
    fec.OfClass(<span class="highlight-keyword">typeof</span>(RoofBase));
    RoofBase roof = fec.FirstElement() <span class="highlight-keyword">as</span> RoofBase;

    <span class="highlight-comment">// Get a geometric reference for the path</span>
    Reference edgeRef = GetHorizontalEdgeReference(roof);

    <span class="highlight-keyword">using</span> (Transaction t = <span class="highlight-keyword">new</span> Transaction(doc, <span class="highlight-literal">"CreateDisplacementAndPath"</span>))
    {
        t.Start();
        <span class="highlight-comment">// Create a new top level DisplacementElement</span>
        DisplacementElement dispElem = DisplacementElement.Create(doc, <span class="highlight-keyword">new</span> ElementId[] { roof.Id }, <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">10</span>, <span class="highlight-number">0</span>, <span class="highlight-number">20</span>), view, <span class="highlight-keyword">null</span>);

        <span class="highlight-comment">// Create the path associated to the element</span>
        DisplacementPath.Create(doc, dispElem, edgeRef, <span class="highlight-number">0.5</span>);
        t.Commit();
    }
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> Reference GetHorizontalEdgeReference(Element elem)
{
    <span class="highlight-comment">//Find target edge from lower face of roof</span>
    Options options = <span class="highlight-keyword">new</span> Options();
    options.ComputeReferences = <span class="highlight-keyword">true</span>;

    GeometryElement geomElem = elem.get_Geometry(options);

    <span class="highlight-keyword">foreach</span> (var geomObj <span class="highlight-keyword">in</span> geomElem)
    {
        <span class="highlight-keyword">if</span> (geomObj <span class="highlight-keyword">is</span> Solid)
        {
            Solid solid = geomObj <span class="highlight-keyword">as</span> Solid;
            var faces = solid.Faces;

            <span class="highlight-keyword">foreach</span> (Face face <span class="highlight-keyword">in</span> faces)
            {
                BoundingBoxUV box = face.GetBoundingBox();
                UV midpoint = (box.Min + box.Max) / <span class="highlight-number">2.0</span>;
                <span class="highlight-keyword">if</span> (face.ComputeNormal(midpoint).Normalize().Z &lt; <span class="highlight-number">-0.1</span>) <span class="highlight-comment">// Downward facing, this is good enough</span>
                {
                    var edgeLoops = face.EdgeLoops;
                    <span class="highlight-keyword">foreach</span> (EdgeArray edgeArray <span class="highlight-keyword">in</span> edgeLoops)
                    {
                        <span class="highlight-keyword">foreach</span> (Edge edge <span class="highlight-keyword">in</span> edgeArray)
                        {
                            <span class="highlight-comment">// horizontal?</span>
                            <span class="highlight-keyword">if</span> (Math.Abs(edge.AsCurve().ComputeDerivatives(<span class="highlight-number">0.0</span>, <span class="highlight-keyword">true</span>).BasisX.DotProduct(XYZ.BasisZ)) - <span class="highlight-number">1</span> &lt;= <span class="highlight-number">0.00001</span>)
                            {
                                <span class="highlight-keyword">return</span> edge.Reference;
                            }
                        }
                    }
                }
            }
        }
    }

    <span class="highlight-keyword">return</span> <span class="highlight-keyword">null</span>;
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> CreateDisplacementAndPath(doc <span class="highlight-keyword">As</span> Document, view <span class="highlight-keyword">As</span> View)
    <span class="highlight-comment">' Find roof</span>
    <span class="highlight-keyword">Dim</span> fec <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(doc)
    fec.OfClass(<span class="highlight-keyword">GetType</span>(RoofBase))
    <span class="highlight-keyword">Dim</span> roof <span class="highlight-keyword">As</span> RoofBase = <span class="highlight-keyword">TryCast</span>(fec.FirstElement(), RoofBase)

    <span class="highlight-comment">' Get a geometric reference for the path</span>
    <span class="highlight-keyword">Dim</span> edgeRef <span class="highlight-keyword">As</span> Reference = GetHorizontalEdgeReference(roof)

    <span class="highlight-keyword">Using</span> t <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(doc, <span class="highlight-literal">"CreateDisplacementAndPath"</span>)
        t.Start()
        <span class="highlight-comment">' Create a new top level DisplacementElement</span>
        <span class="highlight-keyword">Dim</span> dispElem <span class="highlight-keyword">As</span> DisplacementElement = DisplacementElement.Create(doc, <span class="highlight-keyword">New</span> ElementId() {roof.Id}, <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">10</span>, <span class="highlight-number">0</span>, <span class="highlight-number">20</span>), view, <span class="highlight-keyword">Nothing</span>)

        <span class="highlight-comment">' Create the path associated to the element</span>
        DisplacementPath.Create(doc, dispElem, edgeRef, <span class="highlight-number">0.5</span>)
        t.Commit()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> GetHorizontalEdgeReference(elem <span class="highlight-keyword">As</span> Element) <span class="highlight-keyword">As</span> Reference
    <span class="highlight-comment">'Find target edge from lower face of roof</span>
    <span class="highlight-keyword">Dim</span> options <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Options()
    options.ComputeReferences = <span class="highlight-keyword">True</span>

    <span class="highlight-keyword">Dim</span> geomElem <span class="highlight-keyword">As</span> GeometryElement = elem.Geometry(options)

    <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> geomObj <span class="highlight-keyword">As</span> GeometryObject <span class="highlight-keyword">In</span> geomElem
        <span class="highlight-keyword">If</span> <span class="highlight-keyword">TypeOf</span> geomObj <span class="highlight-keyword">Is</span> Solid <span class="highlight-keyword">Then</span>
            <span class="highlight-keyword">Dim</span> solid <span class="highlight-keyword">As</span> Solid = <span class="highlight-keyword">TryCast</span>(geomObj, Solid)
            <span class="highlight-keyword">Dim</span> faces = solid.Faces

            <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> face <span class="highlight-keyword">As</span> Face <span class="highlight-keyword">In</span> faces
                <span class="highlight-keyword">Dim</span> box <span class="highlight-keyword">As</span> BoundingBoxUV = face.GetBoundingBox()
                <span class="highlight-keyword">Dim</span> midpoint <span class="highlight-keyword">As</span> UV = (box.Min + box.Max) / <span class="highlight-number">2.0</span>
                <span class="highlight-keyword">If</span> face.ComputeNormal(midpoint).Normalize().Z &lt; <span class="highlight-number">-0.1</span> <span class="highlight-keyword">Then</span>
                    <span class="highlight-comment">' Downward facing, this is good enough</span>
                    <span class="highlight-keyword">Dim</span> edgeLoops = face.EdgeLoops
                    <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> edgeArray <span class="highlight-keyword">As</span> EdgeArray <span class="highlight-keyword">In</span> edgeLoops
                        <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> edge <span class="highlight-keyword">As</span> Edge <span class="highlight-keyword">In</span> edgeArray
                            <span class="highlight-comment">' horizontal?</span>
                            <span class="highlight-keyword">If</span> Math.Abs(edge.AsCurve().ComputeDerivatives(<span class="highlight-number">0.0</span>, <span class="highlight-keyword">True</span>).BasisX.DotProduct(XYZ.BasisZ)) - <span class="highlight-number">1</span> &lt;= <span class="highlight-number">0.00001</span> <span class="highlight-keyword">Then</span>
                                <span class="highlight-keyword">Return</span> edge.Reference
                            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
                        <span class="highlight-keyword">Next</span>
                    <span class="highlight-keyword">Next</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Next</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Next</span>

    <span class="highlight-keyword">Return</span> <span class="highlight-keyword">Nothing</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Exceptions
     <a name="exceptionsToggle">
     </a>
    </h1>
    <div class="section" id="exceptionsSection" name="collapseableSection" style="">
     <div class="tableSection">
      <table frame="lhs" width="100%">
       <tbody>
        <tr>
         <th class="exceptionNameColumn">
          Exception
         </th>
         <th class="exceptionConditionColumn">
          Condition
         </th>
        </tr>
        <tr>
         <td>
          <a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">
           Autodesk.Revit.Exceptions
           ArgumentException
          </a>
         </td>
         <td>
          #elementIds# contains no element ids.
   -or-
   ownerDBView is not a 3D view.
   -or-
   For each individual element in the set elementsToDisplace, isAllowedAsDisplacedElement must return true, and the
   elements must either not already be displaced in the specified view, or else they
   must all be displaced by the same displacement element in the view.
   -or-
   The DisplacementElement parentDisplacementElement in not owned by the view ownerDBView.
         </td>
        </tr>
        <tr>
         <td>
          <a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">
           Autodesk.Revit.Exceptions
           ArgumentNullException
          </a>
         </td>
         <td>
          A non-optional argument was NULL
         </td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="08113547-eaaa-5ec1-5ff1-de609fe7c29c.htm">
       DisplacementElement Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>