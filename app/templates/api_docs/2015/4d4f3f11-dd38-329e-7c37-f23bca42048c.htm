<div class="chm_content">
 <div id="header">
  <table cellpadding="0" cellspacing="0" id="topTable">
   <tbody>
    <tr>
     <td>
      <span>
      </span>
     </td>
    </tr>
   </tbody>
  </table>
  <table cellpadding="0" cellspacing="0" id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="ab1718f9-45fb-b3d3-827e-32ff81cf929c.htm">
       Document Class
      </a>
      <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">
       Example
      </a>
      <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Adds a new pipe into the document, 
using two points and pipe type.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="ded320da-058a-4edd-0418-0582389559a7.htm">
      Autodesk.Revit.Creation
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
    </p>
    <h1 class="heading">
     Syntax
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code>[<a href="http://msdn2.microsoft.com/en-us/library/fwz0y5c2" target="_blank">ObsoleteAttribute</a>("This method is obsolete in Revit 2015. Please use Pipe.Create() instead.")]
<span class="keyword">public</span> <a href="aa1b8294-c12d-ece0-00af-b17c1f1c9e03.htm">Pipe</a> <span class="identifier">NewPipe</span>(
	<a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a> <span class="parameter">point1</span>,
	<a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a> <span class="parameter">point2</span>,
	<a href="7d3cc77e-0148-a23b-8142-7e08ebdad6b7.htm">PipeType</a> <span class="parameter">pipeType</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code>&lt;<a href="http://msdn2.microsoft.com/en-us/library/fwz0y5c2" target="_blank">ObsoleteAttribute</a>("This method is obsolete in Revit 2015. Please use Pipe.Create() instead.")&gt; _
<span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">NewPipe</span> ( _
	<span class="parameter">point1</span> <span class="keyword">As</span> <a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a>, _
	<span class="parameter">point2</span> <span class="keyword">As</span> <a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a>, _
	<span class="parameter">pipeType</span> <span class="keyword">As</span> <a href="7d3cc77e-0148-a23b-8142-7e08ebdad6b7.htm">PipeType</a> _
) <span class="keyword">As</span> <a href="aa1b8294-c12d-ece0-00af-b17c1f1c9e03.htm">Pipe</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code>[<a href="http://msdn2.microsoft.com/en-us/library/fwz0y5c2" target="_blank">ObsoleteAttribute</a>(L"This method is obsolete in Revit 2015. Please use Pipe.Create() instead.")]
<span class="keyword">public</span>:
<a href="aa1b8294-c12d-ece0-00af-b17c1f1c9e03.htm">Pipe</a>^ <span class="identifier">NewPipe</span>(
	<a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a>^ <span class="parameter">point1</span>, 
	<a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a>^ <span class="parameter">point2</span>, 
	<a href="7d3cc77e-0148-a23b-8142-7e08ebdad6b7.htm">PipeType</a>^ <span class="parameter">pipeType</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="point1">
       <dt>
        <span class="parameter">
         point1
        </span>
       </dt>
       <dd>
        Type:
        <a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">
         Autodesk.Revit.DB
         XYZ
        </a>
        <br/>
        The first point of the pipe.
       </dd>
      </dl>
      <dl paramname="point2">
       <dt>
        <span class="parameter">
         point2
        </span>
       </dt>
       <dd>
        Type:
        <a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">
         Autodesk.Revit.DB
         XYZ
        </a>
        <br/>
        The second point of the pipe.
       </dd>
      </dl>
      <dl paramname="pipeType">
       <dt>
        <span class="parameter">
         pipeType
        </span>
       </dt>
       <dd>
        Type:
        <a href="7d3cc77e-0148-a23b-8142-7e08ebdad6b7.htm">
         Autodesk.Revit.DB.Plumbing
         PipeType
        </a>
        <br/>
        The type of the pipe.
       </dd>
      </dl>
     </div>
     <h4 class="subHeading">
      Return Value
     </h4>
     If creation was successful then a new pipe is returned, 
otherwise an exception with failure information will be thrown.
    </div>
    <h1 class="heading">
     Examples
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">public</span> Pipe CreateNewPipe(Document document, ElementId systemTypeId, ElementId levelId)
{
    <span class="highlight-comment">// find a pipe type</span>

    FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
    collector.OfClass(<span class="highlight-keyword">typeof</span>(PipeType));
    PipeType pipeType = collector.FirstElement() <span class="highlight-keyword">as</span> PipeType;

    Pipe pipe = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != pipeType)
    {
        <span class="highlight-comment">// create pipe between 2 points</span>
        XYZ p1 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
        XYZ p2 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">10</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);

        pipe = Pipe.Create(document, systemTypeId, pipeType.Id, levelId, p1, p2);
    }

    <span class="highlight-keyword">return</span> pipe;
}</code></pre>
      </div>
     </span>
     <span codelanguage="CSharp" id="cbc_2" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">public</span> Pipe CreateNewPipe(Document document, ElementId systemTypeId, ElementId levelId)
{
    <span class="highlight-comment">// find a pipe type</span>

    FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
    collector.OfClass(<span class="highlight-keyword">typeof</span>(PipeType));
    PipeType pipeType = collector.FirstElement() <span class="highlight-keyword">as</span> PipeType;

    Pipe pipe = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != pipeType)
    {
        <span class="highlight-comment">// create pipe between 2 points</span>
        XYZ p1 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
        XYZ p2 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">10</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);

        pipe = Pipe.Create(document, systemTypeId, pipeType.Id, levelId, p1, p2);
    }

    <span class="highlight-keyword">return</span> pipe;
}</code></pre>
      </div>
     </span>
     <span codelanguage="CSharp" id="cbc_3" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">public</span> Pipe CreateNewPipe(Document document, ElementId systemTypeId, ElementId levelId)
{
    <span class="highlight-comment">// find a pipe type</span>

    FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
    collector.OfClass(<span class="highlight-keyword">typeof</span>(PipeType));
    PipeType pipeType = collector.FirstElement() <span class="highlight-keyword">as</span> PipeType;

    Pipe pipe = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != pipeType)
    {
        <span class="highlight-comment">// create pipe between 2 points</span>
        XYZ p1 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
        XYZ p2 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">10</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);

        pipe = Pipe.Create(document, systemTypeId, pipeType.Id, levelId, p1, p2);
    }

    <span class="highlight-keyword">return</span> pipe;
}</code></pre>
      </div>
     </span>
     <span codelanguage="CSharp" id="cbc_4" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">public</span> Pipe CreateNewPipe(Document document, ElementId systemTypeId, ElementId levelId)
{
    <span class="highlight-comment">// find a pipe type</span>

    FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
    collector.OfClass(<span class="highlight-keyword">typeof</span>(PipeType));
    PipeType pipeType = collector.FirstElement() <span class="highlight-keyword">as</span> PipeType;

    Pipe pipe = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != pipeType)
    {
        <span class="highlight-comment">// create pipe between 2 points</span>
        XYZ p1 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
        XYZ p2 = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">10</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);

        pipe = Pipe.Create(document, systemTypeId, pipeType.Id, levelId, p1, p2);
    }

    <span class="highlight-keyword">return</span> pipe;
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_5" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> CreateNewPipe(document <span class="highlight-keyword">As</span> Document, systemTypeId <span class="highlight-keyword">As</span> ElementId, levelId <span class="highlight-keyword">As</span> ElementId) <span class="highlight-keyword">As</span> Pipe
    <span class="highlight-comment">' find a pipe type</span>


    <span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(document)
    collector.OfClass(<span class="highlight-keyword">GetType</span>(PipeType))
    <span class="highlight-keyword">Dim</span> pipeType <span class="highlight-keyword">As</span> PipeType = <span class="highlight-keyword">TryCast</span>(collector.FirstElement(), PipeType)

    <span class="highlight-keyword">Dim</span> pipe__1 <span class="highlight-keyword">As</span> Pipe = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">If</span> pipeType <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' create pipe between 2 points</span>
        <span class="highlight-keyword">Dim</span> p1 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> p2 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">10</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)

        pipe__1 = Pipe.Create(document, systemTypeId, pipeType.Id, levelId, p1, p2)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Return</span> pipe__1
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Exceptions
    </h1>
    <div class="section" id="exceptionsSection" name="collapseableSection" style="">
     <div class="tableSection">
      <table cellpadding="5" cellspacing="2" frame="lhs" width="100%">
       <tbody>
        <tr>
         <th class="exceptionNameColumn">
          Exception
         </th>
         <th class="exceptionConditionColumn">
          Condition
         </th>
        </tr>
        <tr>
         <td>
          <a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">
           Autodesk.Revit.Exceptions
           ArgumentNullException
          </a>
         </td>
         <td>
          Thrown when the input argument point1 or point2 is
          <span class="keyword">
          </span>
          <span class="nu">
           a null reference (
           <span class="keyword">
            Nothing
           </span>
           in Visual Basic)
          </span>
          .
         </td>
        </tr>
        <tr>
         <td>
          <a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">
           Autodesk.Revit.Exceptions
           InvalidOperationException
          </a>
         </td>
         <td>
          Thrown when the pipe cannot be created or regenerate fails.
         </td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <h1 class="heading">
     See Also
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="ab1718f9-45fb-b3d3-827e-32ff81cf929c.htm">
       Document Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="6d5d916a-5c40-7bd2-cb61-df052fac6282.htm">
       NewPipe Overload
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="ded320da-058a-4edd-0418-0582389559a7.htm">
       Autodesk.Revit.Creation Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>