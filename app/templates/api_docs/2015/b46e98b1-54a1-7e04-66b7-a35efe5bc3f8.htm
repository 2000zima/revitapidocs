<article id="api-content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="1cc4fe6c-0e9f-7439-0021-32d2e06f4c33.htm">
       FamilyManager Class
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Add a new family type with a given name and makes it be the current type.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <a href="7f15b213-c99b-db59-3622-3280757b82d9.htm">FamilyType</a> <span class="identifier">NewType</span>(
	<a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">string</a> <span class="parameter">typeName</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">NewType</span> ( _
	<span class="parameter">typeName</span> <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a> _
) <span class="keyword">As</span> <a href="7f15b213-c99b-db59-3622-3280757b82d9.htm">FamilyType</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<a href="7f15b213-c99b-db59-3622-3280757b82d9.htm">FamilyType</a>^ <span class="identifier">NewType</span>(
	<a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>^ <span class="parameter">typeName</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="typeName">
       <dt>
        <span class="parameter">
         typeName
        </span>
       </dt>
       <dd>
        Type:
        <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">
         System
         String
        </a>
        <br/>
        The name of new family type.
       </dd>
      </dl>
     </div>
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> EditFamilyTypes(Document document, FamilyInstance familyInstance)
{
    <span class="highlight-comment">// example works best when familyInstance is a rectangular concrete element</span>

    <span class="highlight-keyword">if</span> ((<span class="highlight-keyword">null</span> == document) || (<span class="highlight-keyword">null</span> == familyInstance.Symbol))
    {
        <span class="highlight-keyword">return</span>;   <span class="highlight-comment">// invalid arguments</span>
    }

    <span class="highlight-comment">// Get family associated with this</span>
    Family family = familyInstance.Symbol.Family;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == family)
    {
        <span class="highlight-keyword">return</span>;    <span class="highlight-comment">// could not get the family</span>
    }

    <span class="highlight-comment">// Get Family document for family</span>
    Document familyDoc = document.EditFamily(family);
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == familyDoc)
    {
        <span class="highlight-keyword">return</span>;    <span class="highlight-comment">// could not open a family for edit</span>
    }

    FamilyManager familyManager = familyDoc.FamilyManager;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == familyManager)
    {
        <span class="highlight-keyword">return</span>;  <span class="highlight-comment">// cuould not get a family manager</span>
    }

    <span class="highlight-comment">// Start transaction for the family document</span>
    <span class="highlight-keyword">using</span> (Transaction newFamilyTypeTransaction = <span class="highlight-keyword">new</span> Transaction(familyDoc, <span class="highlight-literal">"Add Type to Family"</span>))
    {
        <span class="highlight-keyword">int</span> changesMade = <span class="highlight-number">0</span>;
        newFamilyTypeTransaction.Start();

        <span class="highlight-comment">// add a new type and edit its parameters</span>
        FamilyType newFamilyType = familyManager.NewType(<span class="highlight-literal">"2X2"</span>);

        <span class="highlight-keyword">if</span> (newFamilyType != <span class="highlight-keyword">null</span>)
        {
            <span class="highlight-comment">// look for 'b' and 'h' parameters and set them to 2 feet</span>
            FamilyParameter familyParam = familyManager.get_Parameter(<span class="highlight-literal">"b"</span>);
            <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != familyParam)
            {
                familyManager.Set(familyParam, <span class="highlight-number">2.0</span>);
                changesMade += <span class="highlight-number">1</span>;
            }

            familyParam = familyManager.get_Parameter(<span class="highlight-literal">"h"</span>);
            <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != familyParam)
            {
                familyManager.Set(familyParam, <span class="highlight-number">2.0</span>);
                changesMade += <span class="highlight-number">1</span>;
            }
        }

        <span class="highlight-keyword">if</span> (<span class="highlight-number">2</span> == changesMade)   <span class="highlight-comment">// set both paramaters?</span>
        {
            newFamilyTypeTransaction.Commit();
        }
        <span class="highlight-keyword">else</span>   <span class="highlight-comment">// could not make the change -&gt; should roll back </span>
        {
            newFamilyTypeTransaction.RollBack();
        }

        <span class="highlight-comment">// if could not make the change or could not commit it, we return</span>
        <span class="highlight-keyword">if</span> (newFamilyTypeTransaction.GetStatus() != TransactionStatus.Committed)
        {
            <span class="highlight-keyword">return</span>;
        }
    }

    <span class="highlight-comment">// now update the Revit project with Family which has a new type</span>
    LoadOpts loadOptions = <span class="highlight-keyword">new</span> LoadOpts();

    <span class="highlight-comment">// This overload is necessary for reloading an edited family</span>
    <span class="highlight-comment">// back into the source document from which it was extracted</span>
    family = familyDoc.LoadFamily(document, loadOptions);
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != family)
    {
        <span class="highlight-comment">// find the new type and assign it to FamilyInstance</span>
        ISet&lt;ElementId&gt; familySymbolIds = family.GetFamilySymbolIds();
        <span class="highlight-keyword">foreach</span> (ElementId id <span class="highlight-keyword">in</span> familySymbolIds)
        {
            FamilySymbol familySymbol = family.Document.GetElement(id) <span class="highlight-keyword">as</span> FamilySymbol;
            <span class="highlight-keyword">if</span> ((<span class="highlight-keyword">null</span> != familySymbol) &amp;&amp; familySymbol.Name == <span class="highlight-literal">"2X2"</span>)
            {
                <span class="highlight-keyword">using</span> (Transaction changeSymbol = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Change Symbol Assignment"</span>))
                {
                    changeSymbol.Start();
                    familyInstance.Symbol = familySymbol;
                    changeSymbol.Commit();
                }
                <span class="highlight-keyword">break</span>;
            }
        }
    }
}

<span class="highlight-keyword">class</span> LoadOpts : IFamilyLoadOptions
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> OnFamilyFound(<span class="highlight-keyword">bool</span> familyInUse, <span class="highlight-keyword">out</span> <span class="highlight-keyword">bool</span> overwriteParameterValues)
    {
        overwriteParameterValues = <span class="highlight-keyword">true</span>;
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> OnSharedFamilyFound(Family sharedFamily, <span class="highlight-keyword">bool</span> familyInUse, <span class="highlight-keyword">out</span> FamilySource source, <span class="highlight-keyword">out</span> <span class="highlight-keyword">bool</span> overwriteParameterValues)
    {
        source = FamilySource.Family;
        overwriteParameterValues = <span class="highlight-keyword">true</span>;
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
    }
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> EditFamilyTypes(document <span class="highlight-keyword">As</span> Document, familyInstance <span class="highlight-keyword">As</span> FamilyInstance)
    <span class="highlight-comment">' example works best when familyInstance is a rectangular concrete element</span>


    <span class="highlight-keyword">If</span> (document <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span>) <span class="highlight-keyword">OrElse</span> (familyInstance.Symbol <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span>) <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' invalid arguments</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Get family associated with this</span>
    <span class="highlight-keyword">Dim</span> family <span class="highlight-keyword">As</span> Family = familyInstance.Symbol.Family
    <span class="highlight-keyword">If</span> family <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' could not get the family</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Get Family document for family</span>
    <span class="highlight-keyword">Dim</span> familyDoc <span class="highlight-keyword">As</span> Document = document.EditFamily(family)
    <span class="highlight-keyword">If</span> familyDoc <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' could not open a family for edit</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> familyManager <span class="highlight-keyword">As</span> FamilyManager = familyDoc.FamilyManager
    <span class="highlight-keyword">If</span> familyManager <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' cuould not get a family manager</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Start transaction for the family document</span>
    <span class="highlight-keyword">Using</span> newFamilyTypeTransaction <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(familyDoc, <span class="highlight-literal">"Add Type to Family"</span>)
        <span class="highlight-keyword">Dim</span> changesMade <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
        newFamilyTypeTransaction.Start()

        <span class="highlight-comment">' add a new type and edit its parameters</span>
        <span class="highlight-keyword">Dim</span> newFamilyType <span class="highlight-keyword">As</span> FamilyType = familyManager.NewType(<span class="highlight-literal">"2X2"</span>)

        <span class="highlight-keyword">If</span> newFamilyType <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' look for 'b' and 'h' parameters and set them to 2 feet</span>
            <span class="highlight-keyword">Dim</span> familyParam <span class="highlight-keyword">As</span> FamilyParameter = familyManager.Parameter(<span class="highlight-literal">"b"</span>)
            <span class="highlight-keyword">If</span> familyParam <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                familyManager.[<span class="highlight-keyword">Set</span>](familyParam, <span class="highlight-number">2.0</span>)
                changesMade += <span class="highlight-number">1</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            familyParam = familyManager.Parameter(<span class="highlight-literal">"h"</span>)
            <span class="highlight-keyword">If</span> familyParam <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                familyManager.[<span class="highlight-keyword">Set</span>](familyParam, <span class="highlight-number">2.0</span>)
                changesMade += <span class="highlight-number">1</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        <span class="highlight-keyword">If</span> <span class="highlight-number">2</span> = changesMade <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' set both paramaters?</span>
            newFamilyTypeTransaction.Commit()
        <span class="highlight-keyword">Else</span>
            <span class="highlight-comment">' could not make the change -&gt; should roll back </span>
            newFamilyTypeTransaction.RollBack()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        <span class="highlight-comment">' if could not make the change or could not commit it, we return</span>
        <span class="highlight-keyword">If</span> newFamilyTypeTransaction.GetStatus() &lt;&gt; TransactionStatus.Committed <span class="highlight-keyword">Then</span>
            <span class="highlight-keyword">Return</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

    <span class="highlight-comment">' now update the Revit project with Family which has a new type</span>
    <span class="highlight-keyword">Dim</span> loadOptions <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> LoadOpts()

    <span class="highlight-comment">' This overload is necessary for reloading an edited family</span>
    <span class="highlight-comment">' back into the source document from which it was extracted</span>
    family = familyDoc.LoadFamily(document, loadOptions)
    <span class="highlight-keyword">If</span> family <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' find the new type and assign it to FamilyInstance</span>
        <span class="highlight-keyword">Dim</span> familySymbolIds <span class="highlight-keyword">As</span> ISet(<span class="highlight-keyword">Of</span> ElementId) = family.GetFamilySymbolIds()
        <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> id <span class="highlight-keyword">As</span> ElementId <span class="highlight-keyword">In</span> familySymbolIds
            <span class="highlight-keyword">Dim</span> familySymbol <span class="highlight-keyword">As</span> FamilySymbol = <span class="highlight-keyword">TryCast</span>(family.Document.GetElement(id), FamilySymbol)
            <span class="highlight-keyword">If</span> (familySymbol <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>) <span class="highlight-keyword">AndAlso</span> familySymbol.Name = <span class="highlight-literal">"2X2"</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Using</span> changeSymbol <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Change Symbol Assignment"</span>)
                    changeSymbol.Start()
                    familyInstance.Symbol = familySymbol
                    changeSymbol.Commit()
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
                <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">Next</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Class</span> LoadOpts
    <span class="highlight-keyword">Implements</span> IFamilyLoadOptions
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnFamilyFound(familyInUse <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>, <span class="highlight-keyword">ByRef</span> overwriteParameterValues <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> <span class="highlight-keyword">Implements</span> IFamilyLoadOptions.OnFamilyFound
        overwriteParameterValues = <span class="highlight-keyword">True</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-keyword">True</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnSharedFamilyFound(sharedFamily <span class="highlight-keyword">As</span> Family, familyInUse <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>, <span class="highlight-keyword">ByRef</span> source <span class="highlight-keyword">As</span> FamilySource, <span class="highlight-keyword">ByRef</span> overwriteParameterValues <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> <span class="highlight-keyword">Implements</span> IFamilyLoadOptions.OnSharedFamilyFound
        source = FamilySource.Family
        overwriteParameterValues = <span class="highlight-keyword">True</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-keyword">True</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Exceptions
     <a name="exceptionsToggle">
     </a>
    </h1>
    <div class="section" id="exceptionsSection" name="collapseableSection" style="">
     <div class="tableSection">
      <table frame="lhs" width="100%">
       <tbody>
        <tr>
         <th class="exceptionNameColumn">
          Exception
         </th>
         <th class="exceptionConditionColumn">
          Condition
         </th>
        </tr>
        <tr>
         <td>
          <a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">
           Autodesk.Revit.Exceptions
           ArgumentNullException
          </a>
         </td>
         <td>
          Thrown when the input argument-"typeName"-is
          <span class="keyword">
          </span>
          <span class="nu">
           a null reference (
           <span class="keyword">
            Nothing
           </span>
           in Visual Basic)
          </span>
          .
         </td>
        </tr>
        <tr>
         <td>
          <a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">
           Autodesk.Revit.Exceptions
           ArgumentException
          </a>
         </td>
         <td>
          Thrown when the input argument-"typeName"-is already in use.
         </td>
        </tr>
        <tr>
         <td>
          <a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">
           Autodesk.Revit.Exceptions
           InvalidOperationException
          </a>
         </td>
         <td>
          Thrown when the family type creation failed.
         </td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="1cc4fe6c-0e9f-7439-0021-32d2e06f4c33.htm">
       FamilyManager Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</article>