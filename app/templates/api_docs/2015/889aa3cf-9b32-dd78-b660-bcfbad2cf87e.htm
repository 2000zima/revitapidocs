<div class="chm_content">
 <div id="header">
  <table cellpadding="0" cellspacing="0" id="topTable">
   <tbody>
    <tr>
     <td>
      <span>
      </span>
     </td>
    </tr>
   </tbody>
  </table>
  <table cellpadding="0" cellspacing="0" id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="9df1087e-e276-d4d7-76d6-99a2bb7daad2.htm">
       Members
      </a>
      <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">
       Example
      </a>
      <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     An object that represents an Area Reinforcement within the Autodesk Revit project.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">
      Autodesk.Revit.DB.Structure
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
    </p>
    <h1 class="heading">
     Syntax
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">AreaReinforcement</span> : <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">AreaReinforcement</span> _
	<span class="keyword">Inherits</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">AreaReinforcement</span> : <span class="keyword">public</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
    </div>
    <h1 class="heading">
     Remarks
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     This object derived from the Element base object and such supports all the
   methods of that object such as the ability to retrieve the parameters of that object.
   The Area Reinforcement element is available only in the Autodesk Revit Structure product.
    </div>
    <h1 class="heading">
     Examples
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> GetInfo_AreaReinforcement(AreaReinforcement areaReinforcement)
{
    <span class="highlight-keyword">string</span> message = <span class="highlight-literal">"AreaReinforcement : "</span>;

    <span class="highlight-comment">// Show the AreaReinforcement Type information</span>
    <span class="highlight-comment">//message += "\nType : " + areaReinforcement.AreaReinforcementType.Name;</span>

    <span class="highlight-comment">// Show the AreaReinforcement bar information</span>
    IList&lt;ElementId&gt; rebarInSystemIds = areaReinforcement.GetRebarInSystemIds();
    message += <span class="highlight-literal">"\nNumber of distinct bar shapes : "</span> + rebarInSystemIds.Count;

    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; rebarInSystemIds.Count; i++)
    {
        RebarInSystem ris = doc.GetElement(rebarInSystemIds[<span class="highlight-number">0</span>]) <span class="highlight-keyword">as</span> RebarInSystem;
        message += <span class="highlight-literal">"\nBar count : "</span> + ris.Quantity;
        message += <span class="highlight-literal">"\nBar type name : "</span> + ris.Name;
        message += <span class="highlight-literal">"\nBar length : "</span> + ris.LookupParameter(<span class="highlight-literal">"Bar Length"</span>).AsDouble();
    }

    <span class="highlight-comment">// Show the AreaReinforcement Curves information</span>
    IList&lt;ElementId&gt; curveIds = areaReinforcement.GetBoundaryCurveIds();
    message += <span class="highlight-literal">"\nArea Reinforcement has "</span> + curveIds.Count + <span class="highlight-literal">" boundary curves."</span>;
    <span class="highlight-keyword">foreach</span> (Autodesk.Revit.DB.ElementId ii <span class="highlight-keyword">in</span> curveIds)
    {
        AreaReinforcementCurve reinCurve = doc.GetElement(ii) <span class="highlight-keyword">as</span> AreaReinforcementCurve;
        <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == reinCurve)
        {
            <span class="highlight-keyword">continue</span>;
        }
        Curve curve = reinCurve.Curve; <span class="highlight-comment">// get the location curve</span>
        XYZ start = curve.GetEndPoint(<span class="highlight-number">0</span>);  <span class="highlight-comment">// get the start point of the curve</span>
        XYZ end = curve.GetEndPoint(<span class="highlight-number">1</span>);    <span class="highlight-comment">// get the end point of the curve</span>
        message += <span class="highlight-literal">"\nCurve: Start point ("</span> + start.X + <span class="highlight-literal">", "</span> + start.Y + <span class="highlight-literal">", "</span> + start.Z + <span class="highlight-literal">")"</span>;
        message += <span class="highlight-literal">"\n       End point ("</span> + end.X + <span class="highlight-literal">", "</span> + end.Y + <span class="highlight-literal">", "</span> + end.Z + <span class="highlight-literal">")"</span>;
    }

    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, message);
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> GetInfo_AreaReinforcement(areaReinforcement <span class="highlight-keyword">As</span> AreaReinforcement)
    <span class="highlight-keyword">Dim</span> message <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"AreaReinforcement : "</span>

    <span class="highlight-comment">' Show the AreaReinforcement Type information</span>
    <span class="highlight-comment">'message += "\nType : " + areaReinforcement.AreaReinforcementType.Name;</span>


    <span class="highlight-comment">' Show the AreaReinforcement bar information</span>
    <span class="highlight-keyword">Dim</span> rebarInSystemIds <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> ElementId) = areaReinforcement.GetRebarInSystemIds()
    message += vbLf &amp; <span class="highlight-literal">"Number of distinct bar shapes : "</span> &amp; rebarInSystemIds.Count

    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> rebarInSystemIds.Count - <span class="highlight-number">1</span>
        <span class="highlight-keyword">Dim</span> ris <span class="highlight-keyword">As</span> RebarInSystem = <span class="highlight-keyword">TryCast</span>(doc.GetElement(rebarInSystemIds(<span class="highlight-number">0</span>)), RebarInSystem)
        message += vbLf &amp; <span class="highlight-literal">"Bar count : "</span> + ris.Quantity
        message += vbLf &amp; <span class="highlight-literal">"Bar type name : "</span> + ris.Name
        message += vbLf &amp; <span class="highlight-literal">"Bar length : "</span> &amp; ris.LookupParameter(<span class="highlight-literal">"Bar Length"</span>).AsDouble()
    <span class="highlight-keyword">Next</span>

    <span class="highlight-comment">' Show the AreaReinforcement Curves information</span>
    <span class="highlight-keyword">Dim</span> curveIds <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> ElementId) = areaReinforcement.GetBoundaryCurveIds()
    message += vbLf &amp; <span class="highlight-literal">"Area Reinforcement has "</span> &amp; curveIds.Count &amp; <span class="highlight-literal">" boundary curves."</span>
    <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> ii <span class="highlight-keyword">As</span> Autodesk.Revit.DB.ElementId <span class="highlight-keyword">In</span> curveIds
        <span class="highlight-keyword">Dim</span> reinCurve <span class="highlight-keyword">As</span> AreaReinforcementCurve = <span class="highlight-keyword">TryCast</span>(doc.GetElement(ii), AreaReinforcementCurve)
        <span class="highlight-keyword">If</span> reinCurve <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">For</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">Dim</span> curve <span class="highlight-keyword">As</span> Curve = reinCurve.Curve
        <span class="highlight-comment">' get the location curve</span>
        <span class="highlight-keyword">Dim</span> start <span class="highlight-keyword">As</span> XYZ = curve.GetEndPoint(<span class="highlight-number">0</span>)
        <span class="highlight-comment">' get the start point of the curve</span>
        <span class="highlight-keyword">Dim</span> [<span class="highlight-keyword">end</span>] <span class="highlight-keyword">As</span> XYZ = curve.GetEndPoint(<span class="highlight-number">1</span>)
        <span class="highlight-comment">' get the end point of the curve</span>
        message += ((vbLf &amp; <span class="highlight-literal">"Curve: Start point ("</span> + start.X &amp; <span class="highlight-literal">", "</span>) + start.Y &amp; <span class="highlight-literal">", "</span>) + start.Z &amp; <span class="highlight-literal">")"</span>
        message += ((vbLf &amp; <span class="highlight-literal">"       End point ("</span> + [<span class="highlight-keyword">end</span>].X &amp; <span class="highlight-literal">", "</span>) + [<span class="highlight-keyword">end</span>].Y &amp; <span class="highlight-literal">", "</span>) + [<span class="highlight-keyword">end</span>].Z &amp; <span class="highlight-literal">")"</span>
    <span class="highlight-keyword">Next</span>

    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, message)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Inheritance Hierarchy
    </h1>
    <div class="section" id="familySection" name="collapseableSection" style="">
     <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">
      System
      Object
     </a>
     <br/>
     <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">
      Autodesk.Revit.DB
      Element
     </a>
     <br/>
     <span class="selflink">
      Autodesk.Revit.DB.Structure
      AreaReinforcement
     </span>
     <br/>
    </div>
    <h1 class="heading">
     See Also
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="9df1087e-e276-d4d7-76d6-99a2bb7daad2.htm">
       AreaReinforcement Members
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">
       Autodesk.Revit.DB.Structure Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>