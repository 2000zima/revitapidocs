<article id="api-content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="af2ee879-173d-df3a-9793-8d5750a17b49.htm">
       ViewSheet Class
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       See Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Creates a new ViewSheet.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
     <br/>
     <b>
      Since:
     </b>
     2013
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">static</span> <a href="af2ee879-173d-df3a-9793-8d5750a17b49.htm">ViewSheet</a> <span class="identifier">Create</span>(
	<a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a> <span class="parameter">document</span>,
	<a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a> <span class="parameter">titleBlockTypeId</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">Create</span> ( _
	<span class="parameter">document</span> <span class="keyword">As</span> <a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a>, _
	<span class="parameter">titleBlockTypeId</span> <span class="keyword">As</span> <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a> _
) <span class="keyword">As</span> <a href="af2ee879-173d-df3a-9793-8d5750a17b49.htm">ViewSheet</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<span class="keyword">static</span> <a href="af2ee879-173d-df3a-9793-8d5750a17b49.htm">ViewSheet</a>^ <span class="identifier">Create</span>(
	<a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a>^ <span class="parameter">document</span>, 
	<a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">ElementId</a>^ <span class="parameter">titleBlockTypeId</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="document">
       <dt>
        <span class="parameter">
         document
        </span>
       </dt>
       <dd>
        Type:
        <a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">
         Autodesk.Revit.DB
         Document
        </a>
        <br/>
        The document to which the ViewSheet will be added.
       </dd>
      </dl>
      <dl paramname="titleBlockTypeId">
       <dt>
        <span class="parameter">
         titleBlockTypeId
        </span>
       </dt>
       <dd>
        Type:
        <a href="44f3f7b1-3229-3404-93c9-dc5e70337dd6.htm">
         Autodesk.Revit.DB
         ElementId
        </a>
        <br/>
        The type id of the TitleBlock type which will be used by the new ViewSheet.
   For no TitleBlock, pass invalid element ID.
       </dd>
      </dl>
     </div>
     <h4 class="subHeading">
      Return Value
     </h4>
     The new ViewSheet.
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> CreateSheetView(Autodesk.Revit.DB.Document document, View3D view3D)
{

    <span class="highlight-comment">// Get an available title block from document</span>
    FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
    collector.OfClass(<span class="highlight-keyword">typeof</span>(FamilySymbol));
    collector.OfCategory(BuiltInCategory.OST_TitleBlocks);

    FamilySymbol fs = collector.FirstElement() <span class="highlight-keyword">as</span> FamilySymbol;
    <span class="highlight-keyword">if</span> (fs != <span class="highlight-keyword">null</span>)
    {
        <span class="highlight-keyword">using</span> (Transaction t = <span class="highlight-keyword">new</span> Transaction(document, <span class="highlight-literal">"Create a new ViewSheet"</span>))
        {
            t.Start();
            <span class="highlight-keyword">try</span>
            {
                <span class="highlight-comment">// Create a sheet view</span>
                ViewSheet viewSheet = ViewSheet.Create(document, fs.Id);
                <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == viewSheet)
                {
                    <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Failed to create new ViewSheet."</span>);
                }

                <span class="highlight-comment">// Add passed in view onto the center of the sheet</span>
                UV location = <span class="highlight-keyword">new</span> UV((viewSheet.Outline.Max.U - viewSheet.Outline.Min.U) / <span class="highlight-number">2</span>,
                                     (viewSheet.Outline.Max.V - viewSheet.Outline.Min.V) / <span class="highlight-number">2</span>);

                <span class="highlight-comment">//viewSheet.AddView(view3D, location);</span>
                Viewport.Create(document, viewSheet.Id, view3D.Id, <span class="highlight-keyword">new</span> XYZ(location.U, location.V, <span class="highlight-number">0</span>));

                <span class="highlight-comment">// Print the sheet out</span>
                <span class="highlight-keyword">if</span> (viewSheet.CanBePrinted)
                {
                    TaskDialog taskDialog = <span class="highlight-keyword">new</span> TaskDialog(<span class="highlight-literal">"Revit"</span>);
                    taskDialog.MainContent = <span class="highlight-literal">"Print the sheet?"</span>;
                    TaskDialogCommonButtons buttons = TaskDialogCommonButtons.Yes | TaskDialogCommonButtons.No;
                    taskDialog.CommonButtons = buttons;
                    TaskDialogResult result = taskDialog.Show();

                    <span class="highlight-keyword">if</span> (result == TaskDialogResult.Yes)
                    {
                        viewSheet.Print();
                    }
                }

                t.Commit();
            }
            <span class="highlight-keyword">catch</span>
            {
                t.RollBack();
            }
        }
    }
}</code></pre>
      </div>
     </span>
     <span codelanguage="CSharp" id="cbc_2" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> CreateSheetView(Autodesk.Revit.DB.Document document, View3D view3D)
{

    <span class="highlight-comment">// Get an available title block from document</span>
    IEnumerable&lt;FamilySymbol&gt;�familyList =�from�elem�<span class="highlight-keyword">in</span>�<span class="highlight-keyword">new</span>�FilteredElementCollector(document)
                                               .OfClass(<span class="highlight-keyword">typeof</span>(FamilySymbol))
                                               .OfCategory(BuiltInCategory.OST_TitleBlocks)�        
                                           let�type = elem�<span class="highlight-keyword">as</span>�FamilySymbol    �
                                           where�type.Name.Contains(<span class="highlight-literal">"E1"</span>)�        
                                           select�type;


    <span class="highlight-comment">// Create a sheet view</span>
    ViewSheet viewSheet = ViewSheet.Create(document, familyList.First().Id);
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == viewSheet)
    {
        <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Failed to create new ViewSheet."</span>);
    }

    <span class="highlight-comment">// Add passed in view onto the center of the sheet</span>
    <span class="highlight-keyword">if</span> (Viewport.CanAddViewToSheet(document, viewSheet.Id, view3D.Id))
    {
        BoundingBoxUV sheetBox = viewSheet.Outline;
        <span class="highlight-keyword">double</span> yPosition = (sheetBox.Max.V - sheetBox.Min.V) / <span class="highlight-number">2</span> + sheetBox.Min.V;
        <span class="highlight-keyword">double</span> xPosition = (sheetBox.Max.U - sheetBox.Min.U) / <span class="highlight-number">2</span> + sheetBox.Min.U;

        XYZ origin = <span class="highlight-keyword">new</span> XYZ(xPosition, yPosition, <span class="highlight-number">0</span>);
        Viewport viewport = Viewport.Create(document, viewSheet.Id, view3D.Id, origin);
    }

    <span class="highlight-comment">// Print the sheet out</span>
    <span class="highlight-keyword">if</span> (viewSheet.CanBePrinted)
    {
       TaskDialog taskDialog = <span class="highlight-keyword">new</span> TaskDialog(<span class="highlight-literal">"Revit"</span>);
       taskDialog.MainContent = <span class="highlight-literal">"Print the sheet?"</span>;
       TaskDialogCommonButtons buttons = TaskDialogCommonButtons.Yes | TaskDialogCommonButtons.No;
       taskDialog.CommonButtons = buttons;
       TaskDialogResult result = taskDialog.Show();

        <span class="highlight-keyword">if</span> (result == TaskDialogResult.Yes)
        {
            viewSheet.Print();
        }
    }
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_3" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> CreateSheetView(document <span class="highlight-keyword">As</span> Autodesk.Revit.DB.Document, view3D <span class="highlight-keyword">As</span> View3D)

    <span class="highlight-comment">' Get an available title block from document</span>
    <span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(document)
    collector.OfClass(<span class="highlight-keyword">GetType</span>(FamilySymbol))
    collector.OfCategory(BuiltInCategory.OST_TitleBlocks)

    <span class="highlight-keyword">Dim</span> fs <span class="highlight-keyword">As</span> FamilySymbol = <span class="highlight-keyword">TryCast</span>(collector.FirstElement(), FamilySymbol)
    <span class="highlight-keyword">If</span> fs <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Using</span> t <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document, <span class="highlight-literal">"Create a new ViewSheet"</span>)
            t.Start()
            <span class="highlight-keyword">Try</span>
                <span class="highlight-comment">' Create a sheet view</span>
                <span class="highlight-keyword">Dim</span> viewSheet__1 <span class="highlight-keyword">As</span> ViewSheet = ViewSheet.Create(document, fs.Id)
                <span class="highlight-keyword">If</span> viewSheet__1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                    <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Failed to create new ViewSheet."</span>)
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                <span class="highlight-comment">' Add passed in view onto the center of the sheet</span>
                <span class="highlight-keyword">Dim</span> location <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> UV((viewSheet__1.Outline.Max.U - viewSheet__1.Outline.Min.U) / <span class="highlight-number">2</span>, (viewSheet__1.Outline.Max.V - viewSheet__1.Outline.Min.V) / <span class="highlight-number">2</span>)

                <span class="highlight-comment">'viewSheet.AddView(view3D, location);</span>
                Viewport.Create(document, viewSheet__1.Id, view3D.Id, <span class="highlight-keyword">New</span> XYZ(location.U, location.V, <span class="highlight-number">0</span>))

                <span class="highlight-comment">' Print the sheet out</span>
                <span class="highlight-keyword">If</span> viewSheet__1.CanBePrinted <span class="highlight-keyword">Then</span>
                    <span class="highlight-keyword">Dim</span> taskDialog <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> TaskDialog(<span class="highlight-literal">"Revit"</span>)
                    taskDialog.MainContent = <span class="highlight-literal">"Print the sheet?"</span>
                    <span class="highlight-keyword">Dim</span> buttons <span class="highlight-keyword">As</span> TaskDialogCommonButtons = TaskDialogCommonButtons.Yes <span class="highlight-keyword">Or</span> TaskDialogCommonButtons.No
                    taskDialog.CommonButtons = buttons
                    <span class="highlight-keyword">Dim</span> result <span class="highlight-keyword">As</span> TaskDialogResult = taskDialog.Show()

                    <span class="highlight-keyword">If</span> result = TaskDialogResult.Yes <span class="highlight-keyword">Then</span>
                        viewSheet__1.Print()
                    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                t.Commit()
            <span class="highlight-keyword">Catch</span>
                t.RollBack()
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Try</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_4" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> CreateSheetView(document <span class="highlight-keyword">As</span> Autodesk.Revit.DB.Document, view3D <span class="highlight-keyword">As</span> View3D)

    <span class="highlight-comment">' Get an available title block from document</span>
    <span class="highlight-keyword">Dim</span> collector1 <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(document)
    collector1 = collector1.OfClass(<span class="highlight-keyword">GetType</span>(FamilySymbol)).OfCategory(BuiltInCategory.OST_TitleBlocks)
    <span class="highlight-keyword">Dim</span> familyList <span class="highlight-keyword">As</span> IEnumerable(<span class="highlight-keyword">Of</span> FamilySymbol)

    familyList = From elem <span class="highlight-keyword">In</span> collector1
                 Let fstype = <span class="highlight-keyword">TryCast</span>(elem, FamilySymbol)
                 Where fstype.Name.Contains(<span class="highlight-literal">"E1"</span>)
                 <span class="highlight-keyword">Select</span> fstype


    <span class="highlight-comment">' Create a sheet view</span>
    <span class="highlight-keyword">Dim</span> viewSheet__1 <span class="highlight-keyword">As</span> ViewSheet = ViewSheet.Create(document, familyList.First().Id)
    <span class="highlight-keyword">If</span> viewSheet__1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Failed to create new ViewSheet."</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Add passed in view onto the center of the sheet</span>
    <span class="highlight-keyword">If</span> Viewport.CanAddViewToSheet(document, viewSheet__1.Id, view3D.Id) <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Dim</span> sheetBox <span class="highlight-keyword">As</span> BoundingBoxUV = viewSheet__1.Outline
        <span class="highlight-keyword">Dim</span> yPosition <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = (sheetBox.Max.V - sheetBox.Min.V) / <span class="highlight-number">2</span> + sheetBox.Min.V
        <span class="highlight-keyword">Dim</span> xPosition <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = (sheetBox.Max.U - sheetBox.Min.U) / <span class="highlight-number">2</span> + sheetBox.Min.U

        <span class="highlight-keyword">Dim</span> origin <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(xPosition, yPosition, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">Dim</span> viewport__2 <span class="highlight-keyword">As</span> Viewport = Viewport.Create(document, viewSheet__1.Id, view3D.Id, origin)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Print the sheet out</span>
    <span class="highlight-keyword">If</span> viewSheet__1.CanBePrinted <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Dim</span> taskDialog <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> TaskDialog(<span class="highlight-literal">"Revit"</span>)
        taskDialog.MainContent = <span class="highlight-literal">"Print the sheet?"</span>
        <span class="highlight-keyword">Dim</span> buttons <span class="highlight-keyword">As</span> TaskDialogCommonButtons = TaskDialogCommonButtons.Yes <span class="highlight-keyword">Or</span> TaskDialogCommonButtons.No
        taskDialog.CommonButtons = buttons
        <span class="highlight-keyword">Dim</span> result <span class="highlight-keyword">As</span> TaskDialogResult = taskDialog.Show()

        <span class="highlight-keyword">If</span> result = TaskDialogResult.Yes <span class="highlight-keyword">Then</span>
            viewSheet__1.Print()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Exceptions
     <a name="exceptionsToggle">
     </a>
    </h1>
    <div class="section" id="exceptionsSection" name="collapseableSection" style="">
     <div class="tableSection">
      <table frame="lhs" width="100%">
       <tbody>
        <tr>
         <th class="exceptionNameColumn">
          Exception
         </th>
         <th class="exceptionConditionColumn">
          Condition
         </th>
        </tr>
        <tr>
         <td>
          <a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">
           Autodesk.Revit.Exceptions
           ArgumentException
          </a>
         </td>
         <td>
          The ElementId titleBlockTypeId does not correspond to a TitleBlock type.
   -or-
   document is not a project document.
         </td>
        </tr>
        <tr>
         <td>
          <a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">
           Autodesk.Revit.Exceptions
           ArgumentNullException
          </a>
         </td>
         <td>
          A non-optional argument was NULL
         </td>
        </tr>
        <tr>
         <td>
          <a href="53205486-5917-7c33-8e67-e362106ddc97.htm">
           Autodesk.Revit.Exceptions
           ModificationForbiddenException
          </a>
         </td>
         <td>
          The document is in failure mode: an operation has failed,
   and Revit requires the user to either cancel the operation
   or fix the problem (usually by deleting certain elements).
   -or-
   The document is being loaded, or is in the midst of another
   sensitive process.
         </td>
        </tr>
        <tr>
         <td>
          <a href="8f025460-c283-ea99-aa8a-5a36e11528f4.htm">
           Autodesk.Revit.Exceptions
           ModificationOutsideTransactionException
          </a>
         </td>
         <td>
          The document has no open transaction.
         </td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="af2ee879-173d-df3a-9793-8d5750a17b49.htm">
       ViewSheet Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</article>