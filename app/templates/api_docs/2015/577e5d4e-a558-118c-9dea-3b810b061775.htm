<div class="chm_content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="42715128-e45b-1c56-25fa-84a0855a3012.htm">
       Members
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Represents a Level line within Autodesk Revit.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">Level</span> : <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">Level</span> _
	<span class="keyword">Inherits</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">Level</span> : <span class="keyword">public</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
    </div>
    <h1 class="heading">
     Remarks
     <a name="remarksToggle">
     </a>
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     The Name property can be used to retrieve
the user visible name of the level that appears in the level bubble.
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> GetLevelInformation(Autodesk.Revit.DB.Element element)
{
    <span class="highlight-comment">// Get the level object to which the element is assigned.</span>
    <span class="highlight-keyword">if</span> (element.LevelId.Equals(ElementId.InvalidElementId))
    {
        TaskDialog.Show(<span class="highlight-literal">"Revit"</span>,<span class="highlight-literal">"The element isn't based on a level."</span>);
    }
    <span class="highlight-keyword">else</span>
    {
        Level level = element.Document.GetElement(element.LevelId) <span class="highlight-keyword">as</span> Level;

        <span class="highlight-comment">// Format the prompt information(Name and elevation)</span>
        String prompt = <span class="highlight-literal">"The element is based on a level."</span>;
        prompt += <span class="highlight-literal">"\nThe level name is:  "</span> + level.Name;
        prompt += <span class="highlight-literal">"\nThe level elevation is:  "</span> + level.Elevation;

        <span class="highlight-comment">// Show the information to the user.</span>
        TaskDialog.Show(<span class="highlight-literal">"Revit"</span>,prompt);
    }
}</code></pre>
      </div>
     </span>
     <span codelanguage="CSharp" id="cbc_2" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> Getinfo_Level(Document document)
{
    StringBuilder levelInformation = <span class="highlight-keyword">new</span> StringBuilder();
    <span class="highlight-keyword">int</span> levelNumber = <span class="highlight-number">0</span>;
    FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
    ICollection&lt;Element&gt; collection = collector.OfClass(<span class="highlight-keyword">typeof</span>(Level)).ToElements();
    <span class="highlight-keyword">foreach</span> (Element e <span class="highlight-keyword">in</span> collection)
    {
        Level level = e <span class="highlight-keyword">as</span> Level;

        <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != level)
        {
            <span class="highlight-comment">// keep track of number of levels</span>
            levelNumber++;

            <span class="highlight-comment">//get the name of the level</span>
            levelInformation.Append(<span class="highlight-literal">"\nLevel Name: "</span> + level.Name);

            <span class="highlight-comment">//get the elevation of the level</span>
            levelInformation.Append(<span class="highlight-literal">"\n\tElevation: "</span> + level.Elevation);

            <span class="highlight-comment">// get the project elevation of the level</span>
            levelInformation.Append(<span class="highlight-literal">"\n\tProject Elevation: "</span> + level.ProjectElevation);
        }
    }

    <span class="highlight-comment">//number of total levels in current document</span>
    levelInformation.Append(<span class="highlight-literal">"\n\n There are "</span> + levelNumber + <span class="highlight-literal">" levels in the document!"</span>);

    <span class="highlight-comment">//show the level information in the messagebox</span>
    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>,levelInformation.ToString());
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_3" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> GetLevelInformation(element <span class="highlight-keyword">As</span> Autodesk.Revit.DB.Element)
    <span class="highlight-comment">' Get the level object to which the element is assigned.</span>
    <span class="highlight-keyword">If</span> element.LevelId.Equals(ElementId.InvalidElementId) <span class="highlight-keyword">Then</span>
        TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, <span class="highlight-literal">"The element isn't based on a level."</span>)
    <span class="highlight-keyword">Else</span>
        <span class="highlight-keyword">Dim</span> level <span class="highlight-keyword">As</span> Level = <span class="highlight-keyword">TryCast</span>(element.Document.GetElement(element.LevelId), Level)

        <span class="highlight-comment">' Format the prompt information(Name and elevation)</span>
        <span class="highlight-keyword">Dim</span> prompt <span class="highlight-keyword">As</span> [<span class="highlight-keyword">String</span>] = <span class="highlight-literal">"The element is based on a level."</span>
        prompt += vbLf &amp; <span class="highlight-literal">"The level name is:  "</span> + level.Name
        prompt += vbLf &amp; <span class="highlight-literal">"The level elevation is:  "</span> + level.Elevation

        <span class="highlight-comment">' Show the information to the user.</span>
        TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, prompt)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_4" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> Getinfo_Level(document <span class="highlight-keyword">As</span> Document)
    <span class="highlight-keyword">Dim</span> levelInformation <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> StringBuilder()
    <span class="highlight-keyword">Dim</span> levelNumber <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
    <span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(document)
    <span class="highlight-keyword">Dim</span> collection <span class="highlight-keyword">As</span> ICollection(<span class="highlight-keyword">Of</span> Element) = collector.OfClass(<span class="highlight-keyword">GetType</span>(Level)).ToElements()
    <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> e <span class="highlight-keyword">As</span> Element <span class="highlight-keyword">In</span> collection
        <span class="highlight-keyword">Dim</span> level <span class="highlight-keyword">As</span> Level = <span class="highlight-keyword">TryCast</span>(e, Level)

        <span class="highlight-keyword">If</span> level <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' keep track of number of levels</span>
            levelNumber += <span class="highlight-number">1</span>

            <span class="highlight-comment">'get the name of the level</span>
            levelInformation.Append(vbLf &amp; <span class="highlight-literal">"Level Name: "</span> + level.Name)

            <span class="highlight-comment">'get the elevation of the level</span>
            levelInformation.Append(vbLf &amp; vbTab &amp; <span class="highlight-literal">"Elevation: "</span> + level.Elevation)

            <span class="highlight-comment">' get the project elevation of the level</span>
            levelInformation.Append(vbLf &amp; vbTab &amp; <span class="highlight-literal">"Project Elevation: "</span> + level.ProjectElevation)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Next</span>

    <span class="highlight-comment">'number of total levels in current document</span>
    levelInformation.Append(vbLf &amp; vbLf &amp; <span class="highlight-literal">" There are "</span> &amp; levelNumber &amp; <span class="highlight-literal">" levels in the document!"</span>)

    <span class="highlight-comment">'show the level information in the messagebox</span>
    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, levelInformation.ToString())
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Inheritance Hierarchy
     <a name="familyToggle">
     </a>
    </h1>
    <div class="section" id="familySection" name="collapseableSection" style="">
     <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">
      System
      Object
     </a>
     <br/>
     <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">
      Autodesk.Revit.DB
      Element
     </a>
     <br/>
     <span class="selflink">
      Autodesk.Revit.DB
      Level
     </span>
     <br/>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="42715128-e45b-1c56-25fa-84a0855a3012.htm">
       Level Members
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>