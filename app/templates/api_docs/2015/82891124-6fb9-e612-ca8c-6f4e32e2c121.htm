<article id="api-content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="489a8893-e4a2-d720-6e7d-d37f0953bf1e.htm">
       Members
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     An object that represents a load combination.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">
      Autodesk.Revit.DB.Structure
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">LoadCombination</span> : <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">LoadCombination</span> _
	<span class="keyword">Inherits</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">LoadCombination</span> : <span class="keyword">public</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> CombinationInformation(LoadCombination loadCombination)
{
    StringBuilder information = <span class="highlight-keyword">new</span> StringBuilder();

    <span class="highlight-comment">//Get the string with Load Combination Name or empty string</span>
    information.Append(<span class="highlight-literal">"\n\nCombination Name: "</span> + loadCombination.Name);

    <span class="highlight-comment">//Get the string with Load Combination State</span>
    information.Append(<span class="highlight-literal">"\nCombination state: "</span> + loadCombination.CombinationState);

    <span class="highlight-comment">//Load Combination State index or 0</span>
    information.Append(<span class="highlight-literal">"\nState index : "</span> + loadCombination.CombinationStateIndex.ToString());

    <span class="highlight-comment">//Get the string with Load Combination Type</span>
    information.Append(<span class="highlight-literal">"\nCombination type: "</span> + loadCombination.CombinationType);

    <span class="highlight-comment">//Get Load Combination Type index or 0</span>
    information.Append(<span class="highlight-literal">"\nType index: "</span> + loadCombination.CombinationTypeIndex.ToString());

    <span class="highlight-comment">//Get the number of Load Combination Components </span>
    <span class="highlight-keyword">int</span> componentsNumber = loadCombination.NumberOfComponents;
    information.Append(<span class="highlight-literal">"\nComponents number: "</span> + componentsNumber.ToString());
    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> j = <span class="highlight-number">0</span>; j &lt; componentsNumber; j++)
    {
        <span class="highlight-keyword">double</span> factor = loadCombination.get_Factor(j);
        <span class="highlight-keyword">string</span> caseName = loadCombination.get_CombinationCaseName(j);
        information.Append(<span class="highlight-literal">"\nCase name["</span> + j.ToString() + <span class="highlight-literal">"]: "</span> + caseName + <span class="highlight-literal">"  factor: "</span> +
                              factor.ToString());
    }

    <span class="highlight-comment">//return the number of usage in the combination</span>
    <span class="highlight-keyword">int</span> usageNumber = loadCombination.NumberOfUsages;
    information.Append(<span class="highlight-literal">"\nNumber of usages: "</span> + usageNumber + <span class="highlight-literal">"\nUsage names: "</span>);
    <span class="highlight-comment">//get each usage name</span>
    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; usageNumber; i++)
    {
        information.Append(loadCombination.get_UsageName(i) + <span class="highlight-literal">"  "</span>);
    }

    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>,information.ToString());
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> CombinationInformation(loadCombination <span class="highlight-keyword">As</span> LoadCombination)
    <span class="highlight-keyword">Dim</span> information <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> StringBuilder()

    <span class="highlight-comment">'Get the string with Load Combination Name or empty string</span>
    information.Append(vbLf &amp; vbLf &amp; <span class="highlight-literal">"Combination Name: "</span> &amp; Convert.ToString(loadCombination.Name))

    <span class="highlight-comment">'Get the string with Load Combination State</span>
    information.Append(vbLf &amp; <span class="highlight-literal">"Combination state: "</span> &amp; Convert.ToString(loadCombination.CombinationState))

    <span class="highlight-comment">'Load Combination State index or 0</span>
    information.Append(vbLf &amp; <span class="highlight-literal">"State index : "</span> &amp; loadCombination.CombinationStateIndex.ToString())

    <span class="highlight-comment">'Get the string with Load Combination Type</span>
    information.Append(vbLf &amp; <span class="highlight-literal">"Combination type: "</span> &amp; Convert.ToString(loadCombination.CombinationType))

    <span class="highlight-comment">'Get Load Combination Type index or 0</span>
    information.Append(vbLf &amp; <span class="highlight-literal">"Type index: "</span> &amp; loadCombination.CombinationTypeIndex.ToString())

    <span class="highlight-comment">'Get the number of Load Combination Components </span>
    <span class="highlight-keyword">Dim</span> componentsNumber <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = loadCombination.NumberOfComponents
    information.Append(vbLf &amp; <span class="highlight-literal">"Components number: "</span> &amp; componentsNumber.ToString())
    <span class="highlight-keyword">For</span> j <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> componentsNumber - <span class="highlight-number">1</span>
        <span class="highlight-keyword">Dim</span> factor <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = loadCombination.Factor(j)
        <span class="highlight-keyword">Dim</span> caseName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = loadCombination.CombinationCaseName(j)
        information.Append(vbLf &amp; <span class="highlight-literal">"Case name["</span> &amp; j.ToString() &amp; <span class="highlight-literal">"]: "</span> &amp; caseName &amp; <span class="highlight-literal">"  factor: "</span> &amp; factor.ToString())
    <span class="highlight-keyword">Next</span>

    <span class="highlight-comment">'return the number of usage in the combination</span>
    <span class="highlight-keyword">Dim</span> usageNumber <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = loadCombination.NumberOfUsages
    information.Append(vbLf &amp; <span class="highlight-literal">"Number of usages: "</span> &amp; usageNumber &amp; vbLf &amp; <span class="highlight-literal">"Usage names: "</span>)
    <span class="highlight-comment">'get each usage name</span>
    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> usageNumber - <span class="highlight-number">1</span>
        information.Append(loadCombination.UsageName(i) &amp; <span class="highlight-literal">"  "</span>)
    <span class="highlight-keyword">Next</span>

    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, information.ToString())
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Inheritance Hierarchy
     <a name="familyToggle">
     </a>
    </h1>
    <div class="section" id="familySection" name="collapseableSection" style="">
     <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">
      System
      Object
     </a>
     <br/>
     <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">
      Autodesk.Revit.DB
      Element
     </a>
     <br/>
     <span class="selflink">
      Autodesk.Revit.DB.Structure
      LoadCombination
     </span>
     <br/>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="489a8893-e4a2-d720-6e7d-d37f0953bf1e.htm">
       LoadCombination Members
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">
       Autodesk.Revit.DB.Structure Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</article>