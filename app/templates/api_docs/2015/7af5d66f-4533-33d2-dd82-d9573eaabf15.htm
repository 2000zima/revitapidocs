<div class="chm_content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">
       Element Class
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Retrieves a set containing all of the parameters that are contained within the element.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <a href="6e6e8667-ebe2-0c60-c180-9d8000cff598.htm">ParameterSet</a> <span class="identifier">Parameters</span> { <span class="keyword">get</span>; }</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">ReadOnly</span> <span class="keyword">Property</span> <span class="identifier">Parameters</span> <span class="keyword">As</span> <a href="6e6e8667-ebe2-0c60-c180-9d8000cff598.htm">ParameterSet</a>
	<span class="keyword">Get</span></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<span class="keyword">property</span> <a href="6e6e8667-ebe2-0c60-c180-9d8000cff598.htm">ParameterSet</a>^ <span class="identifier">Parameters</span> {
	<a href="6e6e8667-ebe2-0c60-c180-9d8000cff598.htm">ParameterSet</a>^ <span class="keyword">get</span> ();
}</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
    </div>
    <h1 class="heading">
     Remarks
     <a name="remarksToggle">
     </a>
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     The Parameters property contains a set of all the parameters that the element supports.
These parameters are displayed in the Element properties dialog in the Autodesk Revit interface.
These parameters can be retrieved and set via the parameter objects stored in this set.
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">void</span> GetElementParameterInformation(Document document, Element element)
{
    <span class="highlight-comment">// Format the prompt information string</span>
    String prompt = <span class="highlight-literal">"Show parameters in selected Element:"</span>;

    StringBuilder st = <span class="highlight-keyword">new</span> StringBuilder();
    <span class="highlight-comment">// iterate element's parameters</span>
    <span class="highlight-keyword">foreach</span> (Parameter para <span class="highlight-keyword">in</span> element.Parameters)
    {
        st.AppendLine(GetParameterInformation(para, document));
    }

    <span class="highlight-comment">// Give the user some information</span>
    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>,prompt);
}

String GetParameterInformation(Parameter para, Document document)
{
    <span class="highlight-keyword">string</span> defName = para.Definition.Name + <span class="highlight-literal">@"\t"</span>;
    <span class="highlight-comment">// Use different method to get parameter data according to the storage type</span>
    <span class="highlight-keyword">switch</span> (para.StorageType)
    {
        <span class="highlight-keyword">case</span> StorageType.Double:
            <span class="highlight-comment">//covert the number into Metric</span>
            defName += <span class="highlight-literal">" : "</span> + para.AsValueString();
            <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> StorageType.ElementId:
            <span class="highlight-comment">//find out the name of the element</span>
            Autodesk.Revit.DB.ElementId id = para.AsElementId();
            <span class="highlight-keyword">if</span> (id.IntegerValue &gt;= <span class="highlight-number">0</span>)
            {
                defName += <span class="highlight-literal">" : "</span> + document.GetElement(id).Name;
            }
            <span class="highlight-keyword">else</span>
            {
               defName += <span class="highlight-literal">" : "</span> + id.IntegerValue.ToString();
            }
            <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> StorageType.Integer:
            <span class="highlight-keyword">if</span> (ParameterType.YesNo == para.Definition.ParameterType)
            {
                <span class="highlight-keyword">if</span> (para.AsInteger() == <span class="highlight-number">0</span>)
                {
                    defName += <span class="highlight-literal">" : "</span> + <span class="highlight-literal">"False"</span>;
                }
                <span class="highlight-keyword">else</span>
                {
                    defName += <span class="highlight-literal">" : "</span> + <span class="highlight-literal">"True"</span>;
                }
            }
            <span class="highlight-keyword">else</span>
            {
                defName += <span class="highlight-literal">" : "</span> + para.AsInteger().ToString();
            }
            <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> StorageType.String:
            defName += <span class="highlight-literal">" : "</span> + para.AsString();
            <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">default</span>:
            defName = <span class="highlight-literal">"Unexposed parameter."</span>;
            <span class="highlight-keyword">break</span>;
    }

    <span class="highlight-keyword">return</span> defName;
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> GetElementParameterInformation(document <span class="highlight-keyword">As</span> Document, element <span class="highlight-keyword">As</span> Element)
    <span class="highlight-comment">' Format the prompt information string</span>
    <span class="highlight-keyword">Dim</span> prompt <span class="highlight-keyword">As</span> [<span class="highlight-keyword">String</span>] = <span class="highlight-literal">"Show parameters in selected Element:"</span>

    <span class="highlight-keyword">Dim</span> st <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> StringBuilder()
    <span class="highlight-comment">' iterate element's parameters</span>
    <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> para <span class="highlight-keyword">As</span> Parameter <span class="highlight-keyword">In</span> element.Parameters
        st.AppendLine(GetParameterInformation(para, document))
    <span class="highlight-keyword">Next</span>

    <span class="highlight-comment">' Give the user some information</span>
    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, prompt)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> GetParameterInformation(para <span class="highlight-keyword">As</span> Parameter, document <span class="highlight-keyword">As</span> Document) <span class="highlight-keyword">As</span> [<span class="highlight-keyword">String</span>]
    <span class="highlight-keyword">Dim</span> defName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = Convert.ToString(para.Definition.Name) &amp; <span class="highlight-literal">"\t"</span>
    <span class="highlight-comment">' Use different method to get parameter data according to the storage type</span>
    <span class="highlight-keyword">Select</span> <span class="highlight-keyword">Case</span> para.StorageType
        <span class="highlight-keyword">Case</span> StorageType.[<span class="highlight-keyword">Double</span>]
            <span class="highlight-comment">'covert the number into Metric</span>
            defName += <span class="highlight-literal">" : "</span> &amp; para.AsValueString()
            <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
        <span class="highlight-keyword">Case</span> StorageType.ElementId
            <span class="highlight-comment">'find out the name of the element</span>
            <span class="highlight-keyword">Dim</span> id <span class="highlight-keyword">As</span> Autodesk.Revit.DB.ElementId = para.AsElementId()
            <span class="highlight-keyword">If</span> id.IntegerValue &gt;= <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
                defName += <span class="highlight-literal">" : "</span> + document.GetElement(id).Name
            <span class="highlight-keyword">Else</span>
                defName += <span class="highlight-literal">" : "</span> &amp; id.IntegerValue.ToString()
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
        <span class="highlight-keyword">Case</span> StorageType.[<span class="highlight-keyword">Integer</span>]
            <span class="highlight-keyword">If</span> ParameterType.YesNo = para.Definition.ParameterType <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">If</span> para.AsInteger() = <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
                    defName += <span class="highlight-literal">" : "</span> &amp; <span class="highlight-literal">"False"</span>
                <span class="highlight-keyword">Else</span>
                    defName += <span class="highlight-literal">" : "</span> &amp; <span class="highlight-literal">"True"</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Else</span>
                defName += <span class="highlight-literal">" : "</span> &amp; para.AsInteger().ToString()
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
        <span class="highlight-keyword">Case</span> StorageType.[<span class="highlight-keyword">String</span>]
            defName += <span class="highlight-literal">" : "</span> &amp; para.AsString()
            <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
        <span class="highlight-keyword">Case</span> <span class="highlight-keyword">Else</span>
            defName = <span class="highlight-literal">"Unexposed parameter."</span>
            <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Select</span>

    <span class="highlight-keyword">Return</span> defName
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">
       Element Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>