<div class="chm_content">
 <div id="header">
  <table cellpadding="0" cellspacing="0" id="topTable">
   <tbody>
    <tr>
     <td>
      <span>
      </span>
     </td>
    </tr>
   </tbody>
  </table>
  <table cellpadding="0" cellspacing="0" id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="cba2c84a-22c0-e6e7-a99c-67656901853a.htm">
       ItemFactoryBase Class
      </a>
      <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">
       Example
      </a>
      <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Inserts a new instance of a family into the document,
using a location, type/symbol, the host element and a reference direction.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="ded320da-058a-4edd-0418-0582389559a7.htm">
      Autodesk.Revit.Creation
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
    </p>
    <h1 class="heading">
     Syntax
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <a href="0d2231f8-91e6-794f-92ae-16aad8014b27.htm">FamilyInstance</a> <span class="identifier">NewFamilyInstance</span>(
	<a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a> <span class="parameter">location</span>,
	<a href="a1acaed0-6a62-4c1d-94f5-4e27ce0923d3.htm">FamilySymbol</a> <span class="parameter">symbol</span>,
	<a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a> <span class="parameter">referenceDirection</span>,
	<a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a> <span class="parameter">host</span>,
	<a href="0a0a3793-5fce-283d-4953-a137f5593db9.htm">StructuralType</a> <span class="parameter">structuralType</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">NewFamilyInstance</span> ( _
	<span class="parameter">location</span> <span class="keyword">As</span> <a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a>, _
	<span class="parameter">symbol</span> <span class="keyword">As</span> <a href="a1acaed0-6a62-4c1d-94f5-4e27ce0923d3.htm">FamilySymbol</a>, _
	<span class="parameter">referenceDirection</span> <span class="keyword">As</span> <a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a>, _
	<span class="parameter">host</span> <span class="keyword">As</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a>, _
	<span class="parameter">structuralType</span> <span class="keyword">As</span> <a href="0a0a3793-5fce-283d-4953-a137f5593db9.htm">StructuralType</a> _
) <span class="keyword">As</span> <a href="0d2231f8-91e6-794f-92ae-16aad8014b27.htm">FamilyInstance</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<a href="0d2231f8-91e6-794f-92ae-16aad8014b27.htm">FamilyInstance</a>^ <span class="identifier">NewFamilyInstance</span>(
	<a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a>^ <span class="parameter">location</span>, 
	<a href="a1acaed0-6a62-4c1d-94f5-4e27ce0923d3.htm">FamilySymbol</a>^ <span class="parameter">symbol</span>, 
	<a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">XYZ</a>^ <span class="parameter">referenceDirection</span>, 
	<a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a>^ <span class="parameter">host</span>, 
	<a href="0a0a3793-5fce-283d-4953-a137f5593db9.htm">StructuralType</a> <span class="parameter">structuralType</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="location">
       <dt>
        <span class="parameter">
         location
        </span>
       </dt>
       <dd>
        Type:
        <a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">
         Autodesk.Revit.DB
         XYZ
        </a>
        <br/>
        The physical location where the instance is to be placed.
       </dd>
      </dl>
      <dl paramname="symbol">
       <dt>
        <span class="parameter">
         symbol
        </span>
       </dt>
       <dd>
        Type:
        <a href="a1acaed0-6a62-4c1d-94f5-4e27ce0923d3.htm">
         Autodesk.Revit.DB
         FamilySymbol
        </a>
        <br/>
        A FamilySymbol object that represents the type of the instance that is to be inserted.
       </dd>
      </dl>
      <dl paramname="referenceDirection">
       <dt>
        <span class="parameter">
         referenceDirection
        </span>
       </dt>
       <dd>
        Type:
        <a href="c2fd995c-95c0-58fb-f5de-f3246cbc5600.htm">
         Autodesk.Revit.DB
         XYZ
        </a>
        <br/>
        A vector that dictates the direction of certain family instances.
       </dd>
      </dl>
      <dl paramname="host">
       <dt>
        <span class="parameter">
         host
        </span>
       </dt>
       <dd>
        Type:
        <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">
         Autodesk.Revit.DB
         Element
        </a>
        <br/>
        A host object into which the instance will be embedded
       </dd>
      </dl>
      <dl paramname="structuralType">
       <dt>
        <span class="parameter">
         structuralType
        </span>
       </dt>
       <dd>
        Type:
        <a href="0a0a3793-5fce-283d-4953-a137f5593db9.htm">
         Autodesk.Revit.DB.Structure
         StructuralType
        </a>
        <br/>
        If structural then specify the type of the component.
       </dd>
      </dl>
     </div>
     <h4 class="subHeading">
      Return Value
     </h4>
     If creation was successful then an instance to the new object is returned, otherwise
     <span class="keyword">
     </span>
     <span class="nu">
      a null reference (
      <span class="keyword">
       Nothing
      </span>
      in Visual Basic)
     </span>
     .
    </div>
    <h1 class="heading">
     Remarks
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     This method allows you to create FamilyInstance objects that require both a location and direction. 
If the instance fails to be created an exception may be thrown.
     <p>
      The type/symbol that is used must be loaded into the document
before this method is called. Families and their symbols can be loaded using the Document.LoadFamily
or Document.LoadFamilySymbol methods.
     </p>
     <p>
      Some Families, such as Beams, have more than one endpoint and
are inserted in the same manner as single point instances. Once inserted these linear family instances
can have their endpoints changed by using the instance's Element.Location property.
     </p>
     <p>
      Note: if the created family instance includes nested instances, the API framework will automatically regenerate 
the document during this method call.
     </p>
    </div>
    <h1 class="heading">
     Examples
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">// Get a floor to place the beds</span>
 FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
 Floor floor = collector.OfClass(<span class="highlight-keyword">typeof</span>(Floor)).FirstElement() <span class="highlight-keyword">as</span> Floor;
 <span class="highlight-keyword">if</span> (floor != <span class="highlight-keyword">null</span>)
 {
     <span class="highlight-comment">// Find a Bed-Box family</span>
     Family family = <span class="highlight-keyword">null</span>;
     FilteredElementCollector famCollector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
     famCollector.OfClass(<span class="highlight-keyword">typeof</span>(Family));
     ICollection&lt;Element&gt; collection = famCollector.ToElements();
     <span class="highlight-keyword">foreach</span> (Element element <span class="highlight-keyword">in</span> collection)
     {

         <span class="highlight-keyword">if</span> (element.Name.CompareTo(<span class="highlight-literal">"Bed-Box"</span>) == <span class="highlight-number">0</span>)
         {
             family = element <span class="highlight-keyword">as</span> Family;
             <span class="highlight-keyword">break</span>;
         }
     }

     <span class="highlight-keyword">if</span> (family != <span class="highlight-keyword">null</span>)
     {
         <span class="highlight-comment">// Enumerate the beds in the Bed-Box family</span>
         FilteredElementCollector fsCollector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
         ICollection&lt;Element&gt; fsCollection = fsCollector.WherePasses(<span class="highlight-keyword">new</span> FamilySymbolFilter(family.Id)).ToElements();
         IEnumerator&lt;Element&gt; symbolItor = fsCollection.GetEnumerator();

         <span class="highlight-keyword">int</span> x = <span class="highlight-number">0</span>, y = <span class="highlight-number">0</span>;
         <span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>;
         <span class="highlight-keyword">while</span> (symbolItor.MoveNext())
         {
             FamilySymbol symbol = symbolItor.Current <span class="highlight-keyword">as</span> FamilySymbol;
             XYZ location = <span class="highlight-keyword">new</span> XYZ(x, y, <span class="highlight-number">0</span>);
             XYZ direction = <span class="highlight-keyword">new</span> XYZ();
             <span class="highlight-keyword">switch</span> (i % <span class="highlight-number">3</span>)
             {
                 <span class="highlight-keyword">case</span> <span class="highlight-number">0</span>:
                     direction = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>);
                     <span class="highlight-keyword">break</span>;
                 <span class="highlight-keyword">case</span> <span class="highlight-number">1</span>:
                     direction = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>);
                     <span class="highlight-keyword">break</span>;
                 <span class="highlight-keyword">case</span> <span class="highlight-number">2</span>:
                     direction = <span class="highlight-keyword">new</span> XYZ(<span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>);
                     <span class="highlight-keyword">break</span>;
             }
             FamilyInstance instance = document.Create.NewFamilyInstance(location, symbol, direction, floor, StructuralType.NonStructural);
             x += <span class="highlight-number">10</span>;
             i++;
         }
     }
 }</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">' Get a floor to place the beds</span>
<span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(document)
<span class="highlight-keyword">Dim</span> floor <span class="highlight-keyword">As</span> Floor = <span class="highlight-keyword">TryCast</span>(collector.OfClass(<span class="highlight-keyword">GetType</span>(Floor)).FirstElement(), Floor)
<span class="highlight-keyword">If</span> floor <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
    <span class="highlight-comment">' Find a Bed-Box family</span>
    <span class="highlight-keyword">Dim</span> family <span class="highlight-keyword">As</span> Family = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">Dim</span> famCollector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(document)
    famCollector.OfClass(<span class="highlight-keyword">GetType</span>(Family))
    <span class="highlight-keyword">Dim</span> collection <span class="highlight-keyword">As</span> ICollection(<span class="highlight-keyword">Of</span> Element) = famCollector.ToElements()
    <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> element <span class="highlight-keyword">As</span> Element <span class="highlight-keyword">In</span> collection

        <span class="highlight-keyword">If</span> element.Name.CompareTo(<span class="highlight-literal">"Bed-Box"</span>) = <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
            family = <span class="highlight-keyword">TryCast</span>(element, Family)
            <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Next</span>

    <span class="highlight-keyword">If</span> family <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' Enumerate the beds in the Bed-Box family</span>
        <span class="highlight-keyword">Dim</span> fsCollector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(document)
        <span class="highlight-keyword">Dim</span> fsCollection <span class="highlight-keyword">As</span> ICollection(<span class="highlight-keyword">Of</span> Element) = fsCollector.WherePasses(<span class="highlight-keyword">New</span> FamilySymbolFilter(family.Id)).ToElements()
        <span class="highlight-keyword">Dim</span> symbolItor <span class="highlight-keyword">As</span> IEnumerator(<span class="highlight-keyword">Of</span> Element) = fsCollection.GetEnumerator()

        <span class="highlight-keyword">Dim</span> x <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>, y <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
        <span class="highlight-keyword">Dim</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
        <span class="highlight-keyword">While</span> symbolItor.MoveNext()
            <span class="highlight-keyword">Dim</span> symbol <span class="highlight-keyword">As</span> FamilySymbol = <span class="highlight-keyword">TryCast</span>(symbolItor.Current, FamilySymbol)
            <span class="highlight-keyword">Dim</span> location <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ(x, y, <span class="highlight-number">0</span>)
            <span class="highlight-keyword">Dim</span> direction <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> XYZ()
            <span class="highlight-keyword">Select</span> <span class="highlight-keyword">Case</span> i <span class="highlight-keyword">Mod</span> <span class="highlight-number">3</span>
                <span class="highlight-keyword">Case</span> <span class="highlight-number">0</span>
                    direction = <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>)
                    <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
                <span class="highlight-keyword">Case</span> <span class="highlight-number">1</span>
                    direction = <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>)
                    <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
                <span class="highlight-keyword">Case</span> <span class="highlight-number">2</span>
                    direction = <span class="highlight-keyword">New</span> XYZ(<span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>)
                    <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Select</span>
            <span class="highlight-keyword">Dim</span> instance <span class="highlight-keyword">As</span> FamilyInstance = document.Create.NewFamilyInstance(location, symbol, direction, floor, StructuralType.NonStructural)
            x += <span class="highlight-number">10</span>
            i += <span class="highlight-number">1</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     See Also
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="cba2c84a-22c0-e6e7-a99c-67656901853a.htm">
       ItemFactoryBase Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="451ee414-cea0-e9bd-227b-c73bc93507dd.htm">
       NewFamilyInstance Overload
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="ded320da-058a-4edd-0418-0582389559a7.htm">
       Autodesk.Revit.Creation Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>