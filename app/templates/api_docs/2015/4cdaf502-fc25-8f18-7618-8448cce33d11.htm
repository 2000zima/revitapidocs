<article id="api-content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="ab8bc959-11c3-14c4-75ff-e1468973200e.htm">
       Members
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     The interface used to create an updater capable of reacting to changes in the Revit model.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
     <br/>
     <b>
      Since:
     </b>
     2011
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">interface</span> <span class="identifier">IUpdater</span></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Interface</span> <span class="identifier">IUpdater</span></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">interface class</span> <span class="identifier">IUpdater</span></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
    </div>
    <h1 class="heading">
     Remarks
     <a name="remarksToggle">
     </a>
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     Implement this interface and register an instance of the derived class with the UpdaterRegistry.
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> WallUpdaterApplication : Autodesk.Revit.UI.IExternalApplication
{
    <span class="highlight-keyword">public</span> Result OnStartup(UIControlledApplication application)
    {
        <span class="highlight-comment">// Register wall updater with Revit</span>
        WallUpdater updater = <span class="highlight-keyword">new</span> WallUpdater(application.ActiveAddInId);
        UpdaterRegistry.RegisterUpdater(updater);

        <span class="highlight-comment">// Change Scope = any Wall element</span>
        ElementClassFilter wallFilter = <span class="highlight-keyword">new</span> ElementClassFilter(<span class="highlight-keyword">typeof</span>(Wall));

        <span class="highlight-comment">// Change type = element addition</span>
        UpdaterRegistry.AddTrigger(updater.GetUpdaterId(), wallFilter,
                                    Element.GetChangeTypeElementAddition());
        <span class="highlight-keyword">return</span> Result.Succeeded;
    }

    <span class="highlight-keyword">public</span> Result OnShutdown(UIControlledApplication application)
    {
        WallUpdater updater = <span class="highlight-keyword">new</span> WallUpdater(application.ActiveAddInId);
        UpdaterRegistry.UnregisterUpdater(updater.GetUpdaterId());
        <span class="highlight-keyword">return</span> Result.Succeeded;
    }
}

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> WallUpdater : IUpdater
{
    <span class="highlight-keyword">static</span> AddInId m_appId;
    <span class="highlight-keyword">static</span> UpdaterId m_updaterId;
    WallType m_wallType = <span class="highlight-keyword">null</span>;

    <span class="highlight-comment">// constructor takes the AddInId for the add-in associated with this updater</span>
    <span class="highlight-keyword">public</span> WallUpdater(AddInId id)
    {
        m_appId = id;
        m_updaterId = <span class="highlight-keyword">new</span> UpdaterId(m_appId, <span class="highlight-keyword">new</span> Guid(<span class="highlight-literal">"FBFBF6B2-4C06-42d4-97C1-D1B4EB593EFF"</span>));
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Execute(UpdaterData data)
    {
        Document doc = data.GetDocument();

        <span class="highlight-comment">// Cache the wall type</span>
        <span class="highlight-keyword">if</span> (m_wallType == <span class="highlight-keyword">null</span>)
        {
            FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(doc);
            collector.OfClass(<span class="highlight-keyword">typeof</span>(WallType));
            var wallTypes = from element <span class="highlight-keyword">in</span> collector
                            where
                                element.Name == <span class="highlight-literal">"Exterior - Brick on CMU"</span>
                            select element;
            <span class="highlight-keyword">if</span> (wallTypes.Count&lt;Element&gt;() &gt; <span class="highlight-number">0</span>)
            {
                m_wallType = wallTypes.Cast&lt;WallType&gt;().ElementAt&lt;WallType&gt;(<span class="highlight-number">0</span>);
            }
        }

        <span class="highlight-keyword">if</span> (m_wallType != <span class="highlight-keyword">null</span>)
        {
            <span class="highlight-comment">// Change the wall to the cached wall type.</span>
            <span class="highlight-keyword">foreach</span> (ElementId addedElemId <span class="highlight-keyword">in</span> data.GetAddedElementIds())
            {
                Wall wall = doc.GetElement(addedElemId) <span class="highlight-keyword">as</span> Wall;
                <span class="highlight-keyword">if</span> (wall != <span class="highlight-keyword">null</span>)
                {
                    wall.WallType = m_wallType;
                }
            }
        }
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> GetAdditionalInformation()
    {
        <span class="highlight-keyword">return</span> <span class="highlight-literal">"Wall type updater example: updates all newly created walls to a special wall"</span>;
    }

    <span class="highlight-keyword">public</span> ChangePriority GetChangePriority()
    {
        <span class="highlight-keyword">return</span> ChangePriority.FloorsRoofsStructuralWalls;
    }

    <span class="highlight-keyword">public</span> UpdaterId GetUpdaterId()
    {
        <span class="highlight-keyword">return</span> m_updaterId;
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> GetUpdaterName()
    {
        <span class="highlight-keyword">return</span> <span class="highlight-literal">"Wall Type Updater"</span>;
    }
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> WallUpdaterApplication
    <span class="highlight-keyword">Implements</span> Autodesk.Revit.UI.IExternalApplication
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnStartup(application <span class="highlight-keyword">As</span> UIControlledApplication) <span class="highlight-keyword">As</span> Autodesk.Revit.UI.Result <span class="highlight-keyword">Implements</span> IExternalApplication.OnStartup
        <span class="highlight-comment">' Register wall updater with Revit</span>
        <span class="highlight-keyword">Dim</span> updater <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> WallUpdater(application.ActiveAddInId)
        UpdaterRegistry.RegisterUpdater(updater)

        <span class="highlight-comment">' Change Scope = any Wall element</span>
        <span class="highlight-keyword">Dim</span> wallFilter <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> ElementClassFilter(<span class="highlight-keyword">GetType</span>(Wall))

        <span class="highlight-comment">' Change type = element addition</span>
        UpdaterRegistry.AddTrigger(updater.GetUpdaterId(), wallFilter, Element.GetChangeTypeElementAddition())
        <span class="highlight-keyword">Return</span> Result.Succeeded
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnShutdown(application <span class="highlight-keyword">As</span> UIControlledApplication) <span class="highlight-keyword">As</span> Autodesk.Revit.UI.Result <span class="highlight-keyword">Implements</span> IExternalApplication.OnShutdown
        <span class="highlight-keyword">Dim</span> updater <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> WallUpdater(application.ActiveAddInId)
        UpdaterRegistry.UnregisterUpdater(updater.GetUpdaterId())
        <span class="highlight-keyword">Return</span> Result.Succeeded
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>

<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> WallUpdater
    <span class="highlight-keyword">Implements</span> IUpdater
    <span class="highlight-keyword">Shared</span> m_appId <span class="highlight-keyword">As</span> AddInId
    <span class="highlight-keyword">Shared</span> m_updaterId <span class="highlight-keyword">As</span> UpdaterId
    <span class="highlight-keyword">Private</span> m_wallType <span class="highlight-keyword">As</span> WallType = <span class="highlight-keyword">Nothing</span>

    <span class="highlight-comment">' constructor takes the AddInId for the add-in associated with this updater</span>
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>(id <span class="highlight-keyword">As</span> AddInId)
        m_appId = id
        m_updaterId = <span class="highlight-keyword">New</span> UpdaterId(m_appId, <span class="highlight-keyword">New</span> Guid(<span class="highlight-literal">"FBFBF6B2-4C06-42d4-97C1-D1B4EB593EFF"</span>))
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> Execute(data <span class="highlight-keyword">As</span> UpdaterData) <span class="highlight-keyword">Implements</span> IUpdater.Execute
        <span class="highlight-keyword">Dim</span> doc <span class="highlight-keyword">As</span> Document = data.GetDocument()

        <span class="highlight-comment">' Cache the wall type</span>
        <span class="highlight-keyword">If</span> m_wallType <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(doc)
            collector.OfClass(<span class="highlight-keyword">GetType</span>(WallType))
            <span class="highlight-keyword">Dim</span> wallTypes <span class="highlight-keyword">As</span> System.Collections.Generic.IEnumerable(<span class="highlight-keyword">Of</span> Autodesk.Revit.DB.Element)
            wallTypes = From element <span class="highlight-keyword">In</span> collector _
             Where element.Name = <span class="highlight-literal">"Exterior - Brick on CMU"</span> _
             <span class="highlight-keyword">Select</span> element
            <span class="highlight-keyword">If</span> wallTypes.Count() &gt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
                m_wallType = wallTypes.Cast(<span class="highlight-keyword">Of</span> WallType)().ElementAt(<span class="highlight-number">0</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        <span class="highlight-keyword">If</span> m_wallType <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' Change the wall to the cached wall type.</span>
            <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> addedElemId <span class="highlight-keyword">As</span> ElementId <span class="highlight-keyword">In</span> data.GetAddedElementIds()
                <span class="highlight-keyword">Dim</span> wall <span class="highlight-keyword">As</span> Wall = <span class="highlight-keyword">TryCast</span>(doc.GetElement(addedElemId), Wall)
                <span class="highlight-keyword">If</span> wall <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                    wall.WallType = m_wallType
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Next</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> GetAdditionalInformation() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> <span class="highlight-keyword">Implements</span> IUpdater.GetAdditionalInformation
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"Wall type updater example: updates all newly created walls to a special wall"</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> GetChangePriority() <span class="highlight-keyword">As</span> ChangePriority <span class="highlight-keyword">Implements</span> IUpdater.GetChangePriority
        <span class="highlight-keyword">Return</span> ChangePriority.FloorsRoofsStructuralWalls
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> GetUpdaterId() <span class="highlight-keyword">As</span> UpdaterId <span class="highlight-keyword">Implements</span> IUpdater.GetUpdaterId
        <span class="highlight-keyword">Return</span> m_updaterId
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> GetUpdaterName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> <span class="highlight-keyword">Implements</span> IUpdater.GetUpdaterName
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"Wall Type Updater"</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="ab8bc959-11c3-14c4-75ff-e1468973200e.htm">
       IUpdater Members
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</article>