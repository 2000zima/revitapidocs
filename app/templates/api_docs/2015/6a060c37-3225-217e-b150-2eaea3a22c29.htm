<div class="chm_content">
 <div id="header">
  <table cellpadding="0" cellspacing="0" id="topTable">
   <tbody>
    <tr>
     <td>
      <span>
      </span>
     </td>
    </tr>
   </tbody>
  </table>
  <table cellpadding="0" cellspacing="0" id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="7d0dc6df-db0e-6a07-3b42-8dde1bedb3c1.htm">
       IExportContext Interface
      </a>
      <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">
       Example
      </a>
      <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     This method is called when a tessellated polymesh of a 3d face is being output.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
     <br/>
     <b>
      Since:
     </b>
     2014
    </p>
    <h1 class="heading">
     Syntax
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">void</span> <span class="identifier">OnPolymesh</span>(
	<a href="fef5982c-3825-eed0-f792-1e0bff5509c2.htm">PolymeshTopology</a> <span class="parameter">node</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Sub</span> <span class="identifier">OnPolymesh</span> ( _
	<span class="parameter">node</span> <span class="keyword">As</span> <a href="fef5982c-3825-eed0-f792-1e0bff5509c2.htm">PolymeshTopology</a> _
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">void</span> <span class="identifier">OnPolymesh</span>(
	<a href="fef5982c-3825-eed0-f792-1e0bff5509c2.htm">PolymeshTopology</a>^ <span class="parameter">node</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="node">
       <dt>
        <span class="parameter">
         node
        </span>
       </dt>
       <dd>
        Type:
        <a href="fef5982c-3825-eed0-f792-1e0bff5509c2.htm">
         Autodesk.Revit.DB
         PolymeshTopology
        </a>
        <br/>
        A node representing topology of the polymesh
       </dd>
      </dl>
     </div>
    </div>
    <h1 class="heading">
     Examples
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// This method is called up for every face that was processed and tessellated</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;remarks&gt;</span>
<span class="highlight-comment">/// The node provides all information about geometric topology if the mesh.</span>
<span class="highlight-comment">/// It is assumed that a concrete exporter would consume the part it can </span>
<span class="highlight-comment">/// understand and/or support (vertices, normals, UVs, etc.) and convert</span>
<span class="highlight-comment">/// them into the final, export format.</span>
<span class="highlight-comment">/// &lt;/remarks&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> OnPolymesh(PolymeshTopology node)
{
   <span class="highlight-comment">// Note: the current material will get applied to the polymesh.</span>

   <span class="highlight-comment">// If a stack of transformation is maintained by the context object,</span>
   <span class="highlight-comment">// the current combined transform will be applied to the points.</span>
   Transform currentTransform = m_TransformationStack.Peek();

   <span class="highlight-comment">// basic properties of the mesh</span>

   <span class="highlight-keyword">int</span> numberOfFacet = node.NumberOfFacets;
   <span class="highlight-keyword">int</span> numberOfPoints = node.NumberOfPoints;
   <span class="highlight-keyword">int</span> numberOfUVs = node.NumberOfUVs;
   <span class="highlight-keyword">int</span> numberOfNormal = node.NumberOfNormals;

   <span class="highlight-comment">// Note: Normals are associated with either points or facets of the polymesh</span>
   <span class="highlight-comment">// The export code must account for different processing of these two cases.</span>

   <span class="highlight-comment">// A) process points of the polymesh</span>

   <span class="highlight-keyword">if</span>( node.DistributionOfNormals == DistributionOfNormals.AtEachPoint )
   {
      ExportMeshPoints(node.GetPoints(), currentTransform, node.GetNormals() );
   }
   <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span>( node.DistributionOfNormals == DistributionOfNormals.OnePerFace )
   {
      ExportMeshPoints(node.GetPoints(), currentTransform, node.GetNormal(<span class="highlight-number">0</span>) );
   }
   <span class="highlight-keyword">else</span>  <span class="highlight-comment">// DistributionOfNormals.OnEachFacet</span>
   {
      <span class="highlight-comment">// In this case, there is normal vector associated with each facet</span>
      <span class="highlight-comment">// Depending on the export, our format either support this case,</span>
      <span class="highlight-comment">// of we would have to determine what normals to apply at each </span>
      <span class="highlight-comment">// point by a way of combining normal of the surrounding facets.</span>
      ExportMeshPoints(node.GetPoints(), currentTransform );
   }

   <span class="highlight-comment">// B Process facets of the polymesh</span>

   <span class="highlight-keyword">if</span>( node.DistributionOfNormals == DistributionOfNormals.OnEachFacet )
   {
      ExportMeshFacets(node.GetFacets(), node.GetNormals() );
   }
   <span class="highlight-keyword">else</span>
   {
      ExportMeshFacets(node.GetFacets(), <span class="highlight-keyword">null</span> );
   }

   <span class="highlight-comment">// B) Process UV coordinates if available (and applicable)</span>

   <span class="highlight-keyword">if</span>( node.NumberOfUVs &gt; <span class="highlight-number">0</span> )
   {
      ExportMeshUVs( node.GetUVs() );
   }
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> ExportMeshPoints(IList&lt;XYZ&gt; points, Transform trf, IList&lt;XYZ&gt; normals)
{
   <span class="highlight-comment">// process points with normals</span>
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> ExportMeshPoints(IList&lt;XYZ&gt; points, Transform trf, XYZ normal)
{
   <span class="highlight-comment">// process points with only one normal vector (a planar face)</span>
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> ExportMeshPoints(IList&lt;XYZ&gt; points, Transform trf)
{
   <span class="highlight-comment">// process points without normal (assuming normals are associated with facets instead)</span>
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> ExportMeshFacets(IList&lt;PolymeshFacet&gt; facets, IList&lt;XYZ&gt; normals)
{
   <span class="highlight-keyword">if</span> (normals == <span class="highlight-keyword">null</span>)
   {
      <span class="highlight-comment">// process facets without normals  (assuming normals are associated with points instead)</span>
   }
   <span class="highlight-keyword">else</span>
   {
      <span class="highlight-comment">// process facets with normals</span>
   }
}

<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> ExportMeshUVs(IList&lt;UV&gt; UVs)
{
   <span class="highlight-comment">// process UVs</span>
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' This method is called up for every face that was processed and tessellated</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;remarks&gt;</span>
<span class="highlight-comment">' The node provides all information about geometric topology if the mesh.</span>
<span class="highlight-comment">' It is assumed that a concrete exporter would consume the part it can </span>
<span class="highlight-comment">' understand and/or support (vertices, normals, UVs, etc.) and convert</span>
<span class="highlight-comment">' them into the final, export format.</span>
<span class="highlight-comment">' &lt;/remarks&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> OnPolymesh(node <span class="highlight-keyword">As</span> PolymeshTopology) <span class="highlight-keyword">Implements</span> IExportContext.OnPolymesh
    <span class="highlight-comment">' Note: the current material will get applied to the polymesh.</span>


    <span class="highlight-comment">' If a stack of transformation is maintained by the context object,</span>
    <span class="highlight-comment">' the current combined transform will be applied to the points.</span>
    <span class="highlight-keyword">Dim</span> currentTransform <span class="highlight-keyword">As</span> Transform = m_TransformationStack.Peek()

    <span class="highlight-comment">' basic properties of the mesh</span>


    <span class="highlight-keyword">Dim</span> numberOfFacet <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = node.NumberOfFacets
    <span class="highlight-keyword">Dim</span> numberOfPoints <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = node.NumberOfPoints
    <span class="highlight-keyword">Dim</span> numberOfUVs <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = node.NumberOfUVs
    <span class="highlight-keyword">Dim</span> numberOfNormal <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = node.NumberOfNormals

    <span class="highlight-comment">' Note: Normals are associated with either points or facets of the polymesh</span>
    <span class="highlight-comment">' The export code must account for different processing of these two cases.</span>


    <span class="highlight-comment">' A) process points of the polymesh</span>


    <span class="highlight-keyword">If</span> node.DistributionOfNormals = DistributionOfNormals.AtEachPoint <span class="highlight-keyword">Then</span>
        ExportMeshPoints(node.GetPoints(), currentTransform, node.GetNormals())
    <span class="highlight-keyword">ElseIf</span> node.DistributionOfNormals = DistributionOfNormals.OnePerFace <span class="highlight-keyword">Then</span>
        ExportMeshPoints(node.GetPoints(), currentTransform, node.GetNormal(<span class="highlight-number">0</span>))
    <span class="highlight-keyword">Else</span>
        <span class="highlight-comment">' DistributionOfNormals.OnEachFacet</span>
        <span class="highlight-comment">' In this case, there is normal vector associated with each facet</span>
        <span class="highlight-comment">' Depending on the export, our format either support this case,</span>
        <span class="highlight-comment">' of we would have to determine what normals to apply at each </span>
        <span class="highlight-comment">' point by a way of combining normal of the surrounding facets.</span>
        ExportMeshPoints(node.GetPoints(), currentTransform)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' B Process facets of the polymesh</span>


    <span class="highlight-keyword">If</span> node.DistributionOfNormals = DistributionOfNormals.OnEachFacet <span class="highlight-keyword">Then</span>
        ExportMeshFacets(node.GetFacets(), node.GetNormals())
    <span class="highlight-keyword">Else</span>
        ExportMeshFacets(node.GetFacets(), <span class="highlight-keyword">Nothing</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' B) Process UV coordinates if available (and applicable)</span>


    <span class="highlight-keyword">If</span> node.NumberOfUVs &gt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
        ExportMeshUVs(node.GetUVs())
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> ExportMeshPoints(points <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> XYZ), trf <span class="highlight-keyword">As</span> Transform, normals <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> XYZ))
    <span class="highlight-comment">' process points with normals</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> ExportMeshPoints(points <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> XYZ), trf <span class="highlight-keyword">As</span> Transform, normal <span class="highlight-keyword">As</span> XYZ)
    <span class="highlight-comment">' process points with only one normal vector (a planar face)</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> ExportMeshPoints(points <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> XYZ), trf <span class="highlight-keyword">As</span> Transform)
    <span class="highlight-comment">' process points without normal (assuming normals are associated with facets instead)</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> ExportMeshFacets(facets <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> PolymeshFacet), normals <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> XYZ))
    <span class="highlight-comment">' process facets without normals  (assuming normals are associated with points instead)</span>
    <span class="highlight-keyword">If</span> normals <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' process facets with normals</span>
    <span class="highlight-keyword">Else</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> ExportMeshUVs(UVs <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> UV))
    <span class="highlight-comment">' process UVs</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     See Also
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="7d0dc6df-db0e-6a07-3b42-8dde1bedb3c1.htm">
       IExportContext Interface
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>