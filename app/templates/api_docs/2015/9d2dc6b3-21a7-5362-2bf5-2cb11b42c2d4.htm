<div class="chm_content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="7d0dc6df-db0e-6a07-3b42-8dde1bedb3c1.htm">
       IExportContext Interface
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     This method marks a change of the material.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
     <br/>
     <b>
      Since:
     </b>
     2014
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">void</span> <span class="identifier">OnMaterial</span>(
	<a href="c70338a6-7f40-e89e-607b-47162df3a5ef.htm">MaterialNode</a> <span class="parameter">node</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Sub</span> <span class="identifier">OnMaterial</span> ( _
	<span class="parameter">node</span> <span class="keyword">As</span> <a href="c70338a6-7f40-e89e-607b-47162df3a5ef.htm">MaterialNode</a> _
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">void</span> <span class="identifier">OnMaterial</span>(
	<a href="c70338a6-7f40-e89e-607b-47162df3a5ef.htm">MaterialNode</a>^ <span class="parameter">node</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="node">
       <dt>
        <span class="parameter">
         node
        </span>
       </dt>
       <dd>
        Type:
        <a href="c70338a6-7f40-e89e-607b-47162df3a5ef.htm">
         Autodesk.Revit.DB
         MaterialNode
        </a>
        <br/>
        A node describing the current material.
       </dd>
      </dl>
     </div>
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code>ElementId currentMaterialId = ElementId.InvalidElementId;
Color currentColor = <span class="highlight-keyword">new</span> Color(<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>);
<span class="highlight-keyword">double</span> currentTransparency = <span class="highlight-number">0</span>;
Asset currentAppearance = <span class="highlight-keyword">null</span>;

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// This code demonstrates how to process material information</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;remarks&gt;</span>
<span class="highlight-comment">/// OnMaterial method can be invoked for every single out-coming mesh</span>
<span class="highlight-comment">/// even when the material has not actually changed. Thus it is usually</span>
<span class="highlight-comment">/// beneficial to store the current material and only get its attributes</span>
<span class="highlight-comment">/// when the material actually changes.</span>
<span class="highlight-comment">/// &lt;/remarks&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> OnMaterial(MaterialNode node)
{
   <span class="highlight-comment">// acquire properties of the material if it is different</span>
   <span class="highlight-comment">// than the material we have set as the currently applicable</span>
   <span class="highlight-keyword">if</span> (currentMaterialId != node.MaterialId)
   {
      <span class="highlight-keyword">if</span> (node.MaterialId != ElementId.InvalidElementId)
      {
         currentColor = node.Color;
         currentTransparency = node.Transparency;
      }
      <span class="highlight-keyword">else</span>
      {
         <span class="highlight-comment">// the default material is being used in this case</span>
      }

      <span class="highlight-comment">// Appearance Asset is mainly for Revit internal use. However, if it is utilized </span>
      <span class="highlight-comment">// in the export context, it needs to be checked whether or not the asset of the </span>
      <span class="highlight-comment">// material is overridden by some local modification (e.g. by applying a decal)</span>

      <span class="highlight-keyword">if</span> (node.HasOverriddenAppearance)
      {
         currentAppearance = node.GetAppearanceOverride();
      }
      <span class="highlight-keyword">else</span>
      {
         currentAppearance = node.GetAppearance();
      }
   }
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Private</span> currentMaterialId <span class="highlight-keyword">As</span> ElementId = ElementId.InvalidElementId
<span class="highlight-keyword">Private</span> currentColor <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Color(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
<span class="highlight-keyword">Private</span> currentTransparency <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = <span class="highlight-number">0</span>
<span class="highlight-keyword">Private</span> currentAppearance <span class="highlight-keyword">As</span> Asset = <span class="highlight-keyword">Nothing</span>

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' This code demonstrates how to process material information</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;remarks&gt;</span>
<span class="highlight-comment">' OnMaterial method can be invoked for every single out-coming mesh</span>
<span class="highlight-comment">' even when the material has not actually changed. Thus it is usually</span>
<span class="highlight-comment">' beneficial to store the current material and only get its attributes</span>
<span class="highlight-comment">' when the material actually changes.</span>
<span class="highlight-comment">' &lt;/remarks&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> OnMaterial(node <span class="highlight-keyword">As</span> MaterialNode) <span class="highlight-keyword">Implements</span> IExportContext.OnMaterial
    <span class="highlight-comment">' acquire properties of the material if it is different</span>
    <span class="highlight-comment">' than the material we have set as the currently applicable</span>
    <span class="highlight-keyword">If</span> currentMaterialId &lt;&gt; node.MaterialId <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">If</span> node.MaterialId &lt;&gt; ElementId.InvalidElementId <span class="highlight-keyword">Then</span>
            currentColor = node.Color
            currentTransparency = node.Transparency
            <span class="highlight-comment">' the default material is being used in this case</span>
        <span class="highlight-keyword">Else</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        <span class="highlight-comment">' Appearance Asset is mainly for Revit internal use. However, if it is utilized </span>
        <span class="highlight-comment">' in the export context, it needs to be checked whether or not the asset of the </span>
        <span class="highlight-comment">' material is overridden by some local modification (e.g. by applying a decal)</span>


        <span class="highlight-keyword">If</span> node.HasOverriddenAppearance <span class="highlight-keyword">Then</span>
            currentAppearance = node.GetAppearanceOverride()
        <span class="highlight-keyword">Else</span>
            currentAppearance = node.GetAppearance()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="7d0dc6df-db0e-6a07-3b42-8dde1bedb3c1.htm">
       IExportContext Interface
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>