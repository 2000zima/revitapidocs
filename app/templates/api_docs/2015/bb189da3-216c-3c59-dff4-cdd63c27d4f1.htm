<article id="api-content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="e9aab085-720f-b924-3ace-1f3c33d95d44.htm">
       ExternalCommandData Class
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     A data map that can be used to read and write data to the Autodesk Revit journal file.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="e86fd90a-8957-02a6-da7f-ced248966e3e.htm">
      Autodesk.Revit.UI
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPIUI
     </span>
     (in RevitAPIUI.dll) Version: 2015.0.0.0 (2015.0.0.0)
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <a href="http://msdn2.microsoft.com/en-us/library/s4ys34ea" target="_blank">IDictionary</a>&lt;<a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">string</a>, <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">string</a>&gt; <span class="identifier">JournalData</span> { <span class="keyword">get</span>; <span class="keyword">set</span>; }</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Property</span> <span class="identifier">JournalData</span> <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/s4ys34ea" target="_blank">IDictionary</a>(<span class="keyword">Of</span> <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>, <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>)
	<span class="keyword">Get</span>
	<span class="keyword">Set</span></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<span class="keyword">property</span> <a href="http://msdn2.microsoft.com/en-us/library/s4ys34ea" target="_blank">IDictionary</a>&lt;<a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>^, <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>^&gt;^ <span class="identifier">JournalData</span> {
	<a href="http://msdn2.microsoft.com/en-us/library/s4ys34ea" target="_blank">IDictionary</a>&lt;<a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>^, <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>^&gt;^ <span class="keyword">get</span> ();
	<span class="keyword">void</span> <span class="keyword">set</span> (<a href="http://msdn2.microsoft.com/en-us/library/s4ys34ea" target="_blank">IDictionary</a>&lt;<a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>^, <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>^&gt;^ <span class="parameter">value</span>);
}</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
    </div>
    <h1 class="heading">
     Remarks
     <a name="remarksToggle">
     </a>
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     The data map is a string to string map that can be used to store data in the Revit journal
file at the end of execution of the external command. If the command is then executed from the journal
file during playback this data is then passed to the external command in this Data property so the
external command can execute with this passed data in a UI-less mode, hence providing non interactive
journal playback for automated testing purposes. For more information on Revit's journaling features
contact the Autodesk Developer Network.
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">void</span> WriteJournalData(ExternalCommandData commandData)
{
    <span class="highlight-comment">// Get the StringStringMap class which can write data into.</span>
    IDictionary&lt;String, String&gt; dataMap = commandData.JournalData;
    dataMap.Clear();

    <span class="highlight-comment">// Begin to add the support data</span>
    dataMap.Add(<span class="highlight-literal">"Name"</span>, <span class="highlight-literal">"Autodesk.Revit"</span>);
    dataMap.Add(<span class="highlight-literal">"Information"</span>, <span class="highlight-literal">"This is an example."</span>);
    dataMap.Add(<span class="highlight-literal">"Greeting"</span>, <span class="highlight-literal">"Hello Everyone."</span>);
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// This sample shows how to get data from journal file. </span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-keyword">void</span> ReadJournalData(ExternalCommandData commandData)
{
    <span class="highlight-comment">// Get the StringStringMap class which can write data into.</span>
    IDictionary&lt;String, String&gt; dataMap = commandData.JournalData;

    <span class="highlight-comment">// Begin to get the support data.</span>
    String prompt = <span class="highlight-literal">"Name: "</span> + dataMap[<span class="highlight-literal">"Name"</span>];
    prompt += <span class="highlight-literal">"\nInformation: "</span> + dataMap[<span class="highlight-literal">"Information"</span>];
    prompt += <span class="highlight-literal">"\nGreeting: "</span> + dataMap[<span class="highlight-literal">"Greeting"</span>];

    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>,prompt);
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> WriteJournalData(commandData <span class="highlight-keyword">As</span> ExternalCommandData)
    <span class="highlight-comment">' Get the StringStringMap class which can write data into.</span>
    <span class="highlight-keyword">Dim</span> dataMap <span class="highlight-keyword">As</span> IDictionary(<span class="highlight-keyword">Of</span> [<span class="highlight-keyword">String</span>], [<span class="highlight-keyword">String</span>]) = commandData.JournalData
    dataMap.Clear()

    <span class="highlight-comment">' Begin to add the support data</span>
    dataMap.Add(<span class="highlight-literal">"Name"</span>, <span class="highlight-literal">"Autodesk.Revit"</span>)
    dataMap.Add(<span class="highlight-literal">"Information"</span>, <span class="highlight-literal">"This is an example."</span>)
    dataMap.Add(<span class="highlight-literal">"Greeting"</span>, <span class="highlight-literal">"Hello Everyone."</span>)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' This sample shows how to get data from journal file. </span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> ReadJournalData(commandData <span class="highlight-keyword">As</span> ExternalCommandData)
    <span class="highlight-comment">' Get the StringStringMap class which can write data into.</span>
    <span class="highlight-keyword">Dim</span> dataMap <span class="highlight-keyword">As</span> IDictionary(<span class="highlight-keyword">Of</span> [<span class="highlight-keyword">String</span>], [<span class="highlight-keyword">String</span>]) = commandData.JournalData

    <span class="highlight-comment">' Begin to get the support data.</span>
    <span class="highlight-keyword">Dim</span> prompt <span class="highlight-keyword">As</span> [<span class="highlight-keyword">String</span>] = <span class="highlight-literal">"Name: "</span> &amp; dataMap(<span class="highlight-literal">"Name"</span>)
    prompt += vbLf &amp; <span class="highlight-literal">"Information: "</span> &amp; dataMap(<span class="highlight-literal">"Information"</span>)
    prompt += vbLf &amp; <span class="highlight-literal">"Greeting: "</span> &amp; dataMap(<span class="highlight-literal">"Greeting"</span>)

    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, prompt)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="e9aab085-720f-b924-3ace-1f3c33d95d44.htm">
       ExternalCommandData Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="e86fd90a-8957-02a6-da7f-ced248966e3e.htm">
       Autodesk.Revit.UI Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</article>