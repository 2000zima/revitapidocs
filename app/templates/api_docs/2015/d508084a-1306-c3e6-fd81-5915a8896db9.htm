<div class="chm_content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="ab1718f9-45fb-b3d3-827e-32ff81cf929c.htm">
       Document Class
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Adds a new duct into the document, 
using two connectors and duct type.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="ded320da-058a-4edd-0418-0582389559a7.htm">
      Autodesk.Revit.Creation
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <a href="72548466-370d-b010-eb4d-cde0c3f72482.htm">Duct</a> <span class="identifier">NewDuct</span>(
	<a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">Connector</a> <span class="parameter">connector1</span>,
	<a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">Connector</a> <span class="parameter">connector2</span>,
	<a href="2a1d96af-7d6d-7585-1ed2-2a39c1e7e3f2.htm">DuctType</a> <span class="parameter">ductType</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">NewDuct</span> ( _
	<span class="parameter">connector1</span> <span class="keyword">As</span> <a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">Connector</a>, _
	<span class="parameter">connector2</span> <span class="keyword">As</span> <a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">Connector</a>, _
	<span class="parameter">ductType</span> <span class="keyword">As</span> <a href="2a1d96af-7d6d-7585-1ed2-2a39c1e7e3f2.htm">DuctType</a> _
) <span class="keyword">As</span> <a href="72548466-370d-b010-eb4d-cde0c3f72482.htm">Duct</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span>:
<a href="72548466-370d-b010-eb4d-cde0c3f72482.htm">Duct</a>^ <span class="identifier">NewDuct</span>(
	<a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">Connector</a>^ <span class="parameter">connector1</span>, 
	<a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">Connector</a>^ <span class="parameter">connector2</span>, 
	<a href="2a1d96af-7d6d-7585-1ed2-2a39c1e7e3f2.htm">DuctType</a>^ <span class="parameter">ductType</span>
)</code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
     <div id="parameters">
      <h4 class="subHeading">
       Parameters
      </h4>
      <dl paramname="connector1">
       <dt>
        <span class="parameter">
         connector1
        </span>
       </dt>
       <dd>
        Type:
        <a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">
         Autodesk.Revit.DB
         Connector
        </a>
        <br/>
        The first connector to be connected to the duct.
       </dd>
      </dl>
      <dl paramname="connector2">
       <dt>
        <span class="parameter">
         connector2
        </span>
       </dt>
       <dd>
        Type:
        <a href="11e07082-b3f2-26a1-de79-16535f44716c.htm">
         Autodesk.Revit.DB
         Connector
        </a>
        <br/>
        The second connector to be connected to the duct.
       </dd>
      </dl>
      <dl paramname="ductType">
       <dt>
        <span class="parameter">
         ductType
        </span>
       </dt>
       <dd>
        Type:
        <a href="2a1d96af-7d6d-7585-1ed2-2a39c1e7e3f2.htm">
         Autodesk.Revit.DB.Mechanical
         DuctType
        </a>
        <br/>
        The type of the duct.
       </dd>
      </dl>
     </div>
     <h4 class="subHeading">
      Return Value
     </h4>
     If creation was successful then a new duct is returned, 
otherwise an exception with failure information will be thrown.
    </div>
    <h1 class="heading">
     Remarks
     <a name="remarksToggle">
     </a>
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     If the connectors are fitting or equipment connectors of the correct domain, 
and if the connectors' direction match the direction of the duct to be created, 
the connectors will be automatically connected. A transition fitting will be added 
at the connector(s) if necessary. If the connector's type, domain, or direction 
does not match the direction of the duct to be created, the position of the input connectors
will govern the endpoints of the duct, but no connection will be established.
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">public</span> Duct CreateDuctBetweenConnectors(UIDocument uiDocument)
{
    <span class="highlight-comment">// prior to running this example</span>
    <span class="highlight-comment">// select some mechanical equipment with a supply air connector</span>
    <span class="highlight-comment">// and an elbow duct fitting with a connector in line with that connector</span>
    Connector connector1 = <span class="highlight-keyword">null</span>, connector2 = <span class="highlight-keyword">null</span>;
    ConnectorSetIterator csi = <span class="highlight-keyword">null</span>;
    ICollection&lt;ElementId&gt; selectedIds = uiDocument.Selection.GetElementIds();
    Document document = uiDocument.Document;
    <span class="highlight-comment">// First find the selected equipment and get the correct connector</span>
    <span class="highlight-keyword">foreach</span> (ElementId id <span class="highlight-keyword">in</span> selectedIds)
    {
        Element e = document.GetElement(id);
        <span class="highlight-keyword">if</span> (e <span class="highlight-keyword">is</span> FamilyInstance)
        {
            FamilyInstance fi = e <span class="highlight-keyword">as</span> FamilyInstance;
            Family family = fi.Symbol.Family;
            <span class="highlight-keyword">if</span> (family.FamilyCategory.Name == <span class="highlight-literal">"Mechanical Equipment"</span>)
            {
                csi = fi.MEPModel.ConnectorManager.Connectors.ForwardIterator();
                <span class="highlight-keyword">while</span> (csi.MoveNext())
                {
                    Connector conn = csi.Current <span class="highlight-keyword">as</span> Connector;
                    <span class="highlight-keyword">if</span> (conn.Direction == FlowDirectionType.Out &amp;&amp; 
                        conn.DuctSystemType == DuctSystemType.SupplyAir)
                    {
                        connector1 = conn;
                        <span class="highlight-keyword">break</span>;
                    }
                }
            }
        }
    }
    <span class="highlight-comment">// next find the second selected item to connect to</span>
    <span class="highlight-keyword">foreach</span> (ElementId id <span class="highlight-keyword">in</span> selectedIds)
    {
        Element e = document.GetElement(id);
        <span class="highlight-keyword">if</span> (e <span class="highlight-keyword">is</span> FamilyInstance)
        {
            FamilyInstance fi = e <span class="highlight-keyword">as</span> FamilyInstance;
            Family family = fi.Symbol.Family;
            <span class="highlight-keyword">if</span> (family.FamilyCategory.Name != <span class="highlight-literal">"Mechanical Equipment"</span>)
            {
                csi = fi.MEPModel.ConnectorManager.Connectors.ForwardIterator();
                <span class="highlight-keyword">while</span> (csi.MoveNext())
                {
                    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == connector2)
                    {
                        Connector conn = csi.Current <span class="highlight-keyword">as</span> Connector;

                        <span class="highlight-comment">// make sure to choose the connector in line with the first connector</span>
                        <span class="highlight-keyword">if</span> (Math.Abs(conn.Origin.Y - connector1.Origin.Y) &lt; <span class="highlight-number">0.001</span>)
                        {
                            connector2 = conn;
                            <span class="highlight-keyword">break</span>;
                        }
                    }
                }
            }
        }
    }

    Duct duct = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != connector1 &amp;&amp; <span class="highlight-keyword">null</span> != connector2)
    {
        <span class="highlight-comment">// find a duct type</span>
        FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(uiDocument.Document);
        collector.OfClass(<span class="highlight-keyword">typeof</span>(DuctType));

        <span class="highlight-comment">// Use Linq query to make sure it is one of the rectangular duct types</span>
        var query = from element <span class="highlight-keyword">in</span> collector
                    where element.Name.Contains(<span class="highlight-literal">"Mitered Elbows"</span>) == <span class="highlight-keyword">true</span>
                    select element;

        <span class="highlight-comment">// use extension methods to get first duct type</span>
        DuctType ductType = collector.Cast&lt;DuctType&gt;().First&lt;DuctType&gt;();

        <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> != ductType)
        {
            duct = uiDocument.Document.Create.NewDuct(connector1, connector2, ductType);
        }
    }

    <span class="highlight-keyword">return</span> duct;
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> CreateDuctBetweenConnectors(uiDocument <span class="highlight-keyword">As</span> UIDocument) <span class="highlight-keyword">As</span> Duct
    <span class="highlight-comment">' prior to running this example</span>
    <span class="highlight-comment">' select some mechanical equipment with a supply air connector</span>
    <span class="highlight-comment">' and an elbow duct fitting with a connector in line with that connector</span>
    <span class="highlight-keyword">Dim</span> connector1 <span class="highlight-keyword">As</span> Connector = <span class="highlight-keyword">Nothing</span>, connector2 <span class="highlight-keyword">As</span> Connector = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">Dim</span> csi <span class="highlight-keyword">As</span> ConnectorSetIterator = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">Dim</span> selectedIds <span class="highlight-keyword">As</span> ICollection(<span class="highlight-keyword">Of</span> ElementId) = uiDocument.Selection.GetElementIds()
    <span class="highlight-keyword">Dim</span> document <span class="highlight-keyword">As</span> Document = uiDocument.Document
    <span class="highlight-comment">' First find the selected equipment and get the correct connector</span>
    <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> id <span class="highlight-keyword">As</span> ElementId <span class="highlight-keyword">In</span> selectedIds
        <span class="highlight-keyword">Dim</span> e <span class="highlight-keyword">As</span> Element = document.GetElement(id)
        <span class="highlight-keyword">If</span> <span class="highlight-keyword">TypeOf</span> e <span class="highlight-keyword">Is</span> FamilyInstance <span class="highlight-keyword">Then</span>
            <span class="highlight-keyword">Dim</span> fi <span class="highlight-keyword">As</span> FamilyInstance = <span class="highlight-keyword">TryCast</span>(e, FamilyInstance)
            <span class="highlight-keyword">Dim</span> family <span class="highlight-keyword">As</span> Family = fi.Symbol.Family
            <span class="highlight-keyword">If</span> family.FamilyCategory.Name = <span class="highlight-literal">"Mechanical Equipment"</span> <span class="highlight-keyword">Then</span>
                csi = fi.MEPModel.ConnectorManager.Connectors.ForwardIterator()
                <span class="highlight-keyword">While</span> csi.MoveNext()
                    <span class="highlight-keyword">Dim</span> conn <span class="highlight-keyword">As</span> Connector = <span class="highlight-keyword">TryCast</span>(csi.Current, Connector)
                    <span class="highlight-keyword">If</span> conn.Direction = FlowDirectionType.Out <span class="highlight-keyword">AndAlso</span> conn.DuctSystemType = DuctSystemType.SupplyAir <span class="highlight-keyword">Then</span>
                        connector1 = conn
                        <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">While</span>
                    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Next</span>
    <span class="highlight-comment">' next find the second selected item to connect to</span>
    <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> id <span class="highlight-keyword">As</span> ElementId <span class="highlight-keyword">In</span> selectedIds
        <span class="highlight-keyword">Dim</span> e <span class="highlight-keyword">As</span> Element = document.GetElement(id)
        <span class="highlight-keyword">If</span> <span class="highlight-keyword">TypeOf</span> e <span class="highlight-keyword">Is</span> FamilyInstance <span class="highlight-keyword">Then</span>
            <span class="highlight-keyword">Dim</span> fi <span class="highlight-keyword">As</span> FamilyInstance = <span class="highlight-keyword">TryCast</span>(e, FamilyInstance)
            <span class="highlight-keyword">Dim</span> family <span class="highlight-keyword">As</span> Family = fi.Symbol.Family
            <span class="highlight-keyword">If</span> family.FamilyCategory.Name &lt;&gt; <span class="highlight-literal">"Mechanical Equipment"</span> <span class="highlight-keyword">Then</span>
                csi = fi.MEPModel.ConnectorManager.Connectors.ForwardIterator()
                <span class="highlight-keyword">While</span> csi.MoveNext()
                    <span class="highlight-keyword">If</span> connector2 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                        <span class="highlight-keyword">Dim</span> conn <span class="highlight-keyword">As</span> Connector = <span class="highlight-keyword">TryCast</span>(csi.Current, Connector)

                        <span class="highlight-comment">' make sure to choose the connector in line with the first connector</span>
                        <span class="highlight-keyword">If</span> Math.Abs(conn.Origin.Y - connector1.Origin.Y) &lt; <span class="highlight-number">0.001</span> <span class="highlight-keyword">Then</span>
                            connector2 = conn
                            <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">While</span>
                        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
                    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Next</span>

    <span class="highlight-keyword">Dim</span> duct <span class="highlight-keyword">As</span> Duct = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">If</span> connector1 <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> connector2 <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' find a duct type</span>
        <span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(uiDocument.Document)
        collector.OfClass(<span class="highlight-keyword">GetType</span>(DuctType))

        <span class="highlight-comment">' Use Linq query to make sure it is one of the rectangular duct types</span>
        <span class="highlight-keyword">Dim</span> query <span class="highlight-keyword">As</span> System.Collections.Generic.IEnumerable(<span class="highlight-keyword">Of</span> Autodesk.Revit.DB.Element)
        query = From element <span class="highlight-keyword">In</span> collector _
                Where element.Name.Contains(<span class="highlight-literal">"Mitered Elbows"</span>) = <span class="highlight-keyword">True</span> _
                <span class="highlight-keyword">Select</span> element

        <span class="highlight-comment">' use extension methods to get first duct type</span>
        <span class="highlight-keyword">Dim</span> ductType <span class="highlight-keyword">As</span> DuctType = collector.Cast(<span class="highlight-keyword">Of</span> DuctType)().First()

        <span class="highlight-keyword">If</span> ductType <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            duct = uiDocument.Document.Create.NewDuct(connector1, connector2, ductType)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Return</span> duct
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Exceptions
     <a name="exceptionsToggle">
     </a>
    </h1>
    <div class="section" id="exceptionsSection" name="collapseableSection" style="">
     <div class="tableSection">
      <table frame="lhs" width="100%">
       <tbody>
        <tr>
         <th class="exceptionNameColumn">
          Exception
         </th>
         <th class="exceptionConditionColumn">
          Condition
         </th>
        </tr>
        <tr>
         <td>
          <a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">
           Autodesk.Revit.Exceptions
           ArgumentNullException
          </a>
         </td>
         <td>
          Thrown when the input argument connector1 or connector2 is
          <span class="keyword">
          </span>
          <span class="nu">
           a null reference (
           <span class="keyword">
            Nothing
           </span>
           in Visual Basic)
          </span>
          .
         </td>
        </tr>
        <tr>
         <td>
          <a href="9e715f03-3884-e539-4dd6-8d7545733adc.htm">
           Autodesk.Revit.Exceptions
           InvalidOperationException
          </a>
         </td>
         <td>
          Thrown when the duct cannot be created or regenerate fails.
         </td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="ab1718f9-45fb-b3d3-827e-32ff81cf929c.htm">
       Document Class
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="ec1cd3df-b266-7699-1f79-6005caf41139.htm">
       NewDuct Overload
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="ded320da-058a-4edd-0418-0582389559a7.htm">
       Autodesk.Revit.Creation Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>