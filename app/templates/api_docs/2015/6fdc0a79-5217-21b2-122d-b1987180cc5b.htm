<div class="chm_content">
 <div id="header">
  <table cellpadding="0" cellspacing="0" id="topTable">
   <tbody>
    <tr>
     <td>
      <span>
      </span>
     </td>
    </tr>
   </tbody>
  </table>
  <table cellpadding="0" cellspacing="0" id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="e3114af3-ad01-783f-0043-ea3bd81d16ff.htm">
       Members
      </a>
      <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">
       Example
      </a>
      <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     An interface for Adaptive Component Instances.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
     <br/>
     <b>
      Since:
     </b>
     2012
    </p>
    <h1 class="heading">
     Syntax
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="identifier">AdaptiveComponentFamilyUtils</span></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">NotInheritable</span> <span class="keyword">Class</span> <span class="identifier">AdaptiveComponentFamilyUtils</span></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">AdaptiveComponentFamilyUtils</span> <span class="keyword">abstract</span> <span class="keyword">sealed</span></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
    </div>
    <h1 class="heading">
     Examples
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> CreateAdaptiveComponentFamily(Document document)
{
    <span class="highlight-comment">// check if this family is an Adaptive Component family</span>
    <span class="highlight-keyword">if</span> (!(AdaptiveComponentFamilyUtils.IsAdaptiveComponentFamily(document.OwnerFamily))) <span class="highlight-keyword">return</span>;
    <span class="highlight-keyword">using</span> (Transaction transaction = <span class="highlight-keyword">new</span> Transaction(document))
    {
       <span class="highlight-keyword">int</span> placementCtr = <span class="highlight-number">1</span>;
       ReferencePointArray refPointArray = <span class="highlight-keyword">new</span> ReferencePointArray();
       <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; <span class="highlight-number">10</span>; i++)
       {
           transaction.SetName(<span class="highlight-literal">"Point"</span> + i);
           transaction.Start();
           ReferencePoint referencePoint = document.FamilyCreate.NewReferencePoint(<span class="highlight-keyword">new</span> XYZ(i, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>));
           <span class="highlight-keyword">if</span> (i % <span class="highlight-number">2</span> == <span class="highlight-number">0</span>)
           <span class="highlight-comment">// Even-numbered reference points will be Placement Points</span>
           {
               AdaptiveComponentFamilyUtils.MakeAdaptivePoint(document, referencePoint.Id, AdaptivePointType.PlacementPoint);
               transaction.Commit();
               AdaptiveComponentFamilyUtils.SetPlacementNumber(document, referencePoint.Id, placementCtr);
               placementCtr++;
           }
           <span class="highlight-keyword">else</span>
           <span class="highlight-comment">// Odd-numbered points will be Shape Handle Points</span>
           {
               AdaptiveComponentFamilyUtils.MakeAdaptivePoint(document, referencePoint.Id, AdaptivePointType.ShapeHandlePoint);
               transaction.Commit();
           }
           refPointArray.Append(referencePoint);
       }
       <span class="highlight-comment">// Create a curve running through all Reference Points</span>
       <span class="highlight-keyword">if</span> (transaction.GetStatus() == TransactionStatus.Committed)
       {
          transaction.SetName(<span class="highlight-literal">"Curve"</span>);
          transaction.Start();
          CurveByPoints curve = document.FamilyCreate.NewCurveByPoints(refPointArray);
          transaction.Commit();
       }
    }
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" onclick="javascript:CopyColorizedCode(this.parentNode);" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" onmouseout="CopyCodeChangeIcon(this)" onmouseover="CopyCodeChangeIcon(this)" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> CreateAdaptiveComponentFamily(document <span class="highlight-keyword">As</span> Document)
    <span class="highlight-comment">' check if this family is an Adaptive Component family</span>
    <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> (AdaptiveComponentFamilyUtils.IsAdaptiveComponentFamily(document.OwnerFamily)) <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Using</span> transaction <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(document)
        <span class="highlight-keyword">Dim</span> placementCtr <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">1</span>
        <span class="highlight-keyword">Dim</span> refPointArray <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> ReferencePointArray()
        <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> <span class="highlight-number">9</span>
            transaction.SetName(<span class="highlight-literal">"Point"</span> &amp; i)
            transaction.Start()
            <span class="highlight-keyword">Dim</span> referencePoint <span class="highlight-keyword">As</span> ReferencePoint = document.FamilyCreate.NewReferencePoint(<span class="highlight-keyword">New</span> XYZ(i, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>))
            <span class="highlight-keyword">If</span> i <span class="highlight-keyword">Mod</span> <span class="highlight-number">2</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
                <span class="highlight-comment">' Even-numbered reference points will be Placement Points</span>
                AdaptiveComponentFamilyUtils.MakeAdaptivePoint(document, referencePoint.Id, AdaptivePointType.PlacementPoint)
                transaction.Commit()
                AdaptiveComponentFamilyUtils.SetPlacementNumber(document, referencePoint.Id, placementCtr)
                placementCtr += <span class="highlight-number">1</span>
            <span class="highlight-keyword">Else</span>
                <span class="highlight-comment">' Odd-numbered points will be Shape Handle Points</span>
                AdaptiveComponentFamilyUtils.MakeAdaptivePoint(document, referencePoint.Id, AdaptivePointType.ShapeHandlePoint)
                transaction.Commit()
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            refPointArray.Append(referencePoint)
        <span class="highlight-keyword">Next</span>
        <span class="highlight-comment">' Create a curve running through all Reference Points</span>
        <span class="highlight-keyword">If</span> transaction.GetStatus() = TransactionStatus.Committed <span class="highlight-keyword">Then</span>
            transaction.SetName(<span class="highlight-literal">"Curve"</span>)
            transaction.Start()
            <span class="highlight-keyword">Dim</span> curve <span class="highlight-keyword">As</span> CurveByPoints = document.FamilyCreate.NewCurveByPoints(refPointArray)
            transaction.Commit()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Inheritance Hierarchy
    </h1>
    <div class="section" id="familySection" name="collapseableSection" style="">
     <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">
      System
      Object
     </a>
     <br/>
     <span class="selflink">
      Autodesk.Revit.DB
      AdaptiveComponentFamilyUtils
     </span>
     <br/>
    </div>
    <h1 class="heading">
     See Also
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="e3114af3-ad01-783f-0043-ea3bd81d16ff.htm">
       AdaptiveComponentFamilyUtils Members
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>