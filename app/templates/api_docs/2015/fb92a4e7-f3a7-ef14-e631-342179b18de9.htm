<div class="chm_content">
 <div id="header">
  <table id="bottomTable">
   <tbody>
    <tr id="headerTableRow3">
     <td align="left">
      <a href="d8d64cdb-46b7-6486-7cb5-07178b65a87b.htm">
       Members
      </a>
      <a href="#exampleToggle" >
       Example
      </a>
      <a href="#seeAlsoToggle" >
       SeeÂ Also
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <div id="mainSection">
  <div id="mainBody">
   <div class="saveHistory">
    <span style="color: DarkGray">
    </span>
    <div class="summary">
     Base class for all types of views in Autodesk Revit.
    </div>
    <p>
     <b>
      Namespace:
     </b>
     <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
      Autodesk.Revit.DB
     </a>
     <br/>
     <b>
      Assembly:
     </b>
     <span sdata="assembly">
      RevitAPI
     </span>
     (in RevitAPI.dll) Version: 2015.0.0.0 (2015.0.0.0)
    </p>
    <h1 class="heading">
     Syntax
     <a name="syntaxToggle">
     </a>
    </h1>
    <div class="section" id="syntaxSection" name="collapseableSection" style="">
     <div class="code" id="syntaxCodeBlocks">
      <span codelanguage="CSharp">
       <table>
        <tbody>
         <tr>
          <th>
           C#
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">View</span> : <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="VisualBasicDeclaration">
       <table>
        <tbody>
         <tr>
          <th>
           Visual Basic
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">View</span> _
	<span class="keyword">Inherits</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
      <span codelanguage="ManagedCPlusPlus">
       <table>
        <tbody>
         <tr>
          <th>
           Visual C++
          </th>
         </tr>
         <tr>
          <td>
           <pre><code><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">View</span> : <span class="keyword">public</span> <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">Element</a></code></pre>
          </td>
         </tr>
        </tbody>
       </table>
      </span>
     </div>
    </div>
    <h1 class="heading">
     Remarks
     <a name="remarksToggle">
     </a>
    </h1>
    <div class="section" id="remarksSection" name="collapseableSection" style="">
     A view can display an image produced from a Revit model.
   Views can be graphical (e.g. plans, elevations, or 3D views)
   or textual (e.g. schedules). Views keep track of Elements that can be seen in them.
    </div>
    <h1 class="heading">
     Examples
     <a name="exampleToggle">
     </a>
    </h1>
    <div class="section" id="exampleSection" name="collapseableSection" style="">
     <span codelanguage="CSharp" id="cbc_1" x-lang="CSharp">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       C#
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> Getinfo_View(Autodesk.Revit.DB.View view)
{
    <span class="highlight-keyword">string</span> message = <span class="highlight-literal">"View: "</span>;

    <span class="highlight-comment">//get the name of the view</span>
    message += <span class="highlight-literal">"\nView name: "</span> + view.ViewName;

    <span class="highlight-comment">//The crop box sets display bounds of the view</span>
    BoundingBoxXYZ cropBox = view.CropBox;
    XYZ max = cropBox.Max; <span class="highlight-comment">//Maximum coordinates (upper-right-front corner of the box).</span>
    XYZ min = cropBox.Min; <span class="highlight-comment">//Minimum coordinates (lower-left-rear corner of the box).</span>
    message += <span class="highlight-literal">"\nCrop Box: "</span>;
    message += <span class="highlight-literal">"\nMaximum coordinates: ("</span> + max.X + <span class="highlight-literal">", "</span> + max.Y + <span class="highlight-literal">", "</span> + max.Z + <span class="highlight-literal">")"</span>;
    message += <span class="highlight-literal">"\nMinimum coordinates: ("</span> + min.X + <span class="highlight-literal">", "</span> + min.Y + <span class="highlight-literal">", "</span> + min.Z + <span class="highlight-literal">")"</span>;


   <span class="highlight-comment">//get the origin of the screen</span>
    XYZ origin = view.Origin;
    message += <span class="highlight-literal">"\nOrigin: ("</span> + origin.X + <span class="highlight-literal">", "</span> + origin.Y + <span class="highlight-literal">", "</span> + origin.Z + <span class="highlight-literal">")"</span>;


    <span class="highlight-comment">//The bounds of the view in paper space (in inches).</span>
    BoundingBoxUV outline = view.Outline;
    UV maxUv = outline.Max; <span class="highlight-comment">//Maximum coordinates (upper-right corner of the box).</span>
    UV minUv = outline.Min; <span class="highlight-comment">//Minimum coordinates (lower-left corner of the box).</span>
    message += <span class="highlight-literal">"\nOutline: "</span>;
    message += <span class="highlight-literal">"\nMaximum coordinates: ("</span> + maxUv.U + <span class="highlight-literal">", "</span> + maxUv.V + <span class="highlight-literal">")"</span>;
    message += <span class="highlight-literal">"\nMinimum coordinates: ("</span> + minUv.U + <span class="highlight-literal">", "</span> + minUv.V + <span class="highlight-literal">")"</span>;

    <span class="highlight-comment">//The direction towards the right side of the screen</span>
    XYZ rightDirection = view.RightDirection;
    message += <span class="highlight-literal">"\nRight direction: ("</span> + rightDirection.X + <span class="highlight-literal">", "</span> +
                   rightDirection.Y + <span class="highlight-literal">", "</span> + rightDirection.Z + <span class="highlight-literal">")"</span>;

    <span class="highlight-comment">//The direction towards the top of the screen</span>
    XYZ upDirection = view.UpDirection;
    message += <span class="highlight-literal">"\nUp direction: ("</span> + upDirection.X + <span class="highlight-literal">", "</span> +
                   upDirection.Y + <span class="highlight-literal">", "</span> + upDirection.Z + <span class="highlight-literal">")"</span>;

    <span class="highlight-comment">//The direction towards the viewer</span>
    XYZ viewDirection = view.ViewDirection;
    message += <span class="highlight-literal">"\nView direction: ("</span> + viewDirection.X + <span class="highlight-literal">", "</span> +
                   viewDirection.Y + <span class="highlight-literal">", "</span> + viewDirection.Z + <span class="highlight-literal">")"</span>;

    <span class="highlight-comment">//The scale of the view</span>
    message += <span class="highlight-literal">"\nScale: "</span> + view.Scale;
    <span class="highlight-comment">// Scale is meaningless for Schedules</span>
    <span class="highlight-keyword">if</span> (view.ViewType != ViewType.Schedule)
    {
        <span class="highlight-keyword">int</span> testScale = <span class="highlight-number">5</span>;
        <span class="highlight-comment">//set the scale of the view</span>
        view.Scale = testScale;
        message += <span class="highlight-literal">"\nScale after set: "</span> + view.Scale;
    }

    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>,message);
}</code></pre>
      </div>
     </span>
     <span codelanguage="VisualBasic" id="cbc_2" x-lang="VisualBasic">
      <div class="highlight-title">
       <span class="highlight-copycode" tabindex="0">
        <img src='{{ url_for("static", filename="img/chm/icons/CopyCode.gif") }}' style="margin-right: 5px;"/>
        Copy
       </span>
       VB.NET
      </div>
      <div class="code">
       <pre><code><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> Getinfo_View(view <span class="highlight-keyword">As</span> Autodesk.Revit.DB.View)
    <span class="highlight-keyword">Dim</span> message <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"View: "</span>

    <span class="highlight-comment">'get the name of the view</span>
    message += vbLf &amp; <span class="highlight-literal">"View name: "</span> &amp; Convert.ToString(view.ViewName)

    <span class="highlight-comment">'The crop box sets display bounds of the view</span>
    <span class="highlight-keyword">Dim</span> cropBox <span class="highlight-keyword">As</span> BoundingBoxXYZ = view.CropBox
    <span class="highlight-keyword">Dim</span> max <span class="highlight-keyword">As</span> XYZ = cropBox.Max
    <span class="highlight-comment">'Maximum coordinates (upper-right-front corner of the box).</span>
    <span class="highlight-keyword">Dim</span> min <span class="highlight-keyword">As</span> XYZ = cropBox.Min
    <span class="highlight-comment">'Minimum coordinates (lower-left-rear corner of the box).</span>
    message += vbLf &amp; <span class="highlight-literal">"Crop Box: "</span>
    message += ((vbLf &amp; <span class="highlight-literal">"Maximum coordinates: ("</span> + max.X &amp; <span class="highlight-literal">", "</span>) + max.Y &amp; <span class="highlight-literal">", "</span>) + max.Z &amp; <span class="highlight-literal">")"</span>
    message += ((vbLf &amp; <span class="highlight-literal">"Minimum coordinates: ("</span> + min.X &amp; <span class="highlight-literal">", "</span>) + min.Y &amp; <span class="highlight-literal">", "</span>) + min.Z &amp; <span class="highlight-literal">")"</span>


    <span class="highlight-comment">'get the origin of the screen</span>
    <span class="highlight-keyword">Dim</span> origin <span class="highlight-keyword">As</span> XYZ = view.Origin
    message += ((vbLf &amp; <span class="highlight-literal">"Origin: ("</span> + origin.X &amp; <span class="highlight-literal">", "</span>) + origin.Y &amp; <span class="highlight-literal">", "</span>) + origin.Z &amp; <span class="highlight-literal">")"</span>


    <span class="highlight-comment">'The bounds of the view in paper space (in inches).</span>
    <span class="highlight-keyword">Dim</span> outline <span class="highlight-keyword">As</span> BoundingBoxUV = view.Outline
    <span class="highlight-keyword">Dim</span> maxUv <span class="highlight-keyword">As</span> UV = outline.Max
    <span class="highlight-comment">'Maximum coordinates (upper-right corner of the box).</span>
    <span class="highlight-keyword">Dim</span> minUv <span class="highlight-keyword">As</span> UV = outline.Min
    <span class="highlight-comment">'Minimum coordinates (lower-left corner of the box).</span>
    message += vbLf &amp; <span class="highlight-literal">"Outline: "</span>
    message += (vbLf &amp; <span class="highlight-literal">"Maximum coordinates: ("</span> + maxUv.U &amp; <span class="highlight-literal">", "</span>) + maxUv.V &amp; <span class="highlight-literal">")"</span>
    message += (vbLf &amp; <span class="highlight-literal">"Minimum coordinates: ("</span> + minUv.U &amp; <span class="highlight-literal">", "</span>) + minUv.V &amp; <span class="highlight-literal">")"</span>

    <span class="highlight-comment">'The direction towards the right side of the screen</span>
    <span class="highlight-keyword">Dim</span> rightDirection <span class="highlight-keyword">As</span> XYZ = view.RightDirection
    message += ((vbLf &amp; <span class="highlight-literal">"Right direction: ("</span> + rightDirection.X &amp; <span class="highlight-literal">", "</span>) + rightDirection.Y &amp; <span class="highlight-literal">", "</span>) + rightDirection.Z &amp; <span class="highlight-literal">")"</span>

    <span class="highlight-comment">'The direction towards the top of the screen</span>
    <span class="highlight-keyword">Dim</span> upDirection <span class="highlight-keyword">As</span> XYZ = view.UpDirection
    message += ((vbLf &amp; <span class="highlight-literal">"Up direction: ("</span> + upDirection.X &amp; <span class="highlight-literal">", "</span>) + upDirection.Y &amp; <span class="highlight-literal">", "</span>) + upDirection.Z &amp; <span class="highlight-literal">")"</span>

    <span class="highlight-comment">'The direction towards the viewer</span>
    <span class="highlight-keyword">Dim</span> viewDirection <span class="highlight-keyword">As</span> XYZ = view.ViewDirection
    message += ((vbLf &amp; <span class="highlight-literal">"View direction: ("</span> + viewDirection.X &amp; <span class="highlight-literal">", "</span>) + viewDirection.Y &amp; <span class="highlight-literal">", "</span>) + viewDirection.Z &amp; <span class="highlight-literal">")"</span>

    <span class="highlight-comment">'The scale of the view</span>
    message += vbLf &amp; <span class="highlight-literal">"Scale: "</span> &amp; Convert.ToString(view.Scale)
    <span class="highlight-comment">' Scale is meaningless for Schedules</span>
    <span class="highlight-keyword">If</span> view.ViewType &lt;&gt; ViewType.Schedule <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Dim</span> testScale <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">5</span>
        <span class="highlight-comment">'set the scale of the view</span>
        view.Scale = testScale
        message += vbLf &amp; <span class="highlight-literal">"Scale after set: "</span> &amp; Convert.ToString(view.Scale)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, message)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></code></pre>
      </div>
     </span>
    </div>
    <h1 class="heading">
     Inheritance Hierarchy
     <a name="familyToggle">
     </a>
    </h1>
    <div class="section" id="familySection" name="collapseableSection" style="">
     <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">
      System
      Object
     </a>
     <br/>
     <a href="eb16114f-69ea-f4de-0d0d-f7388b105a16.htm">
      Autodesk.Revit.DB
      Element
     </a>
     <br/>
     <span class="selflink">
      Autodesk.Revit.DB
      View
     </span>
     <br/>
     <a href="ba608411-21af-e924-2aa2-3595548ab39f.htm">
      Autodesk.Revit.DB
      TableView
     </a>
     <br/>
     <a href="d795a238-fc24-1875-e64f-a2bef56ae949.htm">
      Autodesk.Revit.DB
      View3D
     </a>
     <br/>
     <a href="d0876cac-a93b-b89c-fa30-bcc14ab9d7f0.htm">
      Autodesk.Revit.DB
      ViewDrafting
     </a>
     <br/>
     <a href="0520580a-74ec-ed8c-35ea-5274c42276a3.htm">
      Autodesk.Revit.DB
      ViewPlan
     </a>
     <br/>
     <a href="fcc75682-bd99-a97d-5a4d-0f8eb9e92ab5.htm">
      Autodesk.Revit.DB
      ViewSection
     </a>
     <br/>
     <a href="af2ee879-173d-df3a-9793-8d5750a17b49.htm">
      Autodesk.Revit.DB
      ViewSheet
     </a>
     <br/>
    </div>
    <h1 class="heading">
     See Also
     <a name="seeAlsoToggle">
     </a>
    </h1>
    <div class="section" id="seeAlsoSection" name="collapseableSection" style="">
     <div class="seeAlsoStyle">
      <a href="d8d64cdb-46b7-6486-7cb5-07178b65a87b.htm">
       View Members
      </a>
     </div>
     <div class="seeAlsoStyle">
      <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">
       Autodesk.Revit.DB Namespace
      </a>
     </div>
    </div>
   </div>
  </div>
 </div>
</div>