{% macro header() %}<title>RenderingSettings Class</title>{% assets "css_chm" %}<link rel="stylesheet" type="text/css" href="{{ ASSET_URL }}" />{% endassets %}{% assets "js_assets" %}<script src="{{ ASSET_URL }}"></script>{% endassets %}<meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="7ba669f3-bd38-464b-f3f7-8a0b4e513a0a" /><meta name="guid" content="7ba669f3-bd38-464b-f3f7-8a0b4e513a0a" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script>{% endmacro %}<div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2017 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">RenderingSettings Class</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="f7cc505f-1a17-881e-7859-adc21fb8d6e4.htm">Members</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2017 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table></div><div id="mainSection"><div id="mainBody"><div class="summary">
   Represents the rendering settings for a 3d view.
</div><p /><b>Namespace:</b> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 17.0.0.0 (17.0.484.0)<br /><b>Since:</b> 
   2013
<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">RenderingSettings</span> : <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">RenderingSettings</span> _
	<span class="keyword">Implements</span> <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">RenderingSettings</span> : <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> GetRenderingSettingsData(View3D view3D)
{
    RenderingSettings renderingSettings = view3D.GetRenderingSettings();

    <span class="highlight-comment">// get print or screen resolution data</span>
    <span class="highlight-keyword">if</span> (renderingSettings.ResolutionTarget == ResolutionTarget.Printer) <span class="highlight-comment">// for print resolution</span>
    {
        PrinterResolution printResolution = renderingSettings.PrinterResolution;
        <span class="highlight-keyword">int</span> resolutionValue = renderingSettings.ResolutionValue;
    }
    <span class="highlight-keyword">else</span>    <span class="highlight-comment">// for screen resolution</span>
    {
        <span class="highlight-keyword">int</span> resolutionValue = renderingSettings.ResolutionValue;
    }

    <span class="highlight-comment">// Get the outline of the rendering region. </span>
    renderingSettings.UsesRegionRendering = <span class="highlight-keyword">true</span>;
    Outline regionOutline = renderingSettings.GetRenderingRegionOutline();
    XYZ max = regionOutline.MaximumPoint;
    XYZ min = regionOutline.MinimumPoint;

    <span class="highlight-comment">// get lighting information.</span>
    renderingSettings.LightingSource = LightingSource.ExteriorSun; <span class="highlight-comment">// set lighting scheme type</span>
    <span class="highlight-comment">// Please note that the sun setting has been exposed in View.SunAndShadowSettings property already.</span>
    SunAndShadowSettings sunSettings = view3D.SunAndShadowSettings;

    <span class="highlight-comment">// get the background setting data</span>
    <span class="highlight-keyword">switch</span> (renderingSettings.BackgroundStyle)
    {
        <span class="highlight-keyword">case</span> BackgroundStyle.Color: <span class="highlight-comment">// for color style</span>
            ColorBackgroundSettings colorBKSettings = renderingSettings.GetBackgroundSettings() <span class="highlight-keyword">as</span> ColorBackgroundSettings;
            Color bkColor = colorBKSettings.Color;
            <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> BackgroundStyle.Image: <span class="highlight-comment">// for image style</span>
            ImageBackgroundSettings imageBKSettings = renderingSettings.GetBackgroundSettings() <span class="highlight-keyword">as</span> ImageBackgroundSettings;
            BackgroundImageFit imageFit = imageBKSettings.BackgroundImageFit;
            <span class="highlight-keyword">string</span> filePath = imageBKSettings.FilePath;
            <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> BackgroundStyle.SkyCloudy: <span class="highlight-comment">// for sky related styles</span>
        <span class="highlight-keyword">case</span> BackgroundStyle.SkyFewClouds:
        <span class="highlight-keyword">case</span> BackgroundStyle.SkyNoClouds:
        <span class="highlight-keyword">case</span> BackgroundStyle.SkyVeryCloudy:
        <span class="highlight-keyword">case</span> BackgroundStyle.SkyVeryFewClouds:
            SkyBackgroundSettings skyBKSettings = renderingSettings.GetBackgroundSettings() <span class="highlight-keyword">as</span> SkyBackgroundSettings;
            <span class="highlight-comment">//float fHaze = skyBKSettings.Haze;</span>
            <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">default</span>:
            <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> InvalidOperationException(<span class="highlight-literal">"Not expected background style"</span>);
    }

    <span class="highlight-comment">// Get the rendering image exposure settings</span>
    RenderingImageExposureSettings exposureSettings = renderingSettings.GetRenderingImageExposureSettings();
    <span class="highlight-keyword">double</span> imageShadows = exposureSettings.Shadows;

    <span class="highlight-comment">// Get the rendering quality settings</span>
    RenderingQualitySettings qualitySettings = renderingSettings.GetRenderingQualitySettings();

    <span class="highlight-keyword">if</span> (qualitySettings.RenderingQuality == RenderingQuality.Custom)
    {
       <span class="highlight-comment">// The user can set the data only in custom quality</span>
       qualitySettings.RenderDuration = RenderDuration.ByTime;
       qualitySettings.RenderTime = <span class="highlight-number">10</span>;
    }
    <span class="highlight-keyword">else</span>
    {
       <span class="highlight-comment">// RenderLevel property value is returned according to its rendering quality style.</span>
       <span class="highlight-comment">// For example, it returns 1.0 for Draft quality and returns 5.0 for Medium quality.</span>
       <span class="highlight-comment">// RenderDuration and RenderTime property values are always the same for non-custom quality.</span>
       <span class="highlight-keyword">int</span> renderLevels = qualitySettings.RenderLevel;
    }
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> GetRenderingSettingsData(view3D <span class="highlight-keyword">As</span> View3D)
   <span class="highlight-keyword">Dim</span> renderingSettings <span class="highlight-keyword">As</span> RenderingSettings = view3D.GetRenderingSettings()

   <span class="highlight-comment">' get print or screen resolution data</span>
   <span class="highlight-keyword">If</span> renderingSettings.ResolutionTarget = ResolutionTarget.Printer <span class="highlight-keyword">Then</span>
      <span class="highlight-comment">' for print resolution</span>
      <span class="highlight-keyword">Dim</span> printResolution <span class="highlight-keyword">As</span> PrinterResolution = renderingSettings.PrinterResolution
      <span class="highlight-keyword">Dim</span> resolutionValue <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = renderingSettings.ResolutionValue
   <span class="highlight-keyword">Else</span>
      <span class="highlight-comment">' for screen resolution</span>
      <span class="highlight-keyword">Dim</span> resolutionValue <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = renderingSettings.ResolutionValue
   <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

   <span class="highlight-comment">' Get the outline of the rendering region. </span>
   renderingSettings.UsesRegionRendering = <span class="highlight-keyword">True</span>
   <span class="highlight-keyword">Dim</span> regionOutline <span class="highlight-keyword">As</span> Outline = renderingSettings.GetRenderingRegionOutline()
   <span class="highlight-keyword">Dim</span> max <span class="highlight-keyword">As</span> XYZ = regionOutline.MaximumPoint
   <span class="highlight-keyword">Dim</span> min <span class="highlight-keyword">As</span> XYZ = regionOutline.MinimumPoint

   <span class="highlight-comment">' get lighting information.</span>
   renderingSettings.LightingSource = LightingSource.ExteriorSun
   <span class="highlight-comment">' set lighting scheme type</span>
   <span class="highlight-comment">' Please note that the sun setting has been exposed in View.SunAndShadowSettings property already.</span>
   <span class="highlight-keyword">Dim</span> sunSettings <span class="highlight-keyword">As</span> SunAndShadowSettings = view3D.SunAndShadowSettings

   <span class="highlight-comment">' get the background setting data</span>
   <span class="highlight-keyword">Select</span> <span class="highlight-keyword">Case</span> renderingSettings.BackgroundStyle
      <span class="highlight-keyword">Case</span> BackgroundStyle.Color
         <span class="highlight-comment">' for color style</span>
         <span class="highlight-keyword">Dim</span> colorBKSettings <span class="highlight-keyword">As</span> ColorBackgroundSettings = <span class="highlight-keyword">TryCast</span>(renderingSettings.GetBackgroundSettings(), ColorBackgroundSettings)
         <span class="highlight-keyword">Dim</span> bkColor <span class="highlight-keyword">As</span> Color = colorBKSettings.Color
         <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
      <span class="highlight-keyword">Case</span> BackgroundStyle.Image
         <span class="highlight-comment">' for image style</span>
         <span class="highlight-keyword">Dim</span> imageBKSettings <span class="highlight-keyword">As</span> ImageBackgroundSettings = <span class="highlight-keyword">TryCast</span>(renderingSettings.GetBackgroundSettings(), ImageBackgroundSettings)
         <span class="highlight-keyword">Dim</span> imageFit <span class="highlight-keyword">As</span> BackgroundImageFit = imageBKSettings.BackgroundImageFit
         <span class="highlight-keyword">Dim</span> filePath <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = imageBKSettings.FilePath
         <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
         <span class="highlight-comment">' for sky related styles</span>
      <span class="highlight-keyword">Case</span> BackgroundStyle.SkyCloudy, BackgroundStyle.SkyFewClouds, BackgroundStyle.SkyNoClouds, BackgroundStyle.SkyVeryCloudy, BackgroundStyle.SkyVeryFewClouds
         <span class="highlight-keyword">Dim</span> skyBKSettings <span class="highlight-keyword">As</span> SkyBackgroundSettings = <span class="highlight-keyword">TryCast</span>(renderingSettings.GetBackgroundSettings(), SkyBackgroundSettings)
              <span class="highlight-comment">'Dim haze As Single = skyBKSettings.Haze</span>
         <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
      <span class="highlight-keyword">Case</span> <span class="highlight-keyword">Else</span>
         <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> InvalidOperationException(<span class="highlight-literal">"Not expected background style"</span>)
   <span class="highlight-keyword">End</span> <span class="highlight-keyword">Select</span>

   <span class="highlight-comment">' Get the rendering image exposure settings</span>
   <span class="highlight-keyword">Dim</span> exposureSettings <span class="highlight-keyword">As</span> RenderingImageExposureSettings = renderingSettings.GetRenderingImageExposureSettings()
      <span class="highlight-keyword">Dim</span> imageShadows <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = exposureSettings.[<span class="highlight-keyword">Shadows</span>]


  <span class="highlight-comment">' Get the rendering quality settings</span>
  <span class="highlight-keyword">Dim</span> qualitySettings <span class="highlight-keyword">As</span> RenderingQualitySettings = renderingSettings.GetRenderingQualitySettings()

  <span class="highlight-keyword">If</span> qualitySettings.RenderingQuality = RenderingQuality.[Custom] <span class="highlight-keyword">Then</span>
      <span class="highlight-comment">' The user can set the data only in custom quality</span>
      qualitySettings.RenderDuration = RenderDuration.ByTime
      qualitySettings.RenderTime = <span class="highlight-number">10</span>
  <span class="highlight-keyword">Else</span>
      <span class="highlight-comment">' RenderLevel property value is returned according to its rendering quality style.</span>
      <span class="highlight-comment">' For example, it returns 1.0 for Draft quality and returns 5.0 for Medium quality.</span>
      <span class="highlight-comment">' RenderDuration and RenderTime property values are always the same for non-custom quality.</span>
      <span class="highlight-keyword">Dim</span> renderLevels <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = qualitySettings.RenderLevel
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Object</a><br />  <span class="selflink">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>RenderingSettings</span><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="f7cc505f-1a17-881e-7859-adc21fb8d6e4.htm">RenderingSettings Members</a></div><div class="seeAlsoStyle"><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>