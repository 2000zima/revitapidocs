{% macro header() %}<title>IFailuresProcessor Interface</title>{% assets "css_chm" %}<link rel="stylesheet" type="text/css" href="{{ ASSET_URL }}" />{% endassets %}{% assets "js_assets" %}<script src="{{ ASSET_URL }}"></script>{% endassets %}<meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="34a78265-3a7d-ba7f-5467-764fc9efe619" /><meta name="guid" content="34a78265-3a7d-ba7f-5467-764fc9efe619" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script>{% endmacro %}<div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2017 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">IFailuresProcessor Interface</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="04be4407-94c6-a5f0-a5a4-1ab2a3d831f4.htm">Members</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2017 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table></div><div id="mainSection"><div id="mainBody"><div class="summary">
   To create your own UI or fully automated tool to process Revit Failures, derive a class from this interface.
</div><p /><b>Namespace:</b> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 17.0.0.0 (17.0.484.0)<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="identifier">IFailuresProcessor</span></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Interface</span> <span class="identifier">IFailuresProcessor</span></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">interface class</span> <span class="identifier">IFailuresProcessor</span></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle, event)" tabindex="0"><img id="remarksToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="">
   To override Revit default Failures Processing UI, instantiate your own processor derived from this interface
   and register it in Revit application.
</div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">[Autodesk.Revit.Attributes.Transaction(Autodesk.Revit.Attributes.TransactionMode.Manual)]

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyFailuresUI : IExternalApplication
{
    <span class="highlight-keyword">static</span> AddInId m_appId = <span class="highlight-keyword">new</span> AddInId(<span class="highlight-keyword">new</span> Guid(<span class="highlight-literal">"9F179363-B349-4541-823F-A2DDB2B86AF3"</span>));
    <span class="highlight-keyword">public</span> Result OnStartup(UIControlledApplication application)
    {
        IFailuresProcessor myFailUI = <span class="highlight-keyword">new</span> FailUI();
        <span class="highlight-comment">//Autodesk.Revit.ApplicationServices.Application.RegisterFailuresProcessor(myFailUI);</span>
        <span class="highlight-keyword">return</span> Result.Succeeded;
    }

    <span class="highlight-keyword">public</span> Result OnShutdown(UIControlledApplication application)
    {
        <span class="highlight-keyword">return</span> Result.Succeeded;
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> FailUI : IFailuresProcessor
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Dismiss(Document document)
        {
            <span class="highlight-comment">// This method is being called in case of exception or document destruction to </span>
            <span class="highlight-comment">// dismiss any possible pending failure UI that may have left on the screen</span>
        }

        <span class="highlight-keyword">public</span> FailureProcessingResult ProcessFailures(FailuresAccessor failuresAccessor)
        {
            IList&lt;FailureResolutionType&gt; resolutionTypeList = <span class="highlight-keyword">new</span> List&lt;FailureResolutionType&gt;();
            IList&lt;FailureMessageAccessor&gt; failList = <span class="highlight-keyword">new</span> List&lt;FailureMessageAccessor&gt;();
            <span class="highlight-comment">// Inside event handler, get all warnings</span>
            failList = failuresAccessor.GetFailureMessages(); 
            <span class="highlight-keyword">string</span> errorString = <span class="highlight-literal">""</span>;
            <span class="highlight-keyword">bool</span> hasFailures = <span class="highlight-keyword">false</span>;
            <span class="highlight-keyword">foreach</span> (FailureMessageAccessor failure <span class="highlight-keyword">in</span> failList)
            {
                <span class="highlight-comment">// check how many resolutions types were attempted to try to prevent</span>
                <span class="highlight-comment">// entering infinite loop</span>
                resolutionTypeList = failuresAccessor.GetAttemptedResolutionTypes(failure);
                <span class="highlight-keyword">if</span> (resolutionTypeList.Count &gt;= <span class="highlight-number">3</span>)
                {
                    TaskDialog.Show(<span class="highlight-literal">"Error"</span>, <span class="highlight-literal">"Cannot resolve failures - transaction will be rolled back."</span>);
                    <span class="highlight-keyword">return</span> FailureProcessingResult.ProceedWithRollBack;
                }

                errorString += <span class="highlight-literal">"IDs "</span>;
                <span class="highlight-keyword">foreach</span> (ElementId id <span class="highlight-keyword">in</span> failure.GetFailingElementIds())
                {
                    errorString += id.ToString() + <span class="highlight-literal">", "</span>;
                    hasFailures = <span class="highlight-keyword">true</span>;
                }
                errorString += <span class="highlight-literal">"\nWill be deleted because: "</span> + failure.GetDescriptionText() + <span class="highlight-literal">"\n"</span>;
                failuresAccessor.DeleteElements(failure.GetFailingElementIds() <span class="highlight-keyword">as</span> IList&lt;ElementId&gt;);
            }
            <span class="highlight-keyword">if</span> (hasFailures)
            {
                TaskDialog.Show(<span class="highlight-literal">"Error"</span>, errorString);
                <span class="highlight-keyword">return</span> FailureProcessingResult.ProceedWithCommit;
            }

            <span class="highlight-keyword">return</span> FailureProcessingResult.Continue;
        }
    }
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve">&lt;Autodesk.Revit.Attributes.Transaction(Autodesk.Revit.Attributes.TransactionMode.Manual)&gt; _
 <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> MyFailuresUI
   <span class="highlight-keyword">Implements</span> IExternalApplication
   <span class="highlight-keyword">Shared</span> m_appId <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> AddInId(<span class="highlight-keyword">New</span> Guid(<span class="highlight-literal">"9F179363-B349-4541-823F-A2DDB2B86AF3"</span>))
   <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnStartup(application <span class="highlight-keyword">As</span> UIControlledApplication) <span class="highlight-keyword">As</span> Autodesk.Revit.UI.Result <span class="highlight-keyword">Implements</span> IExternalApplication.OnStartup
      <span class="highlight-keyword">Dim</span> myFailUI <span class="highlight-keyword">As</span> IFailuresProcessor = <span class="highlight-keyword">New</span> FailUI()
      <span class="highlight-comment">'Autodesk.Revit.ApplicationServices.Application.RegisterFailuresProcessor(myFailUI);</span>
      <span class="highlight-keyword">Return</span> Result.Succeeded
   <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

   <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnShutdown(application <span class="highlight-keyword">As</span> UIControlledApplication) <span class="highlight-keyword">As</span> Autodesk.Revit.UI.Result <span class="highlight-keyword">Implements</span> IExternalApplication.OnShutdown
      <span class="highlight-keyword">Return</span> Result.Succeeded
   <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

   <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> FailUI
      <span class="highlight-keyword">Implements</span> IFailuresProcessor
      <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> Dismiss(document <span class="highlight-keyword">As</span> Document) <span class="highlight-keyword">Implements</span> IFailuresProcessor.Dismiss
         <span class="highlight-comment">' This method is being called in case of exception or document destruction to </span>
         <span class="highlight-comment">' dismiss any possible pending failure UI that may have left on the screen</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

      <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> ProcessFailures(failuresAccessor <span class="highlight-keyword">As</span> FailuresAccessor) <span class="highlight-keyword">As</span> FailureProcessingResult <span class="highlight-keyword">Implements</span> IFailuresProcessor.ProcessFailures
         <span class="highlight-keyword">Dim</span> resolutionTypeList <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> FailureResolutionType) = <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> FailureResolutionType)()
         <span class="highlight-keyword">Dim</span> failList <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> FailureMessageAccessor) = <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> FailureMessageAccessor)()
         <span class="highlight-comment">' Inside event handler, get all warnings</span>
         failList = failuresAccessor.GetFailureMessages()
         <span class="highlight-keyword">Dim</span> errorString <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">""</span>
         <span class="highlight-keyword">Dim</span> hasFailures <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>
         <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> failure <span class="highlight-keyword">As</span> FailureMessageAccessor <span class="highlight-keyword">In</span> failList
            <span class="highlight-comment">' check how many resolutions types were attempted to try to prevent</span>
            <span class="highlight-comment">' entering infinite loop</span>
            resolutionTypeList = failuresAccessor.GetAttemptedResolutionTypes(failure)
            <span class="highlight-keyword">If</span> resolutionTypeList.Count &gt;= <span class="highlight-number">3</span> <span class="highlight-keyword">Then</span>
               TaskDialog.Show(<span class="highlight-literal">"Error"</span>, <span class="highlight-literal">"Cannot resolve failures - transaction will be rolled back."</span>)
               <span class="highlight-keyword">Return</span> FailureProcessingResult.ProceedWithRollBack
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            errorString += <span class="highlight-literal">"IDs "</span>
            <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> id <span class="highlight-keyword">As</span> ElementId <span class="highlight-keyword">In</span> failure.GetFailingElementIds()
               errorString += id.ToString() &amp; <span class="highlight-literal">", "</span>
               hasFailures = <span class="highlight-keyword">True</span>
            <span class="highlight-keyword">Next</span>
            errorString += vbLf &amp; <span class="highlight-literal">"Will be deleted because: "</span> &amp; failure.GetDescriptionText() &amp; vbLf
            failuresAccessor.DeleteElements(<span class="highlight-keyword">TryCast</span>(failure.GetFailingElementIds(), IList(<span class="highlight-keyword">Of</span> ElementId)))
         <span class="highlight-keyword">Next</span>
         <span class="highlight-keyword">If</span> hasFailures <span class="highlight-keyword">Then</span>
            TaskDialog.Show(<span class="highlight-literal">"Error"</span>, errorString)
            <span class="highlight-keyword">Return</span> FailureProcessingResult.ProceedWithCommit
         <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

         <span class="highlight-keyword">Return</span> FailureProcessingResult.[<span class="highlight-keyword">Continue</span>]
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
   <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="04be4407-94c6-a5f0-a5a4-1ab2a3d831f4.htm">IFailuresProcessor Members</a></div><div class="seeAlsoStyle"><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>