{% macro header() %}<title>SchemaBuilder Class</title>{% assets "css_chm" %}<link rel="stylesheet" type="text/css" href="{{ ASSET_URL }}" />{% endassets %}{% assets "js_assets" %}<script src="{{ ASSET_URL }}"></script>{% endassets %}<meta name="container" content="Autodesk.Revit.DB.ExtensibleStorage" /><meta name="file" content="e74f9357-cc3c-558e-73b8-38ce6d247869" /><meta name="guid" content="e74f9357-cc3c-558e-73b8-38ce6d247869" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script>{% endmacro %}<div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2017 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">SchemaBuilder Class</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="83e2f92a-2820-8c34-c6bf-4685a68f59cf.htm">Members</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2017 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table></div><div id="mainSection"><div id="mainBody"><div class="summary">
   This class is used to create Schemas in the Extensible Storage framework.
</div><p /><b>Namespace:</b> <a href="79486a74-376c-9555-c873-45d5a750f051.htm">Autodesk.Revit.DB.ExtensibleStorage</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 17.0.0.0 (17.0.484.0)<br /><b>Since:</b> 
   2012
<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">SchemaBuilder</span> : <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">SchemaBuilder</span> _
	<span class="keyword">Implements</span> <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">SchemaBuilder</span> : <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle, event)" tabindex="0"><img id="remarksToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="">
   Named parameter idiom: Methods that set up the Schema return a reference to the builder so
   you can invoke multiple methods in a chain
   (e.g., builder.setReadAccessLevel(...).setWriteAccessLevel(...)).
   Methods that add fields return a FieldBuilder instead.
</div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-comment">// Create a data structure, attach it to a wall, populate it with data, and retrieve the data back from the wall</span>
<span class="highlight-keyword">void</span> StoreDataInWall(Wall wall, XYZ dataToStore)
{
    <span class="highlight-keyword">using</span> (Transaction createSchemaAndStoreData = <span class="highlight-keyword">new</span> Transaction(wall.Document, <span class="highlight-literal">"tCreateAndStore"</span>))
    {
       createSchemaAndStoreData.Start();
       SchemaBuilder schemaBuilder = <span class="highlight-keyword">new</span> SchemaBuilder(<span class="highlight-keyword">new</span> Guid(<span class="highlight-literal">"720080CB-DA99-40DC-9415-E53F280AA1F0"</span>));
       schemaBuilder.SetReadAccessLevel(AccessLevel.Public); <span class="highlight-comment">// allow anyone to read the object</span>
       schemaBuilder.SetWriteAccessLevel(AccessLevel.Vendor); <span class="highlight-comment">// restrict writing to this vendor only</span>
       schemaBuilder.SetVendorId(<span class="highlight-literal">"ADSK"</span>); <span class="highlight-comment">// required because of restricted write-access</span>
       schemaBuilder.SetSchemaName(<span class="highlight-literal">"WireSpliceLocation"</span>);
       FieldBuilder fieldBuilder = schemaBuilder.AddSimpleField(<span class="highlight-literal">"WireSpliceLocation"</span>, <span class="highlight-keyword">typeof</span>(XYZ)); <span class="highlight-comment">// create a field to store an XYZ</span>
       fieldBuilder.SetUnitType(UnitType.UT_Length);
       fieldBuilder.SetDocumentation(<span class="highlight-literal">"A stored location value representing a wiring splice in a wall."</span>);

       Schema schema = schemaBuilder.Finish(); <span class="highlight-comment">// register the Schema object</span>
       Entity entity = <span class="highlight-keyword">new</span> Entity(schema); <span class="highlight-comment">// create an entity (object) for this schema (class)</span>
       Field fieldSpliceLocation = schema.GetField(<span class="highlight-literal">"WireSpliceLocation"</span>); <span class="highlight-comment">// get the field from the schema</span>
       entity.Set&lt;XYZ&gt;(fieldSpliceLocation, dataToStore, DisplayUnitType.DUT_METERS); <span class="highlight-comment">// set the value for this entity</span>

       wall.SetEntity(entity); <span class="highlight-comment">// store the entity in the element</span>

       <span class="highlight-comment">// get the data back from the wall</span>
       Entity retrievedEntity = wall.GetEntity(schema);
       XYZ retrievedData = retrievedEntity.Get&lt;XYZ&gt;(schema.GetField(<span class="highlight-literal">"WireSpliceLocation"</span>), DisplayUnitType.DUT_METERS);
       createSchemaAndStoreData.Commit();
    }
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-comment">' Create a data structure, attach it to a wall, populate it with data, and retrieve the data back from the wall</span>
<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> StoreDataInWall(wall <span class="highlight-keyword">As</span> Wall, dataToStore <span class="highlight-keyword">As</span> XYZ)
   <span class="highlight-keyword">Using</span> createSchemaAndStoreData <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Transaction(wall.Document, <span class="highlight-literal">"tCreateAndStore"</span>)
      createSchemaAndStoreData.Start()
      <span class="highlight-keyword">Dim</span> schemaBuilder <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> SchemaBuilder(<span class="highlight-keyword">New</span> Guid(<span class="highlight-literal">"720080CB-DA99-40DC-9415-E53F280AA1F0"</span>))
      schemaBuilder.SetReadAccessLevel(AccessLevel.[<span class="highlight-keyword">Public</span>])
      <span class="highlight-comment">' allow anyone to read the object</span>
      schemaBuilder.SetWriteAccessLevel(AccessLevel.Vendor)
      <span class="highlight-comment">' restrict writing to this vendor only</span>
      schemaBuilder.SetVendorId(<span class="highlight-literal">"ADSK"</span>)
      <span class="highlight-comment">' required because of restricted write-access</span>
      schemaBuilder.SetSchemaName(<span class="highlight-literal">"WireSpliceLocation"</span>)
      <span class="highlight-keyword">Dim</span> fieldBuilder <span class="highlight-keyword">As</span> FieldBuilder = schemaBuilder.AddSimpleField(<span class="highlight-literal">"WireSpliceLocation"</span>, <span class="highlight-keyword">GetType</span>(XYZ))
      <span class="highlight-comment">' create a field to store an XYZ</span>
      fieldBuilder.SetUnitType(UnitType.UT_Length)
      fieldBuilder.SetDocumentation(<span class="highlight-literal">"A stored location value representing a wiring splice in a wall."</span>)

      <span class="highlight-keyword">Dim</span> schema <span class="highlight-keyword">As</span> Schema = schemaBuilder.Finish()
      <span class="highlight-comment">' register the Schema object</span>
      <span class="highlight-keyword">Dim</span> entity <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Entity(schema)
      <span class="highlight-comment">' create an entity (object) for this schema (class)</span>
      <span class="highlight-keyword">Dim</span> fieldSpliceLocation <span class="highlight-keyword">As</span> Field = schema.GetField(<span class="highlight-literal">"WireSpliceLocation"</span>)
      <span class="highlight-comment">' get the field from the schema</span>
      entity.[<span class="highlight-keyword">Set</span>](<span class="highlight-keyword">Of</span> XYZ)(fieldSpliceLocation, dataToStore, DisplayUnitType.DUT_METERS)
      <span class="highlight-comment">' set the value for this entity</span>
      wall.SetEntity(entity)
      <span class="highlight-comment">' store the entity in the element</span>
      <span class="highlight-comment">' get the data back from the wall</span>
      <span class="highlight-keyword">Dim</span> retrievedEntity <span class="highlight-keyword">As</span> Entity = wall.GetEntity(schema)
      <span class="highlight-keyword">Dim</span> retrievedData <span class="highlight-keyword">As</span> XYZ = retrievedEntity.[<span class="highlight-keyword">Get</span>](<span class="highlight-keyword">Of</span> XYZ)(schema.GetField(<span class="highlight-literal">"WireSpliceLocation"</span>), DisplayUnitType.DUT_METERS)
      createSchemaAndStoreData.Commit()
   <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Object</a><br />  <span class="selflink">Autodesk.Revit.DB.ExtensibleStorage<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>SchemaBuilder</span><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="83e2f92a-2820-8c34-c6bf-4685a68f59cf.htm">SchemaBuilder Members</a></div><div class="seeAlsoStyle"><a href="79486a74-376c-9555-c873-45d5a750f051.htm">Autodesk.Revit.DB.ExtensibleStorage Namespace</a></div></div></div></div>
