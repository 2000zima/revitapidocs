{% macro header() %}<title>Create Method </title>{% assets "css_chm" %}<link rel="stylesheet" type="text/css" href="{{ ASSET_URL }}" />{% endassets %}{% assets "js_assets" %}<script src="{{ ASSET_URL }}"></script>{% endassets %}<meta name="container" content="Autodesk.Revit.DB.Structure" /><meta name="file" content="32ab758e-72e1-b024-3c9c-a21b7ed2d575" /><meta name="guid" content="32ab758e-72e1-b024-3c9c-a21b7ed2d575" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script>{% endmacro %}<div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2017 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">LoadUsage<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Create Method </span></td></tr><tr id="headerTableRow3"><td align="left"><a href="0b44bcfe-4c5e-85c2-adb5-aeb6ad097ee6.htm">LoadUsage Class</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2017 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table></div><div id="mainSection"><div id="mainBody"><div class="summary">
   Creates a new LoadUsage.
</div><p /><b>Namespace:</b> <a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">Autodesk.Revit.DB.Structure</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 17.0.0.0 (17.0.484.0)<br /><b>Since:</b> 
   2016
<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <a href="0b44bcfe-4c5e-85c2-adb5-aeb6ad097ee6.htm">LoadUsage</a> <span class="identifier">Create</span>(
	<a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a> <span class="parameter">document</span>,
	<a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">string</a> <span class="parameter">name</span>
)</pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">Create</span> ( _
	<span class="parameter">document</span> <span class="keyword">As</span> <a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a>, _
	<span class="parameter">name</span> <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a> _
) <span class="keyword">As</span> <a href="0b44bcfe-4c5e-85c2-adb5-aeb6ad097ee6.htm">LoadUsage</a></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="keyword">static</span> <a href="0b44bcfe-4c5e-85c2-adb5-aeb6ad097ee6.htm">LoadUsage</a>^ <span class="identifier">Create</span>(
	<a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Document</a>^ <span class="parameter">document</span>, 
	<a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a>^ <span class="parameter">name</span>
)</pre></td></tr></table></span></div><div id="parameters"><h4 class="subHeading">Parameters</h4><dl paramName="document"><dt><span class="parameter">document</span></dt><dd>Type: <a href="db03274b-a107-aa32-9034-f3e0df4bb1ec.htm">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Document</a><br />
   The Document to which new load usage element will be added.
</dd></dl><dl paramName="name"><dt><span class="parameter">name</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>String</a><br />
   The name of the load usage.
</dd></dl></div><h4 class="subHeading">Return Value</h4>
   The newly created load usage element if successful, <span class="keyword"><span class="languageSpecificText"><span class="cs">null</span><span class="vb">Nothing</span><span class="cpp">nullptr</span></span></span><span class="nu">a null reference (<span class="keyword">Nothing</span> in Visual Basic)</span> otherwise.
</div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-preprocessor">#region</span> Autodesk.Revit.DB.Structure.LoadComponent.<span class="highlight-preprocessor">#ctor</span>(Autodesk.Revit.DB.ElementId,System.Double)
<span class="highlight-preprocessor">#region</span> Autodesk.Revit.DB.Structure.LoadCombination.SetComponents(System.Collections.Generic.IList{Autodesk.Revit.DB.Structure.LoadComponent})
<span class="highlight-preprocessor">#region</span> Autodesk.Revit.DB.Structure.LoadCombination.SetUsageIds(System.Collections.Generic.IList{Autodesk.Revit.DB.ElementId})
LoadCombination CreateLoadCombinationLoadCaseLoadUsageLoadNatureAndLoadComponent(Document document)
{
    <span class="highlight-comment">// Create a new load combination</span>
    LoadCombination loadCombination = LoadCombination.Create(document, <span class="highlight-literal">"DL1 + RAIN1"</span>, LoadCombinationType.Combination, LoadCombinationState.Ultimate);
    <span class="highlight-keyword">if</span> (loadCombination == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load combination failed."</span>);

    <span class="highlight-comment">// Get all existing LoadCase</span>
    FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
    ICollection&lt;Element&gt; collection = collector.OfClass(<span class="highlight-keyword">typeof</span>(LoadCase)).ToElements();

    <span class="highlight-comment">// Find LoadCase "DL1"</span>
    LoadCase case1 = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">foreach</span> (Element e <span class="highlight-keyword">in</span> collection)
    {
       LoadCase loadCase = e <span class="highlight-keyword">as</span> LoadCase;
       <span class="highlight-keyword">if</span> (loadCase.Name == <span class="highlight-literal">"DL1"</span>)
       {
          case1 = loadCase;
          <span class="highlight-keyword">break</span>;
       }
    }

    <span class="highlight-comment">// Get all existing LoadNature</span>
    collector = <span class="highlight-keyword">new</span> FilteredElementCollector(document);
    collection = collector.OfClass(<span class="highlight-keyword">typeof</span>(LoadNature)).ToElements();

    <span class="highlight-comment">// Find LoadNature "Dead"</span>
    LoadNature nature1 = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">foreach</span> (Element e <span class="highlight-keyword">in</span> collection)
    {
       LoadNature loadNature = e <span class="highlight-keyword">as</span> LoadNature;
       <span class="highlight-keyword">if</span> (loadNature.Name == <span class="highlight-literal">"Dead"</span>)
       {
          nature1 = loadNature;
          <span class="highlight-keyword">break</span>;
       }
    }

    <span class="highlight-comment">// Create LoadNature "Dead" if not exist</span>
    <span class="highlight-keyword">if</span> (nature1 == <span class="highlight-keyword">null</span>)
       nature1 = LoadNature.Create(document, <span class="highlight-literal">"Dead"</span>);

    <span class="highlight-comment">// Create LoadCase "DL1" if not exist</span>
    <span class="highlight-keyword">if</span> (case1 == <span class="highlight-keyword">null</span>)
       case1 = LoadCase.Create(document, <span class="highlight-literal">"DL1"</span>, nature1.Id, LoadCaseCategory.Dead);

    <span class="highlight-comment">// Create LoadNature "Rain"</span>
    LoadNature nature2 = LoadNature.Create(document, <span class="highlight-literal">"Rain"</span>);
    <span class="highlight-keyword">if</span> (nature2 == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load nature failed."</span>);

    <span class="highlight-comment">// Create LoadCase "RAIN1"</span>
    LoadCase case2 = LoadCase.Create(document, <span class="highlight-literal">"RAIN1"</span>, nature2.Id, LoadCaseCategory.Snow);
    <span class="highlight-keyword">if</span> (case1 == <span class="highlight-keyword">null</span> || case2 == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load case failed."</span>);

    <span class="highlight-comment">// Create LoadComponents - they consist of LoadCases or nested LoadCombination and Factors</span>
    List&lt;LoadComponent&gt; components = <span class="highlight-keyword">new</span> List&lt;LoadComponent&gt;();
    components.Add(<span class="highlight-keyword">new</span> LoadComponent(case1.Id, <span class="highlight-number">2.0</span>));
    components.Add(<span class="highlight-keyword">new</span> LoadComponent(case2.Id, <span class="highlight-number">1.5</span>));

    <span class="highlight-comment">// Add components to combination</span>
    loadCombination.SetComponents(components);

    <span class="highlight-comment">// Create LoadUsages</span>
    LoadUsage usage1 = LoadUsage.Create(document, <span class="highlight-literal">"Frequent"</span>);
    LoadUsage usage2 = LoadUsage.Create(document, <span class="highlight-literal">"Rare"</span>);

    <span class="highlight-keyword">if</span> (usage1 == <span class="highlight-keyword">null</span> || usage2 == <span class="highlight-keyword">null</span>)
       <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception(<span class="highlight-literal">"Create new load usage failed."</span>);

    <span class="highlight-comment">// Add load usages to combination</span>
    loadCombination.SetUsageIds(<span class="highlight-keyword">new</span> List&lt;ElementId&gt;() {usage1.Id, usage2.Id});

    <span class="highlight-comment">// Give the user some information</span>
    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, <span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"Load Combination ID='{0}' created successfully."</span>, loadCombination.Id.IntegerValue));

    <span class="highlight-keyword">return</span> loadCombination;
}
<span class="highlight-preprocessor">#endregion</span>
<span class="highlight-preprocessor">#endregion</span>
<span class="highlight-preprocessor">#endregion</span></pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-preprocessor">#Region</span> <span class="highlight-literal">"Autodesk.Revit.DB.Structure.LoadComponent.#ctor(Autodesk.Revit.DB.ElementId,System.Double)"</span>
<span class="highlight-preprocessor">#Region</span> <span class="highlight-literal">"Autodesk.Revit.DB.Structure.LoadCombination.SetComponents(System.Collections.Generic.IList{Autodesk.Revit.DB.Structure.LoadComponent})"</span>
<span class="highlight-preprocessor">#Region</span> <span class="highlight-literal">"Autodesk.Revit.DB.Structure.LoadCombination.SetUsageIds(System.Collections.Generic.IList{Autodesk.Revit.DB.ElementId})"</span>
<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> CreateLoadCombinationLoadCaseLoadUsageLoadNatureAndLoadComponent(document <span class="highlight-keyword">As</span> Document) <span class="highlight-keyword">As</span> LoadCombination
    <span class="highlight-comment">' Create a new load combination</span>
    <span class="highlight-keyword">Dim</span> loadCombination__1 <span class="highlight-keyword">As</span> LoadCombination = LoadCombination.Create(document, <span class="highlight-literal">"DL1 + RAIN1"</span>, LoadCombinationType.Combination, LoadCombinationState.Ultimate)
    <span class="highlight-keyword">If</span> loadCombination__1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load combination failed."</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Get all existing LoadCase</span>
    <span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(document)
    <span class="highlight-keyword">Dim</span> collection <span class="highlight-keyword">As</span> ICollection(<span class="highlight-keyword">Of</span> Element) = collector.OfClass(<span class="highlight-keyword">GetType</span>(LoadCase)).ToElements()

    <span class="highlight-comment">' Find LoadCase "DL1"</span>
    <span class="highlight-keyword">Dim</span> case1 <span class="highlight-keyword">As</span> LoadCase = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> e <span class="highlight-keyword">As</span> Element <span class="highlight-keyword">In</span> collection
        <span class="highlight-keyword">Dim</span> loadCase__2 <span class="highlight-keyword">As</span> LoadCase = <span class="highlight-keyword">TryCast</span>(e, LoadCase)
        <span class="highlight-keyword">If</span> loadCase__2.Name = <span class="highlight-literal">"DL1"</span> <span class="highlight-keyword">Then</span>
            case1 = loadCase__2
            <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Next</span>

    <span class="highlight-comment">' Get all existing LoadNature</span>
    collector = <span class="highlight-keyword">New</span> FilteredElementCollector(document)
    collection = collector.OfClass(<span class="highlight-keyword">GetType</span>(LoadNature)).ToElements()

    <span class="highlight-comment">' Find LoadNature "Dead"</span>
    <span class="highlight-keyword">Dim</span> nature1 <span class="highlight-keyword">As</span> LoadNature = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> e <span class="highlight-keyword">As</span> Element <span class="highlight-keyword">In</span> collection
        <span class="highlight-keyword">Dim</span> loadNature__3 <span class="highlight-keyword">As</span> LoadNature = <span class="highlight-keyword">TryCast</span>(e, LoadNature)
        <span class="highlight-keyword">If</span> loadNature__3.Name = <span class="highlight-literal">"Dead"</span> <span class="highlight-keyword">Then</span>
            nature1 = loadNature__3
            <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Next</span>

    <span class="highlight-comment">' Create LoadNature "Dead" if not exist</span>
    <span class="highlight-keyword">If</span> nature1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        nature1 = LoadNature.Create(document, <span class="highlight-literal">"Dead"</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Create LoadCase "DL1" if not exist</span>
    <span class="highlight-keyword">If</span> case1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
    case1 = LoadCase.Create(document, <span class="highlight-literal">"DL1"</span>, nature1.Id, LoadCaseCategory.Dead)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Create LoadNature "Rain"</span>
    <span class="highlight-keyword">Dim</span> nature2 <span class="highlight-keyword">As</span> LoadNature = LoadNature.Create(document, <span class="highlight-literal">"Rain"</span>)
    <span class="highlight-keyword">If</span> nature2 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load nature failed."</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Create LoadCase "RAIN1"</span>
 <span class="highlight-keyword">Dim</span> case2 <span class="highlight-keyword">As</span> LoadCase = LoadCase.Create(document, <span class="highlight-literal">"RAIN1"</span>, nature2.Id, LoadCaseCategory.Snow)
    <span class="highlight-keyword">If</span> case1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">OrElse</span> case2 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load case failed."</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Create LoadComponents - they consist of LoadCases or nested LoadCombination and Factors</span>
    <span class="highlight-keyword">Dim</span> components <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> LoadComponent)()
    components.Add(<span class="highlight-keyword">New</span> LoadComponent(case1.Id, <span class="highlight-number">2.0</span>))
    components.Add(<span class="highlight-keyword">New</span> LoadComponent(case2.Id, <span class="highlight-number">1.5</span>))

    <span class="highlight-comment">' Add components to combination</span>
    loadCombination__1.SetComponents(components)

    <span class="highlight-comment">' Create LoadUsages</span>
    <span class="highlight-keyword">Dim</span> usage1 <span class="highlight-keyword">As</span> LoadUsage = LoadUsage.Create(document, <span class="highlight-literal">"Frequent"</span>)
    <span class="highlight-keyword">Dim</span> usage2 <span class="highlight-keyword">As</span> LoadUsage = LoadUsage.Create(document, <span class="highlight-literal">"Rare"</span>)

    <span class="highlight-keyword">If</span> usage1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">OrElse</span> usage2 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> Exception(<span class="highlight-literal">"Create new load usage failed."</span>)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Add load usages to combination</span>
    loadCombination__1.SetUsageIds(<span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> ElementId)() From { _
        usage1.Id, _
        usage2.Id _
    })

    <span class="highlight-comment">' Give the user some information</span>
    TaskDialog.Show(<span class="highlight-literal">"Revit"</span>, <span class="highlight-keyword">String</span>.Format(<span class="highlight-comment">"Load Combination ID='{0}' created successfully."</span>, loadCombination__1.Id.IntegerValue))

    <span class="highlight-keyword">Return</span> loadCombination__1
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-preprocessor">#End Region</span>
<span class="highlight-preprocessor">#End Region</span>
<span class="highlight-preprocessor">#End Region</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(exceptionsToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exceptionsToggle, event)" tabindex="0"><img id="exceptionsToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Exceptions</span></h1><div id="exceptionsSection" class="section" name="collapseableSection" style=""><div class="tableSection"><table width="100%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th class="exceptionNameColumn">Exception</th><th class="exceptionConditionColumn">Condition</th></tr><tr><td><a href="2e6e4206-97a8-dd4b-df5d-4269f4bb6088.htm">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ArgumentException</a></td><td>
   The given name is not unique
</td></tr><tr><td><a href="631e1424-60f4-929b-4e52-dda9dcd26316.htm">Autodesk.Revit.Exceptions<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ArgumentNullException</a></td><td>
   A non-optional argument was NULL
</td></tr></table></div></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="0b44bcfe-4c5e-85c2-adb5-aeb6ad097ee6.htm">LoadUsage Class</a></div><div class="seeAlsoStyle"><a href="d586b341-f687-9d90-e96d-255806b7d4fc.htm">Autodesk.Revit.DB.Structure Namespace</a></div></div></div></div>