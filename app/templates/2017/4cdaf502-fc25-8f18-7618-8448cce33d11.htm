{% macro header() %}<title>IUpdater Interface</title>{% assets "css_chm" %}<link rel="stylesheet" type="text/css" href="{{ ASSET_URL }}" />{% endassets %}{% assets "js_assets" %}<script src="{{ ASSET_URL }}"></script>{% endassets %}<meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="4cdaf502-fc25-8f18-7618-8448cce33d11" /><meta name="guid" content="4cdaf502-fc25-8f18-7618-8448cce33d11" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script>{% endmacro %}<div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2017 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">IUpdater Interface</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="ab8bc959-11c3-14c4-75ff-e1468973200e.htm">Members</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2017 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table></div><div id="mainSection"><div id="mainBody"><div class="summary">
   The interface used to create an updater capable of reacting to changes in the Revit model.
</div><p /><b>Namespace:</b> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 17.0.0.0 (17.0.484.0)<br /><b>Since:</b> 
   2011
<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="identifier">IUpdater</span></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Interface</span> <span class="identifier">IUpdater</span></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">interface class</span> <span class="identifier">IUpdater</span></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle, event)" tabindex="0"><img id="remarksToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="">
   Implement this interface and register an instance of the derived class with the UpdaterRegistry.
</div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> WallUpdaterApplication : Autodesk.Revit.UI.IExternalApplication
{
    <span class="highlight-keyword">public</span> Result OnStartup(UIControlledApplication application)
    {
        <span class="highlight-comment">// Register wall updater with Revit</span>
        WallUpdater updater = <span class="highlight-keyword">new</span> WallUpdater(application.ActiveAddInId);
        UpdaterRegistry.RegisterUpdater(updater);

        <span class="highlight-comment">// Change Scope = any Wall element</span>
        ElementClassFilter wallFilter = <span class="highlight-keyword">new</span> ElementClassFilter(<span class="highlight-keyword">typeof</span>(Wall));

        <span class="highlight-comment">// Change type = element addition</span>
        UpdaterRegistry.AddTrigger(updater.GetUpdaterId(), wallFilter,
                                    Element.GetChangeTypeElementAddition());
        <span class="highlight-keyword">return</span> Result.Succeeded;
    }

    <span class="highlight-keyword">public</span> Result OnShutdown(UIControlledApplication application)
    {
        WallUpdater updater = <span class="highlight-keyword">new</span> WallUpdater(application.ActiveAddInId);
        UpdaterRegistry.UnregisterUpdater(updater.GetUpdaterId());
        <span class="highlight-keyword">return</span> Result.Succeeded;
    }
}

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> WallUpdater : IUpdater
{
    <span class="highlight-keyword">static</span> AddInId m_appId;
    <span class="highlight-keyword">static</span> UpdaterId m_updaterId;
    WallType m_wallType = <span class="highlight-keyword">null</span>;

    <span class="highlight-comment">// constructor takes the AddInId for the add-in associated with this updater</span>
    <span class="highlight-keyword">public</span> WallUpdater(AddInId id)
    {
        m_appId = id;
        m_updaterId = <span class="highlight-keyword">new</span> UpdaterId(m_appId, <span class="highlight-keyword">new</span> Guid(<span class="highlight-literal">"FBFBF6B2-4C06-42d4-97C1-D1B4EB593EFF"</span>));
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Execute(UpdaterData data)
    {
        Document doc = data.GetDocument();

        <span class="highlight-comment">// Cache the wall type</span>
        <span class="highlight-keyword">if</span> (m_wallType == <span class="highlight-keyword">null</span>)
        {
            FilteredElementCollector collector = <span class="highlight-keyword">new</span> FilteredElementCollector(doc);
            collector.OfClass(<span class="highlight-keyword">typeof</span>(WallType));
            var wallTypes = from element <span class="highlight-keyword">in</span> collector
                            where
                                element.Name == <span class="highlight-literal">"Exterior - Brick on CMU"</span>
                            select element;
            <span class="highlight-keyword">if</span> (wallTypes.Count&lt;Element&gt;() &gt; <span class="highlight-number">0</span>)
            {
                m_wallType = wallTypes.Cast&lt;WallType&gt;().ElementAt&lt;WallType&gt;(<span class="highlight-number">0</span>);
            }
        }

        <span class="highlight-keyword">if</span> (m_wallType != <span class="highlight-keyword">null</span>)
        {
            <span class="highlight-comment">// Change the wall to the cached wall type.</span>
            <span class="highlight-keyword">foreach</span> (ElementId addedElemId <span class="highlight-keyword">in</span> data.GetAddedElementIds())
            {
                Wall wall = doc.GetElement(addedElemId) <span class="highlight-keyword">as</span> Wall;
                <span class="highlight-keyword">if</span> (wall != <span class="highlight-keyword">null</span>)
                {
                    wall.WallType = m_wallType;
                }
            }
        }
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> GetAdditionalInformation()
    {
        <span class="highlight-keyword">return</span> <span class="highlight-literal">"Wall type updater example: updates all newly created walls to a special wall"</span>;
    }

    <span class="highlight-keyword">public</span> ChangePriority GetChangePriority()
    {
        <span class="highlight-keyword">return</span> ChangePriority.FloorsRoofsStructuralWalls;
    }

    <span class="highlight-keyword">public</span> UpdaterId GetUpdaterId()
    {
        <span class="highlight-keyword">return</span> m_updaterId;
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> GetUpdaterName()
    {
        <span class="highlight-keyword">return</span> <span class="highlight-literal">"Wall Type Updater"</span>;
    }
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> WallUpdaterApplication
    <span class="highlight-keyword">Implements</span> Autodesk.Revit.UI.IExternalApplication
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnStartup(application <span class="highlight-keyword">As</span> UIControlledApplication) <span class="highlight-keyword">As</span> Autodesk.Revit.UI.Result <span class="highlight-keyword">Implements</span> IExternalApplication.OnStartup
        <span class="highlight-comment">' Register wall updater with Revit</span>
        <span class="highlight-keyword">Dim</span> updater <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> WallUpdater(application.ActiveAddInId)
        UpdaterRegistry.RegisterUpdater(updater)

        <span class="highlight-comment">' Change Scope = any Wall element</span>
        <span class="highlight-keyword">Dim</span> wallFilter <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> ElementClassFilter(<span class="highlight-keyword">GetType</span>(Wall))

        <span class="highlight-comment">' Change type = element addition</span>
        UpdaterRegistry.AddTrigger(updater.GetUpdaterId(), wallFilter, Element.GetChangeTypeElementAddition())
        <span class="highlight-keyword">Return</span> Result.Succeeded
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnShutdown(application <span class="highlight-keyword">As</span> UIControlledApplication) <span class="highlight-keyword">As</span> Autodesk.Revit.UI.Result <span class="highlight-keyword">Implements</span> IExternalApplication.OnShutdown
        <span class="highlight-keyword">Dim</span> updater <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> WallUpdater(application.ActiveAddInId)
        UpdaterRegistry.UnregisterUpdater(updater.GetUpdaterId())
        <span class="highlight-keyword">Return</span> Result.Succeeded
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>

<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> WallUpdater
    <span class="highlight-keyword">Implements</span> IUpdater
    <span class="highlight-keyword">Shared</span> m_appId <span class="highlight-keyword">As</span> AddInId
    <span class="highlight-keyword">Shared</span> m_updaterId <span class="highlight-keyword">As</span> UpdaterId
    <span class="highlight-keyword">Private</span> m_wallType <span class="highlight-keyword">As</span> WallType = <span class="highlight-keyword">Nothing</span>

    <span class="highlight-comment">' constructor takes the AddInId for the add-in associated with this updater</span>
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>(id <span class="highlight-keyword">As</span> AddInId)
        m_appId = id
        m_updaterId = <span class="highlight-keyword">New</span> UpdaterId(m_appId, <span class="highlight-keyword">New</span> Guid(<span class="highlight-literal">"FBFBF6B2-4C06-42d4-97C1-D1B4EB593EFF"</span>))
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> Execute(data <span class="highlight-keyword">As</span> UpdaterData) <span class="highlight-keyword">Implements</span> IUpdater.Execute
        <span class="highlight-keyword">Dim</span> doc <span class="highlight-keyword">As</span> Document = data.GetDocument()

        <span class="highlight-comment">' Cache the wall type</span>
        <span class="highlight-keyword">If</span> m_wallType <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-keyword">Dim</span> collector <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> FilteredElementCollector(doc)
            collector.OfClass(<span class="highlight-keyword">GetType</span>(WallType))
            <span class="highlight-keyword">Dim</span> wallTypes <span class="highlight-keyword">As</span> System.Collections.Generic.IEnumerable(<span class="highlight-keyword">Of</span> Autodesk.Revit.DB.Element)
            wallTypes = From element <span class="highlight-keyword">In</span> collector _
             Where element.Name = <span class="highlight-literal">"Exterior - Brick on CMU"</span> _
             <span class="highlight-keyword">Select</span> element
            <span class="highlight-keyword">If</span> wallTypes.Count() &gt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
                m_wallType = wallTypes.Cast(<span class="highlight-keyword">Of</span> WallType)().ElementAt(<span class="highlight-number">0</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        <span class="highlight-keyword">If</span> m_wallType <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' Change the wall to the cached wall type.</span>
            <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> addedElemId <span class="highlight-keyword">As</span> ElementId <span class="highlight-keyword">In</span> data.GetAddedElementIds()
                <span class="highlight-keyword">Dim</span> wall <span class="highlight-keyword">As</span> Wall = <span class="highlight-keyword">TryCast</span>(doc.GetElement(addedElemId), Wall)
                <span class="highlight-keyword">If</span> wall <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                    wall.WallType = m_wallType
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
            <span class="highlight-keyword">Next</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> GetAdditionalInformation() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> <span class="highlight-keyword">Implements</span> IUpdater.GetAdditionalInformation
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"Wall type updater example: updates all newly created walls to a special wall"</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> GetChangePriority() <span class="highlight-keyword">As</span> ChangePriority <span class="highlight-keyword">Implements</span> IUpdater.GetChangePriority
        <span class="highlight-keyword">Return</span> ChangePriority.FloorsRoofsStructuralWalls
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> GetUpdaterId() <span class="highlight-keyword">As</span> UpdaterId <span class="highlight-keyword">Implements</span> IUpdater.GetUpdaterId
        <span class="highlight-keyword">Return</span> m_updaterId
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> GetUpdaterName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> <span class="highlight-keyword">Implements</span> IUpdater.GetUpdaterName
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"Wall Type Updater"</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="ab8bc959-11c3-14c4-75ff-e1468973200e.htm">IUpdater Members</a></div><div class="seeAlsoStyle"><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>