{% macro header() %}<title>Start Method </title>{% assets "css_chm" %}<link rel="stylesheet" type="text/css" href="{{ ASSET_URL }}" />{% endassets %}{% assets "js_assets" %}<script src="{{ ASSET_URL }}"></script>{% endassets %}<meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="2d93c3c6-c826-cd70-dc0a-b94f66324c35" /><meta name="guid" content="2d93c3c6-c826-cd70-dc0a-b94f66324c35" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script>{% endmacro %}<div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2016 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">IExportContext<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Start Method </span></td></tr><tr id="headerTableRow3"><td align="left"><a href="7d0dc6df-db0e-6a07-3b42-8dde1bedb3c1.htm">IExportContext Interface</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2016 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table></div><div id="mainSection"><div id="mainBody"><div class="summary">
   This method is called at the very start of the export process,
   still before the first entity of the model was send out.
</div><p /><b>Namespace:</b> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 16.0.0.0 (16.0.0.0)<br /><b>Since:</b> 
   2014
<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">bool</a> <span class="identifier">Start</span>()</pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Function</span> <span class="identifier">Start</span> <span class="keyword">As</span> <a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">Boolean</a></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><a href="http://msdn2.microsoft.com/en-us/library/a28wyd50" target="_blank">bool</a> <span class="identifier">Start</span>()</pre></td></tr></table></span></div><h4 class="subHeading">Return Value</h4>
   Return True if you are ready to proceed with processing the export.
</div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-comment">// A context would typically maintain a variable for the document being exported</span>
<span class="highlight-keyword">private</span> Document m_document = <span class="highlight-keyword">null</span>;

<span class="highlight-comment">// Some contexts may find it useful to have a flag indicating</span>
<span class="highlight-comment">// whether or not the process should be canceled (see Is</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">bool</span> m_cancelled = <span class="highlight-keyword">false</span>;

<span class="highlight-comment">// Typically, an export context has to manage a stack of transformation</span>
<span class="highlight-comment">// for all nested objects, such as instances, lights, links, etc.</span>
<span class="highlight-keyword">private</span> Stack&lt;Transform&gt; m_TransformationStack = <span class="highlight-keyword">new</span> Stack&lt;Transform&gt;();

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Assuming that instance variables gets initiated in the context's constructor</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="document"&gt;&lt;/param&gt;</span>
<span class="highlight-keyword">public</span> MyExportContext(Document document)
{
   m_document = document;
   m_TransformationStack.Push(Transform.Identity);
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// This method is the starting point of the export process.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;remarks&gt;</span>
<span class="highlight-comment">/// The method is called only once and is typically used to prepare</span>
<span class="highlight-comment">/// the context object, e.g. crate or open the output files,</span>
<span class="highlight-comment">/// or establish a connection to an on-line renderer, etc.</span>
<span class="highlight-comment">/// &lt;/remarks&gt;</span>
<span class="highlight-comment">/// &lt;returns&gt;</span>
<span class="highlight-comment">/// Return true if the export process it good to start.</span>
<span class="highlight-comment">/// &lt;/returns&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> Start()
{
   <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// This method establishes the final point of the export process.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;remarks&gt;</span>
<span class="highlight-comment">/// Resources (such as files, pipes, threads, etc.) used by the context</span>
<span class="highlight-comment">/// should be properly released/closed inside this method.</span>
<span class="highlight-comment">/// &lt;/remarks&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Finish()
{
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// This method is invoked many times during the export process.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;remarks&gt;</span>
<span class="highlight-comment">/// Depending on internal condition of the context, it can be decided</span>
<span class="highlight-comment">/// whether the export is to be immediately canceled or not.</span>
<span class="highlight-comment">/// &lt;/remarks&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">bool</span> IsCanceled()
{
   <span class="highlight-keyword">return</span> m_cancelled;
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-comment">' A context would typically maintain a variable for the document being exported</span>
<span class="highlight-keyword">Private</span> m_document <span class="highlight-keyword">As</span> Document = <span class="highlight-keyword">Nothing</span>

<span class="highlight-comment">' Some contexts may find it useful to have a flag indicating</span>
<span class="highlight-comment">' whether or not the process should be canceled (see Is</span>
<span class="highlight-keyword">Private</span> m_cancelled <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>

<span class="highlight-comment">' Typically, an export context has to manage a stack of transformation</span>
<span class="highlight-comment">' for all nested objects, such as instances, lights, links, etc.</span>
<span class="highlight-keyword">Private</span> m_TransformationStack <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Stack(<span class="highlight-keyword">Of</span> Transform)()

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' Assuming that instance variables gets initiated in the context's constructor</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;param name="document"&gt;&lt;/param&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>(document <span class="highlight-keyword">As</span> Document)
    m_document = document
    m_TransformationStack.Push(Transform.Identity)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' This method is the starting point of the export process.</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;remarks&gt;</span>
<span class="highlight-comment">' The method is called only once and is typically used to prepare</span>
<span class="highlight-comment">' the context object, e.g. crate or open the output files,</span>
<span class="highlight-comment">' or establish a connection to an on-line renderer, etc.</span>
<span class="highlight-comment">' &lt;/remarks&gt;</span>
<span class="highlight-comment">' &lt;returns&gt;</span>
<span class="highlight-comment">' Return true if the export process it good to start.</span>
<span class="highlight-comment">' &lt;/returns&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> Start() <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> <span class="highlight-keyword">Implements</span> IExportContext.Start
    <span class="highlight-keyword">Return</span> <span class="highlight-keyword">True</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' This method establishes the final point of the export process.</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;remarks&gt;</span>
<span class="highlight-comment">' Resources (such as files, pipes, threads, etc.) used by the context</span>
<span class="highlight-comment">' should be properly released/closed inside this method.</span>
<span class="highlight-comment">' &lt;/remarks&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> Finish() <span class="highlight-keyword">Implements</span> IExportContext.Finish
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' This method is invoked many times during the export process.</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;remarks&gt;</span>
<span class="highlight-comment">' Depending on internal condition of the context, it can be decided</span>
<span class="highlight-comment">' whether the export is to be immediately canceled or not.</span>
<span class="highlight-comment">' &lt;/remarks&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> IsCanceled() <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> <span class="highlight-keyword">Implements</span> IExportContext.IsCanceled
    <span class="highlight-keyword">Return</span> m_cancelled
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="7d0dc6df-db0e-6a07-3b42-8dde1bedb3c1.htm">IExportContext Interface</a></div><div class="seeAlsoStyle"><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>