{% macro header() %}<title>OnFaceBegin Method </title>{% assets "css_chm" %}<link rel="stylesheet" type="text/css" href="{{ ASSET_URL }}" />{% endassets %}{% assets "js_assets" %}<script src="{{ ASSET_URL }}"></script>{% endassets %}<meta name="container" content="Autodesk.Revit.DB" /><meta name="file" content="9a9f37ae-c8c2-7355-2c3b-f26762951f1d" /><meta name="guid" content="9a9f37ae-c8c2-7355-2c3b-f26762951f1d" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script>{% endmacro %}<div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Revit 2016 API</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">IExportContext<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>OnFaceBegin Method </span></td></tr><tr id="headerTableRow3"><td align="left"><a href="7d0dc6df-db0e-6a07-3b42-8dde1bedb3c1.htm">IExportContext Interface</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('revitapifeedback@autodesk.com','Revit 2016 API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table></div><div id="mainSection"><div id="mainBody"><div class="summary">
   This method marks the beginning of a Face to be exported
</div><p /><b>Namespace:</b> <a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB</a><br /><b>Assembly:</b> <span sdata="assembly">RevitAPI</span> (in RevitAPI.dll) Version: 16.0.0.0 (16.0.0.0)<br /><b>Since:</b> 
   2014
<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve"><a href="39f98799-628b-8d65-765c-ca86949ce7ed.htm">RenderNodeAction</a> <span class="identifier">OnFaceBegin</span>(
	<a href="fbd0d7af-ac40-e81e-8e06-8b2ce90be28b.htm">FaceNode</a> <span class="parameter">node</span>
)</pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve"><span class="keyword">Function</span> <span class="identifier">OnFaceBegin</span> ( _
	<span class="parameter">node</span> <span class="keyword">As</span> <a href="fbd0d7af-ac40-e81e-8e06-8b2ce90be28b.htm">FaceNode</a> _
) <span class="keyword">As</span> <a href="39f98799-628b-8d65-765c-ca86949ce7ed.htm">RenderNodeAction</a></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve"><a href="39f98799-628b-8d65-765c-ca86949ce7ed.htm">RenderNodeAction</a> <span class="identifier">OnFaceBegin</span>(
	<a href="fbd0d7af-ac40-e81e-8e06-8b2ce90be28b.htm">FaceNode</a>^ <span class="parameter">node</span>
)</pre></td></tr></table></span></div><div id="parameters"><h4 class="subHeading">Parameters</h4><dl paramName="node"><dt><span class="parameter">node</span></dt><dd>Type: <a href="fbd0d7af-ac40-e81e-8e06-8b2ce90be28b.htm">Autodesk.Revit.DB<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>FaceNode</a><br />
   An output node that represents a Face.
</dd></dl></div><h4 class="subHeading">Return Value</h4>
   Return RenderNodeAction. Proceed if you wish to receive geometry (polymesh)
   for this face, or return RenderNodeAction.Skip otherwise.
</div><h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle, event)" tabindex="0"><img id="remarksToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style="">
   Note that this method (as well as OnFaceEnd) is invoked only if the custom
   exporter was set up to include geometric objects in the output stream.
   See <span class="nolink">[!:Autodesk::Revit::DB::CustomExporter::IncludeGeometricObjects]</span> for mode details.
</div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// This code demonstrates how to process face geometry</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;remarks&gt;</span>
<span class="highlight-comment">/// This method is invoked only if the custom exporter was set to include faces.</span>
<span class="highlight-comment">/// &lt;/remarks&gt;</span>
<span class="highlight-keyword">public</span> RenderNodeAction OnFaceBegin(FaceNode node)
{
   <span class="highlight-comment">// Get the get the actual geometric face and all information about it</span>
   <span class="highlight-comment">// and its edges by using standard API for Face and Edge</span>
   Face theFace = node.GetFace();
   <span class="highlight-keyword">double</span> area = theFace.Area;
   <span class="highlight-keyword">if</span> (theFace.HasRegions)
   {
      IList&lt;Face&gt; regionedFaces = theFace.GetRegions();
   }

   <span class="highlight-comment">// We can either skip this face or proceed with rendering it depending on </span>
   <span class="highlight-comment">// whether our export process can handle face geometry or not. If we choose </span>
   <span class="highlight-comment">// to proceed, we get calls to export tessellated meshes for this face.</span>
   <span class="highlight-keyword">if</span> (<span class="highlight-keyword">true</span> == ExportAFace(theFace))
   {
      <span class="highlight-keyword">return</span> RenderNodeAction.Skip;
   }
   <span class="highlight-keyword">return</span> RenderNodeAction.Proceed;
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// This code marks the end of processing a face</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;remarks&gt;</span>
<span class="highlight-comment">/// This method is invoked only if the custom exporter was set to include faces.</span>
<span class="highlight-comment">/// &lt;/remarks&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> OnFaceEnd(FaceNode node)
{
   <span class="highlight-comment">// Note: This method is invoked even for faces that were skipped.</span>
}

<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Assuming this would be the method that processes faces and exports them in our proprietary format.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;remarks&gt;</span>
<span class="highlight-comment">/// For example, we can decide that our format supports planar faces only, but no curved surfaces.</span>
<span class="highlight-comment">/// Or we can support basic surfaces only (planar, spherical, cylindrical), but not complex faces.</span>
<span class="highlight-comment">/// This is, naturally, depending on what a particular custom exporter is designed to output.</span>
<span class="highlight-comment">/// &lt;/remarks&gt;</span>
<span class="highlight-comment">/// &lt;returns&gt;</span>
<span class="highlight-comment">/// Should return True if the face could be handled (exported), False otherwise.</span>
<span class="highlight-comment">/// &lt;/returns&gt;</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">bool</span> ExportAFace(Face face)
{
   <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;  <span class="highlight-comment">// in this case, </span>
}</pre></div></span><span id="cbc_2" x-lang="VisualBasic" codeLanguage="VisualBasic"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/copycode.gif" />Copy</span>VB.NET</div><div class="code"><pre xml:space="preserve"><span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' This code demonstrates how to process face geometry</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;remarks&gt;</span>
<span class="highlight-comment">' This method is invoked only if the custom exporter was set to include faces.</span>
<span class="highlight-comment">' &lt;/remarks&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Function</span> OnFaceBegin(node <span class="highlight-keyword">As</span> FaceNode) <span class="highlight-keyword">As</span> RenderNodeAction <span class="highlight-keyword">Implements</span> IExportContext.OnFaceBegin
    <span class="highlight-comment">' Get the get the actual geometric face and all information about it</span>
    <span class="highlight-comment">' and its edges by using standard API for Face and Edge</span>
    <span class="highlight-keyword">Dim</span> theFace <span class="highlight-keyword">As</span> Face = node.GetFace()
    <span class="highlight-keyword">Dim</span> area <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = theFace.Area
    <span class="highlight-keyword">If</span> theFace.HasRegions <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Dim</span> regionedFaces <span class="highlight-keyword">As</span> IList(<span class="highlight-keyword">Of</span> Face) = theFace.GetRegions()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' We can either skip this face or proceed with rendering it depending on </span>
    <span class="highlight-comment">' whether our export process can handle face geometry or not. If we choose </span>
    <span class="highlight-comment">' to proceed, we get calls to export tessellated meshes for this face.</span>
    <span class="highlight-keyword">If</span> <span class="highlight-keyword">True</span> = ExportAFace(theFace) <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> RenderNodeAction.Skip
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Return</span> RenderNodeAction.Proceed
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' This code marks the end of processing a face</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;remarks&gt;</span>
<span class="highlight-comment">' This method is invoked only if the custom exporter was set to include faces.</span>
<span class="highlight-comment">' &lt;/remarks&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> OnFaceEnd(node <span class="highlight-keyword">As</span> FaceNode) <span class="highlight-keyword">Implements</span> IExportContext.OnFaceEnd
    <span class="highlight-comment">' Note: This method is invoked even for faces that were skipped.</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-comment">' &lt;summary&gt;</span>
<span class="highlight-comment">' Assuming this would be the method that processes faces and exports them in our proprietary format.</span>
<span class="highlight-comment">' &lt;/summary&gt;</span>
<span class="highlight-comment">' &lt;remarks&gt;</span>
<span class="highlight-comment">' For example, we can decide that our format supports planar faces only, but no curved surfaces.</span>
<span class="highlight-comment">' Or we can support basic surfaces only (planar, spherical, cylindrical), but not complex faces.</span>
<span class="highlight-comment">' This is, naturally, depending on what a particular custom exporter is designed to output.</span>
<span class="highlight-comment">' &lt;/remarks&gt;</span>
<span class="highlight-comment">' &lt;returns&gt;</span>
<span class="highlight-comment">' Should return True if the face could be handled (exported), False otherwise.</span>
<span class="highlight-comment">' &lt;/returns&gt;</span>
<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> ExportAFace(face <span class="highlight-keyword">As</span> Face) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>
    <span class="highlight-keyword">Return</span> <span class="highlight-keyword">False</span>
    <span class="highlight-comment">' in this case, </span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="7d0dc6df-db0e-6a07-3b42-8dde1bedb3c1.htm">IExportContext Interface</a></div><div class="seeAlsoStyle"><a href="87546ba7-461b-c646-cbb1-2cb8f5bff8b2.htm">Autodesk.Revit.DB Namespace</a></div></div></div></div>
